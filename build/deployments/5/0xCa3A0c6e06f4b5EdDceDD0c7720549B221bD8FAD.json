{"allSourcePaths": {"31": "contracts/external/actions/InitializeMarketsAction.sol", "89": "contracts/math/ABDKMath64x64.sol", "68": "contracts/internal/balances/protocols/AaveHandler.sol", "63": "contracts/global/Types.sol", "64": "contracts/internal/AccountContextHandler.sol", "86": "contracts/internal/valuation/AssetHandler.sol", "74": "contracts/internal/markets/AssetRate.sol", "152": "interfaces/notional/AssetRateAdapter.sol", "65": "contracts/internal/balances/BalanceHandler.sol", "90": "contracts/math/Bitmap.sol", "81": "contracts/internal/portfolio/BitmapAssetsHandler.sol", "148": "interfaces/compound/CErc20Interface.sol", "149": "interfaces/compound/CEtherInterface.sol", "150": "interfaces/compound/CTokenInterface.sol", "75": "contracts/internal/markets/CashGroup.sol", "69": "contracts/internal/balances/protocols/CompoundHandler.sol", "58": "contracts/global/Constants.sol", "76": "contracts/internal/markets/DateTime.sol", "59": "contracts/global/Deployments.sol", "91": "contracts/math/FloatingPoint56.sol", "70": "contracts/internal/balances/protocols/GenericToken.sol", "138": "interfaces/IEIP20NonStandard.sol", "144": "interfaces/aave/ILendingPool.sol", "154": "interfaces/notional/IRewarder.sol", "66": "contracts/internal/balances/Incentives.sol", "60": "contracts/global/LibStorage.sol", "77": "contracts/internal/markets/Market.sol", "21": "contracts/external/MigrateIncentives.sol", "82": "contracts/internal/portfolio/PortfolioHandler.sol", "92": "contracts/math/SafeInt256.sol", "6": "C:/Users/weiti/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/contracts/math/SafeMath.sol", "84": "contracts/internal/settlement/SettleBitmapAssets.sol", "85": "contracts/internal/settlement/SettlePortfolioAssets.sol", "67": "contracts/internal/balances/TokenHandler.sol", "83": "contracts/internal/portfolio/TransferAssets.sol", "78": "contracts/internal/nToken/nTokenCalculations.sol", "79": "contracts/internal/nToken/nTokenHandler.sol", "37": "contracts/external/actions/nTokenMintAction.sol", "80": "contracts/internal/nToken/nTokenSupply.sol"}, "bytecode": "6153d8610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063bb6dd58e14610050578063c4c96dae14610072578063d0e064c014610090575b600080fd5b81801561005c57600080fd5b5061007061006b366004614f93565b6100b0565b005b61007a61029d565b6040516100879190614fe7565b60405180910390f35b81801561009c57600080fd5b506100706100ab366004614fad565b6102b5565b426100b9614dd8565b6100c38184610731565b602081015151516100ef5760405162461bcd60e51b81526004016100e69061514a565b60405180910390fd5b60006100fa8361074a565b905080826080015110156101205760405162461bcd60e51b81526004016100e690615090565b60a0820151608083015160009161013e919060021a610e100261076d565b905080841161015f5760405162461bcd60e51b81526004016100e690614ffb565b6040805160008082526020820190925261019d90859083610196565b610183614e21565b81526020019060019003908161017b5790505b50876107d0565b905060006101b882866060015161093090919063ffffffff16565b60c08601518651519192506101d19161ffff168461094c565b604051632128561360e11b815273__nTokenMintAction______________________90634250ac269061020a908a90859060040161536d565b60206040518083038186803b15801561022257600080fd5b505af4158015610236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025a9190614f7b565b507f120b36bd1b47ae64f0f3ea6eb0fbfba209b2c780a31864e382d9957377a9f946878260405161028c92919061536d565b60405180910390a150505050505050565b73__nTokenMintAction______________________90565b426102be614dd8565b6102c88185610731565b80516020015160009067ffffffffffffffff811180156102e757600080fd5b5060405190808252806020026020018201604052801561032157816020015b61030e614e21565b8152602001906001900390816103065790505b508251602001519091506103475760405162461bcd60e51b81526004016100e6906152e3565b83156103715760208201515151156103715760405162461bcd60e51b81526004016100e690615233565b60006103848383868961ffff168961096f565b9050600061039e8761ffff16856000015160200151610a01565b90506103a8614e21565b6000805b8651602001518110156106a1576103d76103c882600101610a3d565b6103d18a61074a565b9061076d565b60208401528351805160009161040a91889190859081106103f457fe5b602002602001015184600260ff1601878c610ae1565b905060006104258a8660200151610b4690919063ffffffff16565b895190915060009061043b906001860184610ba3565b90508b806104555750836001148015610455575088516002145b80610466575060208a015151518410155b80610494575083600114801561049457508860028151811061048457fe5b602002602001015160c001516000145b156105155760006104bc84896060015187815181106104af57fe5b6020026020010151610c15565b9050808760400181815250506104ec8185848b6040015189815181106104de57fe5b602002602001015187610c32565b60c0880181905261050f5760405162461bcd60e51b81526004016100e690615313565b5061067d565b8361053a578860018151811061052757fe5b602002602001015160c001519450610597565b836001141561055c57610555896105508d61074a565b610c5c565b9450610597565b600061057361056a86610a3d565b6103d18e61074a565b905061059381878c888151811061058657fe5b6020026020010151610cf5565b9550505b60006105bc8684848b6040015189815181106105af57fe5b6020026020010151610d8c565b9050876020015185815181106105ce57fe5b602002602001015181131561064857876020015185815181106105ed57fe5b602002602001015190506106018482610c15565b876040018181525050610624876040015185848b6040015189815181106104de57fe5b9550856106435760405162461bcd60e51b81526004016100e690615062565b610658565b6106528482610c15565b60408801525b60018760400151121561066d57600160408801525b5060c0860185905260e086018b90525b60c086015160a08701526106968661ffff8f168c610e2e565b5050506001016103ac565b5060006106bf8760c001518860200151610e7790919063ffffffff16565b50925050506106db8760c001518b61ffff16896060015161094c565b6106ee8760c001518289608001516110b6565b7fcffeff9accc9171f01fec36e09a1a06f0160ce50a8c4c0a2adff9cec562adf088a60405161071d919061535e565b60405180910390a150505050505050505050565b61073b8282611129565b610744816111cc565b90915250565b60006276a70082101561075c57600080fd5b6276a700825b06820390505b919050565b6000828201838110156107c7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000806107ed8560c0015186600001516000015161ffff166111ef565b60a0860151855191925060011a620f424002906000901561081a57610815856276a700610b46565b61081c565b845b9050600061082984611224565b90505b8015610912576000610842896080015183611249565b90508751600014801561086157508851602001516108619082896112fc565b1561088557610872858360006113a1565b945061087d85611224565b91505061082c565b60c089015189515160009161089e9161ffff16846113ec565b905060008112156108f25789516000906108b9908487611431565b9050808611156108cb575060006108d8565b6108d58187610b46565b90505b6108ee6108e783858c85611510565b8990611556565b9750505b6108fe868460006113a1565b955061090986611224565b9250505061082c565b875160400151610922908661156c565b9450505050505b9392505050565b600061093c8383611556565b905060008112156107ca57600080fd5b600081121561095a57600080fd5b61096a838383600080600061159d565b505050565b6000806000831561099457610983866116c8565b64ffffffffff1660808901526109b9565b61099e88876116e4565b6109aa85878a8a6117be565b6109b68888878961184e565b90505b60608801516109c89082610930565b6060890182905291506305f5e10082136109f45760405162461bcd60e51b81526004016100e690615204565b5090505b95945050505050565b610a09614e69565b610a11614e69565b610a1b84846118d7565b60208301528152610a2c848461190f565b606083015260408201529392505050565b60008160011415610a5257506276a700610768565b8160021415610a65575062ed4e00610768565b8160031415610a7957506301da9c00610768565b8160041415610a8d57506303b53800610768565b8160051415610aa157506309450c00610768565b8160061415610ab5575063128a1800610768565b8160071415610ac957506325143000610768565b60405162461bcd60e51b81526004016100e6906150f6565b600080610afc6305f5e100610af68989611939565b90611987565b606085018190526080850181905283515160208087015190860151929350610b2b929161ffff169088856119b8565b825160400151610b3b9082611ab5565b979650505050505050565b600082821115610b9d576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082600111158015610bba575083602001518311155b610bc357600080fd5b606084015160806008600019860102019060ff90821c16633b9aca00026000610bfc610bee86611ae0565b610af6846301da9c00611939565b905060008113610c0b57600080fd5b9695505050505050565b60006107c7610c28633b9aca0084611556565b610af68585611939565b600080610c3f8484611afa565b90506000610c508888888588611b65565b98975050505050505050565b6000600383511015610c805760405162461bcd60e51b81526004016100e69061511d565b6107c783600181518110610c9057fe5b60200260200101516020015184600281518110610ca957fe5b60200260200101516020015185600181518110610cc257fe5b602002602001015160c0015186600281518110610cdb57fe5b602090810291909101015160c0015162ed4e008701611c22565b602081015160c0820151600091906276a7008201828710610d285760405162461bcd60e51b81526004016100e69061519d565b858210610d5757610d4d866103d1898603610d478387038c8703611c80565b90611cd9565b9350505050610929565b6000610d6d888503610d47858a038b8603611c80565b9050808711610d7d576000610d81565b8087035b945050505050610929565b600080610d998386611afa565b90506000610da78787611afa565b90506000610dc7610dc287610dbc8587611556565b90611d40565b611d59565b9050610dd981621dcd6560491b611d8c565b9050610de481611ddf565b90506000610dff82610dfa84600160401b611e34565b611d8c565b9050610e1181621dcd6560491b611e67565b9050610e1c81611e9d565b60070b9450505050505b949350505050565b60006276a700610e3d4261074a565b019050610e4b848483611ea6565b610e708260c001518486602001518560800151610e6b8960400151611f0d565b611f1b565b5050505050565b6000808080808080805b895151811015610f085760008a600001518281518110610e9d57fe5b60200260200101519050600380811115610eb357fe5b8160a001516003811115610ec357fe5b1415610ece57600080fd5b60028160a001516003811115610ee057fe5b14158015610ef057506060810151155b15610eff57610eff8b83612085565b50600101610e81565b5060005b895151811015610fab5760008a600001518281518110610f2857fe5b6020026020010151905060026003811115610f3f57fe5b8160a001516003811115610f4f57fe5b1415610f6357608081015160009055610fa2565b60018160a001516003811115610f7557fe5b1415610f8e57608081015180610f8b83826121d5565b50505b610f9a818686866122fe565b919650945092505b50600101610f0c565b5060608901516000610fbb612361565b6001600160a01b038b1660009081526020829052604081209192505b8c60200151518110156110855760008d602001518281518110610ff657fe5b60200260200101519050806060015160001415611013575061107d565b60028160a00151600381111561102557fe5b14158015611043575060038160a00151600381111561104057fe5b14155b61104c57600080fd5b611058818989896122fe565b919950975095506110758184876010811061106f57fe5b016121d5565b600185019450505b600101610fd7565b506010831115801561109c575064ffffffffff8411155b6110a557600080fd5b50939a929950975095509350505050565b63ffffffff81106110c657600080fd5b60006110d061236e565b6001600160a01b039094166000908152602094909452506040909220805460ff909216600160501b0260ff60501b1963ffffffff909416600160301b0269ffffffff000000000000199093169290921792909216179055565b6111368161ffff1661237b565b6001600160a01b031660c0830181905260009081908190611156906123a1565b9450945094505050600061116d8660c0015161240a565b505060808701859052604087018190526001600160d81b0319831660a088015260c08701519091506111a19084600061246b565b602087015260c08601516111b99061ffff87166124fe565b5050506060909601959095525050505050565b6111d4614e91565b60006111e38361ffff166125a7565b905061092983826125f3565b6000806111fa612636565b6001600160a01b038516600090815260209182526040808220868352909252205491505092915050565b60008161123357506000610768565b61123c82612643565b60ff036001019050919050565b60008161125557600080fd5b61010082111561126457600080fd5b600061126f846116c8565b90506000605a841161128a57506201518083020190506107ca565b608784116112b2575060591983016207e900908102908206909103016276a7000190506107ca565b60c384116112db5750608619830162278d00908102908206909103016301da9c000190506107ca565b5060c21983016276a70090810290820690910301630b1fa8000190506107ca565b600080841161131d5760405162461bcd60e51b81526004016100e6906150c7565b600784111561133e5760405162461bcd60e51b81526004016100e6906151d4565b6276a70083061561135157506000610929565b600061135c8361074a565b905060015b8581116113955761137b61137482610a3d565b839061076d565b85141561138d57600192505050610929565b600101611361565b50600095945050505050565b6000600183101580156113b657506101008311155b6113bf57600080fd5b81156113d85750600160ff1b60001983011c8317610929565b50600160ff1b60001983011c198316610929565b6000806113f76126dc565b6001600160a01b03861660009081526020918252604080822087835283528082208683529092522054600f90810b900b9150509392505050565b6000806000611445866020015186866126e9565b915091506000611454876127b1565b90508161146d578651610d4d9061ffff168783886127c5565b60006114788661074a565b9050600061148861137486610a3d565b905060006114a08a6000015161ffff1683868b6127c5565b905060008087600114156114c5578991506114be8c60400151612864565b90506114f4565b6114db6114d460018a03610a3d565b869061076d565b91506114f18c6000015161ffff1683888d6127c5565b90505b611501828583868f611c22565b98505050505050505050610929565b60008461151f57506000610e26565b600061152b8585610b46565b9050600061153982856128f5565b9050633b9aca0081131561154c57600080fd5b610b3b8782611d40565b808203828113156000831215146107ca57600080fd5b600080610e268460200151610af686604001516115976402540be4008861193990919063ffffffff16565b90611939565b60006115a761295d565b6001600160a01b0388166000908152602082815260408083208a845290915290209091506001600160571b031986128015906115ea57506001600160571b038613155b6115f357600080fd5b6000851215801561160b57506001600160501b038513155b61161457600080fd5b831561161f57600080fd5b66ffffffffffffff83111561163357600080fd5b805466ffffffffffffff909316600160701b0266ffffffffffffff60701b19600a9790970b6affffffffffffffffffffff16600160a81b026001600160a81b0363ffffffff909616600160501b0263ffffffff60501b196001600160501b0390981669ffffffffffffffffffff1990961695909517969096169390931793909316939093179390931692909217909155505050565b6000620151808210156116da57600080fd5b6201518082610762565b60006116ef8261074a565b9050808360800151106117145760405162461bcd60e51b81526004016100e69061525f565b600061172484602001518461296a565b90506117558160008151811061173657fe5b6020026020010151602001518560600151612b6890919063ffffffff16565b60608501525060c08301518351516080850151600092839261177e9261ffff9091169087612b7e565b606087015191935091506117929083612b68565b606086015264ffffffffff8111156117a957600080fd5b64ffffffffff16608090940193909352505050565b60006117cd83600001516127b1565b905060006117da8561074a565b905060015b602085015151518110156118455761183d87866020015160000151838151811061180557fe5b60200260200101516020015188600087878a888151811061182257fe5b6020026020010151612ca3909695949392919063ffffffff16565b6001016117df565b50505050505050565b600060015b602086015151518110156118cb576000866020015160000151828151811061187757fe5b60200260200101519050600160ff1681604001511461189557600080fd5b6118b28760c001518683602001518a608001518560600151611f1b565b5060208701516118c29083612085565b50600101611853565b506109f88585846107d0565b60608060006118e4612cda565b60008681526020829052604081209192506119029082908790612ce7565b9097909650945050505050565b606080600061191c612e86565b600086815260208290526040902090915061190281866001612ce7565b8181026000198314156119695781158061195b57508282828161195857fe5b05145b61196457600080fd5b6107ca565b82158061197e57508183828161197b57fe5b05145b6107ca57600080fd5b60008160001914801561199d5750600160ff1b83145b156119a757600080fd5b8183816119b057fe5b059392505050565b84516119c79085858585612e93565b156119d157610e70565b6040850151156119fe5760006119ee866020015186868686612e93565b905080156119fc5750610e70565b505b611a0782612fa4565b15611a1a576000811215611a1a57600080fd5b6001600160571b03198112801590611a3957506001600160571b038113155b611a4257600080fd5b84602001515185604001511415611a6657611a608560200151612fba565b60208601525b60008560200151866040015181518110611a7c57fe5b6020908102919091018101519586528501939093526040808501929092526060840152600060a090930192909252500180516001019052565b600080610e268460400151610af66402540be400610af687896020015161193990919063ffffffff16565b60006001600160ff1b03821115611af657600080fd5b5090565b600080611b17611b126301da9c00610d478787611c80565b613073565b90506000611b2b82621dcd6560491b611d8c565b90506000611b3882611ddf565b90506000611b4c82621dcd6560491b611e67565b9050611b5781611e9d565b60070b979650505050505050565b6000806000611b7888888888600061308a565b9150915080611b8c576000925050506109f8565b6000611b9783611d59565b90506000611bab82621dcd6560491b611d8c565b90506000611bb882613140565b90506000611bd4611bcf83621dcd6560491b611e67565b61317a565b67ffffffffffffffff1690506000611bf489610d47846301da9c00611c80565b905063ffffffff811115611c125760009750505050505050506109f8565b9c9b505050505050505050505050565b6000818610611c3057600080fd5b848210611c3c57600080fd5b838310611c6257611c5b846103d1888803610d478388038b8803611c80565b90506109f8565b611c5b611c79878703610d478688038a8703611c80565b8590610b46565b600082611c8f575060006107ca565b82820282848281611c9c57fe5b04146107c75760405162461bcd60e51b81526004018080602001828103825260218152602001806153826021913960400191505060405180910390fd5b6000808211611d2f576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611d3857fe5b049392505050565b60006107c7611d4f8484611939565b633b9aca00611987565b6000677fffffffffffffff198212158015611d7c5750677fffffffffffffff8213155b611d8557600080fd5b5060401b90565b600081600f0b60001415611d9f57600080fd5b600082600f0b604085600f0b901b81611db457fe5b05905060016001607f1b03198112801590611dd6575060016001607f1b038113155b6107c757600080fd5b6000600160461b82600f0b12611df457600080fd5b683fffffffffffffffff1982600f0b1215611e1157506000610768565b6107ca608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d613196565b6000600f83810b9083900b0160016001607f1b03198112801590611dd6575060016001607f1b038113156107c757600080fd5b6000600f83810b9083900b0260401d60016001607f1b03198112801590611dd6575060016001607f1b038113156107c757600080fd5b600f0b60401d90565b6000611eb0613c44565b60008481526020828152604080832088830151845282528083208684529091529081902090860151606087015160a088015160c089015160e08a01519596509394611eff948694939291613c51565b610e70818660800151613d65565b60006107ca60001983611939565b600080611f2887876111ef565b90506000611f346126dc565b6001600160a01b0389166000908152602082815260408083208b845282528083208a8452909152812091925080611f6b888a613dae565b9150915080611f7957600080fd5b611f838583613eb9565b15612012578254600090611f9f908990600f90810b900b612b68565b905060016001607f1b03198112801590611fc0575060016001607f1b038113155b611fc957600080fd5b83546001600160801b0319166001600160801b03600f83900b1617845580611ffa57611ff7868460006113a1565b95505b6120058c8c88613ee9565b95506109f8945050505050565b86156120765760016001607f1b03198712801590612037575060016001607f1b038713155b61204057600080fd5b82546001600160801b0319166001600160801b03600f89900b16178355612069858360016113a1565b94506120768b8b87613ee9565b50949998505050505050505050565b815151811061209357600080fd5b60008260600151116120a457600080fd5b6000826000015182815181106120b657fe5b60200260200101519050600260038111156120cd57fe5b8160a0015160038111156120dd57fe5b141580156120fb575060038160a0015160038111156120f857fe5b14155b61210457600080fd5b606083018051600019019052600080805b8551518110156121775760008660000151828151811061213157fe5b6020026020010151905082816080015111801561215e575060028160a00151600381111561215b57fe5b14155b1561216e57806080015192508193505b50600101612115565b5081841415612190575050600260a091909101526121d1565b6000856000015183815181106121a257fe5b602090810291909101015160808581018051918301805190915252600160a09182015260029401939093525050505b5050565b8151158015906121e857508151613fff10155b6121f157600080fd5b8160200151600010801561220e5750602082015164ffffffffff10155b61221757600080fd5b8160400151600010801561223057506040820151600810155b61223957600080fd5b60608201516001600160571b031913801590612260575060608201516001600160571b0312155b61226957600080fd5b8151815460208401516040850151606090950151600a0b6affffffffffffffffffffff16600160401b0272ffffffffffffffffffffff00000000000000001960ff909616600160381b0267ff000000000000001964ffffffffff909316620100000266ffffffffff00001961ffff90961661ffff19909516949094179490941692909217169190911792909216919091179055565b60008060008061230d88613f43565b905084158061231b57508085115b15612324578094505b8680612334575060008860600151125b965061ffff86161561234557600080fd5b50509451939560109390931c60f09490941b9390931793509150565b6000806107ca600d613faa565b6000806107ca6002613faa565b600080612386613fc3565b6000938452602052505060409020546001600160a01b031690565b6000806000806000806123b261236e565b6001600160a01b039097166000908152602097909752505060409094205461ffff81169563ffffffff62010000830481169650600160301b830416945060ff600160501b8304169350600160581b90910460d81b9150565b600080600080612418613fd0565b6001600160a01b0395909516600090815260209590955250506040909220546bffffffffffffffffffffffff811693600160601b82046001600160801b03169350600160e01b90910463ffffffff169150565b612473614ebd565b61247b614ebd565b60ff841661248a579050610929565b6124948585613fdd565b815260ff841660608201528267ffffffffffffffff811180156124b657600080fd5b506040519080825280602002602001820160405280156124f057816020015b6124dd614ee5565b8152602001906001900390816124d55790505b506020820152949350505050565b600080600080600061250e61295d565b6001600160a01b0388166000908152602082815260408083208a8452909152902080546001600160501b0381169650600160501b900463ffffffff169450909150831561257757805461257090600160701b900466ffffffffffffff16614006565b925061258c565b8054600160701b900466ffffffffffffff1692505b54600160a81b9004600a90810b900b97939650919450925050565b6125af614f25565b60008060006125bd85614014565b604080516060810182526001600160a01b039093168352602083019390935260ff16600a0a918101919091529350505050919050565b6125fb614e91565b600061260a8461ffff166140d7565b6040805160808101825261ffff96909616865260ff821660208701528501939093525050606082015290565b6000806107ca600b613faa565b60008161264f57600080fd5b600160801b821061266257608091821c91015b600160401b821061267557604091821c91015b640100000000821061268957602091821c91015b62010000821061269b57601091821c91015b61010082106126ac57600891821c91015b601082106126bc57600491821c91015b600482106126cc57600291821c91015b6002821061076857600101919050565b6000806107ca600c613faa565b6000806000851161270c5760405162461bcd60e51b81526004016100e6906150c7565b600785111561272d5760405162461bcd60e51b81526004016100e6906151d4565b60006127388461074a565b905060015b86811161279057600061275961275283610a3d565b849061076d565b90508681141561277157509250600091506127a99050565b8681111561278757509250600191506127a99050565b5060010161273d565b5060405162461bcd60e51b81526004016100e6906152b6565b935093915050565b6060015161012c60089190911c60ff160290565b6000806127d0613c44565b905060006276a7006127e18561074a565b6000898152602085815260408083208b84528252808320949093018083529390522080549192509063ffffffff600160a01b8204811691600160c01b8104821691600160e01b90910416816128485760405162461bcd60e51b81526004016100e690615032565b6128558184848c8c6140f4565b9b9a5050505050505050505050565b80516000906001600160a01b031661287e57506000610768565b600082600001516001600160a01b031663dd30a6666040518163ffffffff1660e01b815260040160206040518083038186803b1580156128bd57600080fd5b505afa1580156128d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c79190614f7b565b60008061290d611b126301da9c00610d478688611c80565b905061291f81621dcd6560491b611d8c565b905061293261292d82614187565b611ddf565b905061294481621dcd6560491b611e67565b9050600061295182611e9d565b60070b95945050505050565b6000806107ca6006613faa565b6060612974614f25565b600061298085856141a9565b905061298a614e21565b815161299a575091506107ca9050565b6000805b875151811015612b5c576000886000015182815181106129ba57fe5b6020026020010151905060006129cf82613f43565b9050888111156129e0575050612b54565b81600001518685815181106129f157fe5b60200260200101516000015114612a26576001840193508160000151868581518110612a1957fe5b6020908102919091010151525b604082015160009060011415612a7357612a49836000015184602001518c6142ce565b9750612a6283606001518961156c90919063ffffffff16565b9050612a6e8b85612085565b612b0a565b612a808360400151612fa4565b15612b0a57612a9986846000015185602001518561443e565b6000612ab284606001518861445290919063ffffffff16565b602086015191935091508b1015612ad357612ace8c86836144fa565b612b08565b612ae6846000015185602001518d6142ce565b9850612afc612af58a8361156c565b8390612b68565b9150612b088c86612085565b505b612b3481888781518110612b1a57fe5b602002602001015160200151612b6890919063ffffffff16565b878681518110612b4057fe5b602002602001015160200181815250505050505b60010161299e565b50919695505050505050565b818101828112156000831215146107ca57600080fd5b6000806000612b8d87876111ef565b9050612b98846116c8565b915084821015612ba757600080fd5b6000612bb38684613dae565b50905080612bc2575050612c9a565b6000612bcd83611224565b90505b8015801590612bdf5750818111155b15612c29576000612bf08883611249565b9050612c08612c018b8b848b6145b0565b8790612b68565b9550612c16848360006113a1565b9350612c2184611224565b915050612bd0565b60005b8115612c8a576000612c3e8984611249565b9050600080612c4d8884613dae565b9150915080612c5b57600080fd5b612c67848360016113a1565b9350612c75878660006113a1565b9650612c8087611224565b9450505050612c2c565b612c958a8a83613ee9565b505050505b94509492505050565b612cb0878787868561464b565b612cc98760e001518860a001518960c0015185886140f4565b60c090970196909652505050505050565b6000806107ca6004613faa565b6060806000808567ffffffffffffffff81118015612d0457600080fd5b50604051908082528060200260200182016040528015612d2e578160200160208202803683370190505b50905060008667ffffffffffffffff81118015612d4a57600080fd5b50604051908082528060200260200182016040528015612d74578160200160208202803683370190505b50905060005b87811015612e78578884600e8110612d8e57fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16838281518110612dbc57fe5b60209081029190910101526001909301928884600e8110612dd957fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16828281518110612e0757fe5b60209081029190910101526001909301928615612e70576000838281518110612e2c57fe5b6020026020010151138015612e5457506000828281518110612e4a57fe5b6020026020010151135b612e705760405162461bcd60e51b81526004016100e690615289565b600101612d7a565b509097909650945050505050565b6000806107ca6005613faa565b6000805b8651811015612f97576000878281518110612eae57fe5b60200260200101519050848160400151141580612ecc575080518714155b80612edb575085816020015114155b15612ee65750612f8f565b60028160a001516003811115612ef857fe5b14158015612f16575060038160a001516003811115612f1357fe5b14155b612f1f57600080fd5b6060810151600090612f319086612b68565b9050612f3c86612fa4565b15612f4f576000811215612f4f57600080fd5b6001600160571b03198112801590612f6e57506001600160571b038113155b612f7757600080fd5b6060820152600160a090910181905291506109f89050565b600101612e97565b5060009695505050505050565b6000600282108015906107ca5750506008101590565b606060008251600014612fd1578251600202612fd4565b60015b905060008167ffffffffffffffff81118015612fef57600080fd5b5060405190808252806020026020018201604052801561302957816020015b613016614ee5565b81526020019060019003908161300e5790505b50905060005b845181101561306b5784818151811061304457fe5b602002602001015182828151811061305857fe5b602090810291909101015260010161302f565b509392505050565b6000677fffffffffffffff821115611d8557600080fd5b600080806130988885610930565b905060006130b06130a98a8a612b68565b8390614706565b905063393870008113156130cc57600080935093505050613136565b6000806130d88361471f565b91509150806130f1576000809550955050505050613136565b600061310789613101858d614706565b90612b68565b9050633b9aca0081121561312657600080965096505050505050613136565b9550600194506131369350505050565b9550959350505050565b60008082600f0b1361315157600080fd5b608061315c836147c1565b600f0b6fb17217f7d1cf79abc9e3b39803f2f6af02901c9050919050565b60008082600f0b121561318c57600080fd5b50600f0b60401d90565b6000600160461b82600f0b126131ab57600080fd5b683fffffffffffffffff1982600f0b12156131c857506000610768565b6001607f1b60006001603f1b8416600f0b13156131f65770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315613223577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b1315613250577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b131561327d5770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b13156132aa577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b13156132d757700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b13156133045770010163da9fb33356d84a66ae336dcdfa3f0260801c5b600083600160381b16600f0b131561332d57700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b13156133595770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b1315613385577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b13156133b157700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b13156133dd577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b131561340957700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b13156134355770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b1315613461577001000162e525ee054754457d59952920260260801c5b600083600160301b16600f0b131561348a5770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b13156134b5577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b13156134e057700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b131561350b5770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b131561353657700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b13156135615770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b131561358c577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b13156135b757700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b13156135e2577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b131561360c57700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b13156136365770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b1315613660577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b131561368a5770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b13156136b4577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b13156136de57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b13156137085770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b131561373257700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b131561375b5770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315613784577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b13156137ad57700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b13156137d6577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b13156137ff57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b13156138285770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b1315613851577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b131561387a5770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b13156138a2577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b13156138ca57700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b13156138f25770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b131561391a57700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b13156139425770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b131561396a577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b131561399257700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b13156139ba577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b13156139e157700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b1315613a085770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b1315613a2f577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b1315613a565770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315613a7d577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b1315613aa457700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b1315613acb5770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b1315613af257700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b1315613b185770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b1315613b3e577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b1315613b6457700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b1315613b8a577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b1315613bb057700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b1315613bd65770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315613bfc577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b1315613c225770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c60016001607f1b038111156107ca57600080fd5b6000806107ca600a613faa565b60008512158015613c6957506001600160501b038513155b613c7257600080fd5b60008412158015613c8a57506001600160501b038413155b613c9357600080fd5b826000108015613ca7575063ffffffff8311155b613cb057600080fd5b816000108015613cc4575063ffffffff8211155b613ccd57600080fd5b63ffffffff811115613cde57600080fd5b855469ffffffffffffffffffff19166001600160501b039586161769ffffffffffffffffffff60501b1916600160501b94909516939093029390931763ffffffff60a01b1916600160a01b63ffffffff928316021763ffffffff60c01b1916600160c01b93821693909302929092176001600160e01b0316600160e01b9190921602179055565b60008112158015613d7d57506001600160501b038113155b613d8657600080fd5b600191909101805469ffffffffffffffffffff19166001600160501b03909216919091179055565b6000806000613dbc856116c8565b905062015180840615613dd6576000809250925050613eb2565b838110613dea576000809250925050613eb2565b6201518081850304605a8111613e0757925060019150613eb29050565b6101688111613e46576000620151806207e900840604820160591901905060068104605a0160068281613e3657fe5b0660001494509450505050613eb2565b6108708111613e765760006201518062278d00840604820161016719019050601e8104608701601e8281613e3657fe5b611de28111613ea6576000620151806276a700840604820161086f19019050605a810460c301605a8281613e3657fe5b61010060009350935050505b9250929050565b600060018210158015613ece57506101008211155b613ed757600080fd5b50600019011b600160ff1b9081161490565b6014613ef48261489c565b1115613f125760405162461bcd60e51b81526004016100e690615174565b6000613f1c612636565b6001600160a01b039094166000908152602094855260408082209482529390945250912055565b6000808260400151118015613f5d57506040820151600810155b613f6657600080fd5b6040820151600210613f7d57506020810151610768565b6000613f8f6001846040015103610a3d565b6020840151909150610929906276a700906103d19084610b46565b6000620f4240826012811115613fbc57fe5b0192915050565b6000806107ca6003613faa565b6000806107ca6011613faa565b60606000613feb848461496c565b90506001815111613ffd5790506107ca565b6107c781614a8e565b600881901c60ff9091161b90565b600080600080600061402586614c47565b909250905060006001600160a01b03831661404a5750600090506402540be4006140cc565b826001600160a01b0316631ee108336040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561408557600080fd5b505af1158015614099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140bd9190614f7b565b9050600081136140cc57600080fd5b969195509350915050565b6000806140e2614c7e565b60009384526020525050604090205490565b600080831161410257600080fd5b818611156141115750836109f8565b600061411d8388610b46565b90508381111561413057859150506109f8565b600061414485610d4784633b9aca00611c80565b90506000614156633b9aca0083610b46565b90506000614179633b9aca00610d4761416f8b86611c80565b6103d18d88611c80565b9a9950505050505050505050565b6000600f82900b60016001607f1b031914156141a257600080fd5b5060000390565b81515160609060009081906141f35760408051600080825260208201909252906141e9565b6141d6614f4f565b8152602001906001900390816141ce5790505b50925050506107ca565b8451515b6000198101901561424e5760008660000151828151811061421457fe5b602002602001015190508561422882613f43565b11156142345750614249565b8051831461424757805160019094019392505b505b6141f7565b5060008267ffffffffffffffff8111801561426857600080fd5b506040519080825280602002602001820160405280156142a257816020015b61428f614f4f565b8152602001906001900390816142875790505b50905082156109f85781816000815181106142b957fe5b60209081029190910101515295945050505050565b6142d6614f25565b6000806142e38686614c8b565b9150915081600014156144135760006142fb87614014565b91945090925090506001600160a01b0381161561441157600061431c614cd4565b905085600010801561432e5750858711155b801561433f575064ffffffffff8611155b61434857600080fd5b83600012801561435f57506001600160801b038413155b61436857600080fd5b6000888152602082815260408083208a845290915290819020805464ffffffffff191664ffffffffff89161774ffffffffffffffffffffffffffffffff00000000001916650100000000006001600160801b038816021760ff60a81b1916600160a81b60ff871602178155905188908a907f0fdfa6885701e2f1f42e4187b9231cf81c1fe23671ef64fa46f34ddb56c1dc189061440690899061534a565b60405180910390a350505b505b6040805160608101825260008152602081019390935260ff909116600a0a9082015290509392505050565b61444c84848460018561464b565b50505050565b6000808261446557506000905080613eb2565b6000831361447257600080fd5b6144918460800151610af685876060015161193990919063ffffffff16565b91506144b28460800151610af685876040015161193990919063ffffffff16565b60808501519091506144c49084610930565b608085015260408401516144d89082610930565b604085015260608401516144ec9083610930565b6060850152613eb284614ce1565b60008360000151838151811061450c57fe5b60200260200101519050826000146145975760008460000151600185038151811061453357fe5b602002602001015190508160000151816000015114801561455b575081602001518160200151145b801561456b575060408101516001145b1561459557606081015161457f9084612b68565b6060820152600160a08201526145958585612085565b505b600160408201819052606082019290925260a001525050565b6000806145bb6126dc565b6001600160a01b0387166000908152602082815260408083208984528252808320888452909152812054919250600f91820b90910b906145fc8787876142ce565b9050614608818361156c565b6001600160a01b03989098166000908152602093845260408082209882529784528781209681529590925250505091902080546001600160801b03191690555090565b6000614655613c44565b6000868152602082815260408083208884528252808320868452825291829020808a5290890187905280546001600160501b03808216938b0193909352600160501b810490921660608a015263ffffffff600160a01b8304811660a08b0152600160c01b8304811660c08b0152600160e01b90920490911660e08901529091508084156146f45760018201546001600160501b031660808901526146fc565b600060808901525b5050505050505050565b60006107c761471984633b9aca00611939565b83611987565b600080633b9aca00831415614739575060009050806147bc565b600061475361474c633b9aca0086611556565b8590614706565b9050600061476082611d59565b9050600081600f0b1361477b576000809350935050506147bc565b60006147af6147aa61479e61478f85613140565b6814b927f32bffb83338614d39565b621dcd6560491b611e67565b611e9d565b60070b9450600193505050505b915091565b60008082600f0b136147d257600080fd5b6000600f83900b600160401b81126147ec576040918201911d5b6401000000008112614800576020918201911d5b620100008112614812576010918201911d5b6101008112614823576008918201911d5b60108112614833576004918201911d5b60048112614843576002918201911d5b60028112614852576001820191505b603f19820160401b600f85900b607f8490031b6001603f1b5b60008113156148915790800260ff81901c8281029390930192607f011c9060011d61486b565b509095945050505050565b600181901c7f5555555555555555555555555555555555555555555555555555555555555555908116911601600281901c7f3333333333333333333333333333333333333333333333333333333333333333908116911601600481901c7f07070707070707070707070707070707070707070707070707070707070707079190911601600881901c7e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f908116911601601081901c01602081901c01604081901c01608081901c60ff90811691160190565b606060108260ff16111561497f57600080fd5b6000614989612361565b6001600160a01b038516600090815260208290526040812091925060ff851667ffffffffffffffff811180156149be57600080fd5b506040519080825280602002602001820160405280156149f857816020015b6149e5614ee5565b8152602001906001900390816149dd5790505b50905060005b8560ff16811015614a84576000838260108110614a1757fe5b0190506000838381518110614a2857fe5b602090810291909101810151835461ffff8116825264ffffffffff620100008204169282019290925260ff600160381b8304166040820152600160401b909104600a90810b900b606082015260800191909152506001016149fe565b5095945050505050565b805160008167ffffffffffffffff81118015614aa957600080fd5b50604051908082528060200260200182016040528015614ad3578160200160208202803683370190505b50905060005b82811015614b30576000848281518110614aef57fe5b60200260200101519050614b10816000015182602001518360400151614d6c565b838381518110614b1c57fe5b602090810291909101015250600101614ad9565b5060015b8281101561444c57805b600081118015614b765750828181518110614b5557fe5b6020026020010151836001830381518110614b6c57fe5b6020026020010151115b15614c3e57828181518110614b8757fe5b6020026020010151836001830381518110614b9e57fe5b6020026020010151846001840381518110614bb557fe5b60200260200101858481518110614bc857fe5b6020026020010182815250828152505050848181518110614be557fe5b6020026020010151856001830381518110614bfc57fe5b6020026020010151866001840381518110614c1357fe5b60200260200101878481518110614c2657fe5b60209081029190910101919091525260001901614b3e565b50600101614b34565b6000806000614c54614dc7565b600094855260205250506040909120546001600160a01b03811692600160a01b90910460ff169150565b6000806107ca6009613faa565b6000806000614c98614cd4565b6000958652602090815260408087209587529490525050509020546501000000000081046001600160801b031691600160a81b90910460ff1690565b6000806107ca6008613faa565b6000614cec82614dd4565b905060008160000160189054906101000a900463ffffffff169050614d2b82846040015185606001518660a001518563ffffffff168860e00151613c51565b61096a828460800151613d65565b6000600f82810b9084900b0360016001607f1b03198112801590611dd6575060016001607f1b038113156107c757600080fd5b6000613fff841115614d7d57600080fd5b64ffffffffff831115614d8f57600080fd5b6008821115614d9d57600080fd5b5067ffff000000000000603084901b1665ffffffffff00600884901b161760ff8216179392505050565b6000806107ca600f613faa565b5190565b6040518060e00160405280614deb614e91565b8152602001614df8614ebd565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b60405180610100016040528060008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6040805160808101825260008082526020820152908101614eb0614f25565b8152600060209091015290565b6040518060800160405280606081526020016060815260200160008152602001600081525090565b6040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160006003811115614f2057fe5b905290565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b803561ffff8116811461076857600080fd5b600060208284031215614f8c578081fd5b5051919050565b600060208284031215614fa4578081fd5b6107c782614f69565b60008060408385031215614fbf578081fd5b614fc883614f69565b915060208301358015158114614fdc578182fd5b809150509250929050565b6001600160a01b0391909116815260200190565b60208082526017908201527f496e76616c696420737765657020636173682074696d65000000000000000000604082015260600190565b60208082526016908201527513585c9ad95d081b9bdd081a5b9a5d1a585b1a5e995960521b604082015260600190565b6020808252601490820152734f7261636c652072617465206f766572666c6f7760601b604082015260600190565b60208082526017908201527f4d75737420696e697469616c697a65206d61726b657473000000000000000000604082015260600190565b60208082526015908201527410d1ce881b9bc81b585c9ad95d1cc81b1a5cdd1959605a1b604082015260600190565b6020808252600d908201526c092dcecc2d8d2c840d2dcc8caf609b1b604082015260600190565b60208082526013908201527224a69d1039b4bc1036b7b73a341032b93937b960691b604082015260600190565b60208082526010908201526f4e6f206e546f6b656e2061737365747360801b604082015260600190565b6020808252600f908201526e4f766572206d61782061737365747360881b604082015260600190565b60208082526017908201527f494d3a20696e746572706f6c6174696f6e206572726f72000000000000000000604082015260600190565b60208082526016908201527510d1ce881b585c9ad95d081a5b99195e08189bdd5b9960521b604082015260600190565b6020808252601590820152740929a7440d2dce6eaccccd2c6d2cadce840c6c2e6d605b1b604082015260600190565b60208082526012908201527112534e881b9bdd08199a5c9cdd081a5b9a5d60721b604082015260600190565b60208082526010908201526f494d3a20696e76616c69642074696d6560801b604082015260600190565b60208082526013908201527250543a20696e69742076616c7565207a65726f60681b604082015260600190565b60208082526013908201527210d1ce881b9bc81b585c9ad95d08199bdd5b99606a1b604082015260600190565b60208082526016908201527512534e881b9bc81b585c9ad95d1cc81d1bc81a5b9a5d60521b604082015260600190565b60208082526017908201527f494d3a20696d706c6965642072617465206661696c6564000000000000000000604082015260600190565b6001600160801b0391909116815260200190565b61ffff91909116815260200190565b61ffff92909216825260208201526040019056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212206450a3b2f25e4646df1812f17fb029168dd0f81dfe00973993ce5ddb299bc6a164736f6c63430007060033", "bytecodeSha1": "78d6d7ae006e198a6c213d7090cd7cbc8bd17770", "coverageMap": {"statements": {"31": {"InitializeMarketsAction.sweepCashIntoMarkets": {"0": [20405, 20451], "1": [20461, 20535], "2": [20683, 20762], "3": [21043, 21107], "4": [21453, 21612], "5": [21726, 21782], "6": [21792, 21846]}, "InitializeMarketsAction.getLibInfo": {"7": [32771, 32803]}, "InitializeMarketsAction.initializeMarkets": {"8": [22321, 22367], "9": [22578, 22649], "10": [22772, 22849], "11": [23451, 23575], "12": [25486, 25520], "13": [25538, 25842], "14": [25994, 26054], "15": [26546, 26588], "16": [27141, 27302], "17": [28255, 28787], "18": [29981, 30026], "19": [30048, 30142], "20": [30165, 30492], "21": [30515, 30563], "22": [30610, 30704], "23": [30959, 30983], "24": [31002, 31035], "25": [31150, 31189], "26": [31280, 31328], "27": [31342, 31387], "28": [23388, 23391], "29": [31645, 31785], "30": [31795, 31954], "31": [31965, 32008]}, "InitializeMarketsAction._getNTokenNegativefCashWithholding": {"38": [9760, 9809], "39": [9827, 9864], "40": [9882, 9890], "41": [10410, 10424], "42": [10471, 10516], "43": [10553, 10716], "44": [10803, 10852], "45": [10866, 10903], "46": [10924, 11001]}, "InitializeMarketsAction._calculateNetAssetCashAvailable": {"51": [11374, 11442], "52": [11473, 11514], "53": [11528, 11595], "54": [11609, 11784], "55": [11922, 11995], "56": [12050, 12091], "57": [12225, 12356], "58": [12367, 12395]}, "InitializeMarketsAction._getGovernanceParameters": {"59": [2427, 2575], "60": [2586, 2742]}, "InitializeMarketsAction._setLiquidityAmount": {"69": [18659, 18703], "70": [18713, 18757], "71": [18846, 19051], "72": [19127, 19199]}, "InitializeMarketsAction._calculatefCashAmountFromProportion": {"78": [19803, 19920]}, "InitializeMarketsAction._getSixMonthImpliedRate": {"79": [12907, 12966], "80": [12977, 13345]}, "InitializeMarketsAction._interpolateFutureRate": {"81": [17045, 17109], "82": [17327, 17569], "83": [18085, 18131]}, "InitializeMarketsAction._getProportionFromOracleRate": {"84": [14772, 14842], "85": [14881, 14919], "86": [15152, 15226], "87": [15237, 15275]}, "InitializeMarketsAction.finalizeMarket": {"88": [32330, 32394], "89": [32405, 32612]}, "InitializeMarketsAction._settleNTokenPortfolio": {"156": [3721, 3792], "157": [4058, 4132], "158": [4436, 4497], "159": [4591, 4633], "160": [4643, 4693]}, "InitializeMarketsAction._getPreviousMarkets": {"161": [5926, 6341], "162": [5907, 5910]}, "InitializeMarketsAction._withholdAndSetfCashAssets": {"163": [7325, 7379], "164": [7394, 7615], "165": [7694, 7730], "166": [7042, 7045], "167": [7841, 7918]}}, "89": {"ABDKMath64x64.fromInt": {"201": [1305, 1366], "202": [1372, 1395]}, "ABDKMath64x64.div": {"203": [6744, 6760], "204": [6810, 6862]}, "ABDKMath64x64.exp": {"205": [21402, 21436], "206": [21486, 21494], "207": [21514, 21602]}, "ABDKMath64x64.add": {"208": [3472, 3524]}, "ABDKMath64x64.mul": {"209": [4300, 4352]}, "ABDKMath64x64.toInt": {"210": [1674, 1696]}, "ABDKMath64x64.fromUInt": {"349": [1997, 2030]}, "ABDKMath64x64.ln": {"354": [14345, 14360], "355": [14367, 14455]}, "ABDKMath64x64.toUInt": {"356": [2366, 2382], "357": [2388, 2411]}, "ABDKMath64x64.exp_2": {"358": [14701, 14735], "359": [14785, 14793], "360": [14909, 14969], "361": [15013, 15073], "362": [15117, 15177], "363": [15221, 15281], "364": [15324, 15384], "365": [15427, 15487], "366": [15530, 15590], "367": [15633, 15693], "368": [15735, 15795], "369": [15837, 15897], "370": [15939, 15999], "371": [16041, 16101], "372": [16142, 16202], "373": [16243, 16303], "374": [16344, 16404], "375": [16445, 16505], "376": [16545, 16605], "377": [16645, 16705], "378": [16745, 16805], "379": [16845, 16905], "380": [16944, 17004], "381": [17043, 17103], "382": [17142, 17202], "383": [17241, 17301], "384": [17339, 17399], "385": [17437, 17497], "386": [17535, 17595], "387": [17633, 17693], "388": [17730, 17790], "389": [17827, 17887], "390": [17924, 17984], "391": [18021, 18081], "392": [18117, 18177], "393": [18213, 18273], "394": [18309, 18369], "395": [18405, 18465], "396": [18500, 18560], "397": [18595, 18655], "398": [18690, 18750], "399": [18785, 18845], "400": [18879, 18939], "401": [18973, 19033], "402": [19067, 19127], "403": [19161, 19221], "404": [19254, 19314], "405": [19347, 19407], "406": [19440, 19500], "407": [19533, 19593], "408": [19625, 19685], "409": [19717, 19777], "410": [19809, 19869], "411": [19901, 19961], "412": [19992, 20052], "413": [20083, 20143], "414": [20174, 20234], "415": [20265, 20325], "416": [20355, 20415], "417": [20445, 20505], "418": [20535, 20595], "419": [20625, 20685], "420": [20714, 20774], "421": [20803, 20863], "422": [20892, 20952], "423": [20981, 21041], "424": [21048, 21083], "425": [21089, 21128]}, "ABDKMath64x64.neg": {"464": [8660, 8684], "465": [8690, 8699]}, "ABDKMath64x64.log_2": {"510": [13401, 13416], "511": [13495, 13504], "512": [13506, 13515], "513": [13548, 13557], "514": [13559, 13568], "515": [13597, 13606], "516": [13608, 13617], "517": [13644, 13652], "518": [13654, 13662], "519": [13688, 13696], "520": [13698, 13706], "521": [13731, 13739], "522": [13741, 13749], "523": [13772, 13780], "524": [13974, 13982], "525": [14041, 14067], "526": [14019, 14033], "527": [13955, 13964], "528": [14080, 14102]}, "ABDKMath64x64.sub": {"557": [3876, 3928]}}, "68": {}, "63": {}, "64": {}, "86": {"AssetHandler.getPresentfCashValue": {"142": [2765, 2773], "143": [3064, 3115], "144": [3175, 3225]}, "AssetHandler.getDiscountFactor": {"296": [2160, 2230], "297": [2240, 2297], "298": [2307, 2377]}, "AssetHandler.isLiquidityToken": {"345": [665, 796]}, "AssetHandler.getSettlementDate": {"449": [1070, 1156], "450": [1331, 1352], "451": [1655, 1717]}}, "74": {"AssetRate.buildAssetRateStateful": {"268": [6164, 6413]}, "AssetRate.getSupplyRate": {"295": [2515, 2523]}, "AssetRate._getAssetRateStateful": {"456": [4993, 5020], "457": [5051, 5094], "458": [5108, 5125], "459": [5176, 5226]}, "AssetRate.buildSettlementRateStateful": {"472": [8685, 8836], "473": [9325, 9405], "474": [9466, 9532], "475": [9673, 9714], "476": [9732, 9784], "477": [9802, 9863], "478": [9881, 9950], "479": [9985, 10190]}, "AssetRate._getAssetRateStorage": {"551": [3154, 3198], "552": [3208, 3260]}, "AssetRate._getSettlementRateStorage": {"553": [6896, 6939], "554": [6949, 7010]}}, "152": {}, "65": {"BalanceHandler.setBalanceStorageForNToken": {"49": [17704, 17729], "50": [17775, 17842]}, "BalanceHandler._setBalanceStorage": {"146": [19640, 19713], "147": [19844, 19908], "148": [20037, 20064], "149": [20271, 20323], "150": [20378, 20430], "151": [20559, 20637], "152": [20440, 20492], "153": [20502, 20549]}, "BalanceHandler.getBalanceStorage": {"263": [21209, 21253], "264": [21263, 21307], "265": [21447, 21551], "266": [21582, 21652], "267": [21672, 21712]}}, "90": {"Bitmap.getNextBitNum": {"115": [3378, 3386], "116": [3397, 3437]}, "Bitmap.setBit": {"132": [447, 482], "133": [547, 593], "134": [624, 671]}, "Bitmap.getMSB": {"270": [2272, 2287], "271": [2384, 2393], "272": [2407, 2417], "273": [2481, 2489], "274": [2503, 2512], "275": [2568, 2576], "276": [2590, 2599], "277": [2651, 2659], "278": [2673, 2682], "279": [2732, 2739], "280": [2753, 2761], "281": [2810, 2817], "282": [2831, 2839], "283": [2887, 2894], "284": [2908, 2916], "285": [2950, 2958]}, "Bitmap.isBitSet": {"445": [820, 855], "446": [894, 959]}, "Bitmap.totalBitsSet": {"529": [1130, 1286], "530": [1296, 1452], "531": [1462, 1549], "532": [1559, 1715], "533": [1725, 1742], "534": [1752, 1769], "535": [1779, 1797], "536": [1807, 1844]}}, "81": {"BitmapAssetsHandler.getAssetsBitmap": {"114": [882, 915]}, "BitmapAssetsHandler.getifCashNotional": {"135": [1629, 1681]}, "BitmapAssetsHandler.addifCashAsset": {"214": [3613, 3629], "215": [3871, 3950], "216": [3997, 4039], "217": [4161, 4210], "218": [4239, 4289], "219": [4303, 4323], "220": [4475, 4544], "221": [4591, 4628], "222": [4643, 4691], "223": [4705, 4755], "224": [4776, 4791]}, "BitmapAssetsHandler.setAssetsBitmap": {"447": [1061, 1147], "448": [1266, 1307]}}, "148": {}, "149": {}, "150": {}, "75": {"CashGroup.getRateScalar": {"75": [2832, 2900], "76": [3350, 3373], "77": [3413, 3430]}, "CashGroup.buildCashGroupStateful": {"113": [17869, 17914]}, "CashGroup.calculateOracleRate": {"136": [9957, 10039], "137": [10658, 10683], "138": [10701, 10748], "139": [10846, 10922], "140": [10941, 11131], "141": [11160, 11248]}, "CashGroup.interpolateOracleRate": {"192": [8128, 8166], "193": [8231, 8268], "194": [8540, 8784], "195": [9127, 9463]}, "CashGroup._buildCashGroup": {"269": [16991, 17199]}, "CashGroup.getRateOracleTimeWindow": {"292": [5713, 5811]}, "CashGroup._getCashGroupStorageBytes": {"460": [11458, 11482]}}, "69": {}, "58": {}, "76": {"DateTime.getReferenceTime": {"34": [417, 456], "35": [466, 516]}, "DateTime.getTradedMarket": {"61": [1026, 1050], "62": [1076, 1104], "63": [1130, 1151], "64": [1177, 1202], "65": [1228, 1253], "66": [1279, 1305], "67": [1331, 1357], "68": [1368, 1391]}, "DateTime.getMaturityFromBitNum": {"117": [7014, 7034], "118": [7097, 7119], "119": [7321, 7366], "120": [7675, 7746], "121": [7439, 7661], "122": [7987, 8060], "123": [7821, 7973], "124": [8260, 8337], "125": [8091, 8246]}, "DateTime.isValidMarketMaturity": {"126": [1657, 1709], "127": [1719, 1805], "128": [1855, 1867], "129": [2054, 2065], "130": [1980, 1983], "131": [2086, 2098]}, "DateTime.getTimeUTC0": {"154": [660, 690], "155": [700, 736]}, "DateTime.getMarketIndex": {"286": [3147, 3199], "287": [3209, 3295], "288": [3594, 3611], "289": [3736, 3752], "290": [3408, 3411], "291": [3773, 3802]}, "DateTime.getBitNumFromMaturity": {"438": [4314, 4331], "439": [4414, 4431], "440": [4734, 4759], "441": [5306, 5641], "442": [5922, 6091], "443": [6377, 6552], "444": [6698, 6717]}}, "59": {}, "91": {"FloatingPoint56.unpackFrom56Bits": {"455": [1385, 1418]}}, "70": {}, "138": {}, "144": {}, "154": {}, "66": {}, "60": {"LibStorage._getStorageSlot": {"452": [8405, 8450]}}, "77": {"Market.getExchangeRateFromImpliedRate": {"188": [18502, 18545]}, "Market.getImpliedRate": {"189": [16789, 16797], "190": [17770, 17778], "191": [17789, 17807]}, "Market.setMarketStorageForInitialize": {"211": [28364, 28589], "212": [28600, 28656]}, "Market.getOracleRate": {"293": [25391, 25440], "294": [25451, 25662]}, "Market.loadMarketWithSettlementDate": {"327": [31309, 31389], "328": [31400, 31609]}, "Market._getExchangeRate": {"350": [20127, 20144], "351": [20243, 20260], "352": [20512, 20529], "353": [20560, 20579]}, "Market._setMarketStorage": {"426": [29237, 29295], "427": [29341, 29407], "428": [29457, 29524], "429": [29575, 29632], "430": [29678, 29750], "431": [29806, 29851], "432": [29861, 29914], "433": [29924, 29979], "434": [29989, 30034], "435": [30044, 30103]}, "Market._setTotalLiquidity": {"436": [28798, 28864], "437": [28921, 28974]}, "Market._updateRateOracle": {"461": [23292, 23325], "462": [23503, 23525], "463": [23719, 23741]}, "Market.loadSettlementMarket": {"480": [31808, 31878]}, "Market.removeLiquidity": {"481": [2222, 2235], "482": [2245, 2272], "483": [2317, 2397], "484": [2407, 2479], "485": [2490, 2560], "486": [2570, 2623], "487": [2633, 2698], "488": [2709, 2746]}, "Market._loadMarketStorage": {"497": [26478, 26503], "498": [26513, 26539], "499": [26549, 26593], "500": [26603, 26655], "501": [26665, 26719], "502": [26729, 26773], "503": [26783, 26841], "504": [26886, 26938], "505": [26969, 26994]}, "Market._logProportion": {"507": [21047, 21064], "508": [21681, 21698], "509": [22064, 22085]}, "Market._setMarketStorageForLiquidity": {"555": [27563, 27787], "556": [27798, 27854]}}, "21": {}, "82": {"PortfolioHandler.storeAssets": {"90": [7449, 7512], "91": [7676, 7706], "92": [7217, 7220], "93": [8573, 8605], "94": [8782, 9017], "95": [7885, 7888], "96": [9552, 9560], "97": [9574, 9733], "98": [9785, 10000], "99": [10015, 10067], "100": [10081, 10104], "101": [9437, 9440], "102": [10265, 10336], "103": [10386, 10538]}, "PortfolioHandler.addAsset": {"175": [3389, 3396], "176": [3685, 3692], "177": [3922, 3944], "178": [4023, 4090], "179": [4287, 4360], "180": [4742, 4774], "181": [4784, 4812], "182": [4822, 4852], "183": [4862, 4890], "184": [4900, 4950], "185": [4960, 4997]}, "PortfolioHandler.deleteAsset": {"225": [12749, 12800], "226": [12839, 12884], "227": [13013, 13176], "228": [13215, 13252], "229": [13737, 13766], "230": [13784, 13806], "231": [13549, 13552], "232": [13993, 14046], "233": [14060, 14067], "234": [14383, 14558], "235": [14568, 14619], "236": [14629, 14682]}, "PortfolioHandler._storeAsset": {"237": [11689, 11766], "238": [11818, 11883], "239": [11932, 12018], "240": [12062, 12141], "241": [12191, 12241], "242": [12251, 12297], "243": [12307, 12354], "244": [12364, 12409]}, "PortfolioHandler._updatePortfolioContext": {"245": [11121, 11152], "246": [11172, 11211], "247": [11222, 11278], "248": [11333, 11431], "249": [11442, 11501]}, "PortfolioHandler.buildPortfolioState": {"259": [15643, 15655], "260": [15666, 15732], "261": [15742, 15784], "262": [15794, 15847]}, "PortfolioHandler._mergeAssetIntoArray": {"336": [1631, 1639], "337": [1790, 1949], "338": [2195, 2220], "339": [2308, 2381], "340": [2440, 2468], "341": [2482, 2527], "342": [2542, 2553], "343": [1395, 1398], "344": [2574, 2586]}, "PortfolioHandler._extendNewAssetArray": {"346": [5714, 5745], "347": [5695, 5698], "348": [5766, 5786]}, "PortfolioHandler.getSortedPortfolio": {"453": [15064, 15077], "454": [15088, 15108]}, "PortfolioHandler._loadAssetArray": {"537": [16909, 16948], "538": [17546, 17588], "539": [17602, 17640], "540": [17654, 17694], "541": [17708, 17746], "542": [17760, 17784], "543": [17294, 17297], "544": [17805, 17818]}, "PortfolioHandler._sortInPlace": {"545": [16212, 16300], "546": [16082, 16085], "547": [16527, 16570], "548": [16588, 16643], "549": [16661, 16664], "550": [16692, 16695]}}, "92": {"SafeInt256.subNoNeg": {"47": [1854, 1867], "48": [1877, 1892]}, "SafeInt256.sub": {"145": [1377, 1414]}, "SafeInt256.mul": {"170": [474, 483], "171": [506, 536], "172": [551, 581]}, "SafeInt256.div": {"173": [1098, 1137], "174": [1245, 1254]}, "SafeInt256.toInt": {"186": [2587, 2627], "187": [2660, 2676]}, "SafeInt256.mulInRatePrecision": {"200": [2337, 2384]}, "SafeInt256.neg": {"213": [1619, 1636]}, "SafeInt256.add": {"315": [1503, 1540]}, "SafeInt256.divInRatePrecision": {"506": [2116, 2163]}}, "6": {"SafeMath.add": {"36": [2786, 2832], "37": [2842, 2850]}, "SafeMath.sub": {"73": [3205, 3254], "74": [3264, 3276]}, "SafeMath.mul": {"196": [3619, 3627], "197": [3664, 3720]}, "SafeMath.div": {"198": [4286, 4330], "199": [4340, 4352]}}, "84": {"SettleBitmapAssets.settleBitmappedCashGroup": {"316": [1906, 1953], "317": [2035, 2074], "318": [2437, 2475], "319": [2756, 2882], "320": [2952, 2993], "321": [3007, 3042], "322": [3323, 3339], "323": [3382, 3427], "324": [3498, 3539], "325": [3553, 3588], "326": [3609, 3676]}, "SettleBitmapAssets._settlefCashAsset": {"495": [4477, 4525], "496": [4536, 4579]}}, "85": {"SettlePortfolioAssets.settlePortfolio": {"299": [2530, 2550], "300": [2889, 2897], "301": [3116, 3138], "302": [3156, 3218], "303": [3434, 3611], "304": [3630, 3694], "305": [3712, 3741], "306": [3832, 3913], "307": [3961, 4020], "308": [4229, 4283], "309": [4422, 4615], "310": [4714, 4784], "311": [4806, 4835], "312": [4881, 5025], "313": [2652, 2655], "314": [5046, 5066]}, "SettlePortfolioAssets._getSettleAmountArray": {"466": [953, 981], "467": [1490, 1498], "468": [1719, 1752], "469": [1770, 1789], "470": [2030, 2074], "471": [2084, 2104]}, "SettlePortfolioAssets._settleLiquidityTokenTofCash": {"489": [6188, 6240], "490": [6258, 6308], "491": [6326, 6359], "492": [6476, 6529], "493": [6539, 6570], "494": [6580, 6634]}}, "67": {}, "83": {"TransferAssets.encodeAssetId": {"558": [966, 1013], "559": [1023, 1060], "560": [1070, 1127], "561": [1138, 1361]}}, "78": {}, "79": {"nTokenHandler.loadNTokenPortfolioStateful": {"32": [12487, 12537], "33": [12547, 12610]}, "nTokenHandler.setArrayLengthAndInitializedTime": {"104": [5749, 5833], "105": [6034, 6091], "106": [6101, 6139]}, "nTokenHandler.loadNTokenPortfolioNoCashGroup": {"107": [11213, 11260], "108": [11758, 11806], "109": [11816, 11856], "110": [11866, 11896], "111": [11907, 12055], "112": [12093, 12312]}, "nTokenHandler.getDepositParameters": {"168": [6647, 6741]}, "nTokenHandler.getInitializationParameters": {"169": [9897, 9988]}, "nTokenHandler.nTokenAddress": {"250": [1729, 1753]}, "nTokenHandler.getNTokenContext": {"251": [1193, 1224], "252": [1234, 1299], "253": [1309, 1358], "254": [1368, 1411], "255": [1421, 1458]}, "nTokenHandler._getParameters": {"329": [10415, 10438], "330": [10452, 10459], "331": [10473, 10496], "332": [10510, 10517], "333": [10563, 10625], "334": [10396, 10399], "335": [10660, 10683]}}, "37": {}, "80": {"nTokenSupply.getStoredNTokenSupplyFactors": {"256": [966, 1005], "257": [1218, 1283], "258": [1293, 1348]}}}, "branches": {"31": {"InitializeMarketsAction.sweepCashIntoMarkets": {"562": [20691, 20734, true], "563": [21051, 21079, true]}, "InitializeMarketsAction.initializeMarkets": {"564": [22745, 22756, false], "565": [22780, 22826, true], "566": [24626, 24637, true], "567": [24748, 24754, false], "568": [24758, 24785, true], "569": [25072, 25078, false], "570": [25082, 25116, false], "571": [26337, 26343, false], "572": [26617, 26623, false], "573": [29912, 29957, false], "574": [30523, 30538, true], "575": [30933, 30957, false]}, "InitializeMarketsAction._getNTokenNegativefCashWithholding": {"576": [8914, 8941, true], "577": [9456, 9483, false], "578": [9503, 9665, false], "579": [10214, 10226, false], "580": [10357, 10386, false]}, "InitializeMarketsAction._calculateNetAssetCashAvailable": {"581": [11347, 11358, false], "582": [12246, 12309, true]}, "InitializeMarketsAction._getSixMonthImpliedRate": {"583": [12915, 12942, true]}, "InitializeMarketsAction._interpolateFutureRate": {"584": [17053, 17081, true], "585": [17290, 17311, false], "586": [18092, 18108, true]}, "InitializeMarketsAction._settleNTokenPortfolio": {"587": [3729, 3771, true], "588": [4599, 4632, true]}, "InitializeMarketsAction._withholdAndSetfCashAssets": {"589": [7333, 7378, true]}}, "89": {"ABDKMath64x64.fromInt": {"590": [1314, 1338, false], "591": [1342, 1365, true]}, "ABDKMath64x64.div": {"592": [6753, 6759, true], "593": [6819, 6838, false], "594": [6842, 6861, true]}, "ABDKMath64x64.exp": {"595": [21411, 21435, true], "596": [21459, 21484, false]}, "ABDKMath64x64.add": {"597": [3481, 3500, false], "598": [3504, 3523, true]}, "ABDKMath64x64.mul": {"599": [4309, 4328, false], "600": [4332, 4351, true]}, "ABDKMath64x64.fromUInt": {"601": [2006, 2029, true]}, "ABDKMath64x64.ln": {"602": [14354, 14359, true]}, "ABDKMath64x64.toUInt": {"603": [2375, 2381, true]}, "ABDKMath64x64.exp_2": {"604": [14710, 14734, true], "605": [14758, 14783, false], "606": [14875, 14901, false], "607": [14979, 15005, false], "608": [15083, 15109, false], "609": [15187, 15213, false], "610": [15291, 15316, false], "611": [15394, 15419, false], "612": [15497, 15522, false], "613": [15600, 15625, false], "614": [15703, 15727, false], "615": [15805, 15829, false], "616": [15907, 15931, false], "617": [16009, 16033, false], "618": [16111, 16134, false], "619": [16212, 16235, false], "620": [16313, 16336, false], "621": [16414, 16437, false], "622": [16515, 16537, false], "623": [16615, 16637, false], "624": [16715, 16737, false], "625": [16815, 16837, false], "626": [16915, 16936, false], "627": [17014, 17035, false], "628": [17113, 17134, false], "629": [17212, 17233, false], "630": [17311, 17331, false], "631": [17409, 17429, false], "632": [17507, 17527, false], "633": [17605, 17625, false], "634": [17703, 17722, false], "635": [17800, 17819, false], "636": [17897, 17916, false], "637": [17994, 18013, false], "638": [18091, 18109, false], "639": [18187, 18205, false], "640": [18283, 18301, false], "641": [18379, 18397, false], "642": [18475, 18492, false], "643": [18570, 18587, false], "644": [18665, 18682, false], "645": [18760, 18777, false], "646": [18855, 18871, false], "647": [18949, 18965, false], "648": [19043, 19059, false], "649": [19137, 19153, false], "650": [19231, 19246, false], "651": [19324, 19339, false], "652": [19417, 19432, false], "653": [19510, 19525, false], "654": [19603, 19617, false], "655": [19695, 19709, false], "656": [19787, 19801, false], "657": [19879, 19893, false], "658": [19971, 19984, false], "659": [20062, 20075, false], "660": [20153, 20166, false], "661": [20244, 20257, false], "662": [20335, 20347, false], "663": [20425, 20437, false], "664": [20515, 20527, false], "665": [20605, 20617, false], "666": [20695, 20706, false], "667": [20784, 20795, false], "668": [20873, 20884, false], "669": [20962, 20973, false], "670": [21098, 21127, true]}, "ABDKMath64x64.neg": {"671": [8669, 8683, true]}, "ABDKMath64x64.log_2": {"672": [13410, 13415, true], "673": [13466, 13491, false], "674": [13527, 13544, false], "675": [13580, 13593, false], "676": [13629, 13640, false], "677": [13674, 13684, false], "678": [13718, 13727, false], "679": [13761, 13770, false]}, "ABDKMath64x64.sub": {"680": [3885, 3904, false], "681": [3908, 3927, true]}}, "68": {}, "63": {}, "64": {}, "86": {"AssetHandler.getPresentfCashValue": {"682": [2750, 2763, false], "683": [3072, 3114, true]}, "AssetHandler.getSettlementDate": {"684": [1078, 1097, false], "685": [1101, 1155, true]}}, "74": {"AssetRate.getSupplyRate": {"686": [2477, 2513, false]}, "AssetRate._getAssetRateStateful": {"687": [4732, 4765, false], "688": [5116, 5124, true]}, "AssetRate.buildSettlementRateStateful": {"689": [8417, 8436, false], "690": [8855, 8888, false], "691": [9333, 9346, false], "692": [9350, 9371, false], "693": [9375, 9404, true], "694": [9474, 9492, false], "695": [9496, 9531, true]}}, "152": {}, "65": {"BalanceHandler.setBalanceStorageForNToken": {"696": [17712, 17728, true]}, "BalanceHandler._setBalanceStorage": {"697": [19648, 19678, false], "698": [19682, 19712, true], "699": [19852, 19870, false], "700": [19874, 19907, true], "701": [20045, 20063, true], "702": [20279, 20322, true]}, "BalanceHandler.getBalanceStorage": {"703": [21321, 21338, false]}}, "90": {"Bitmap.getNextBitNum": {"704": [3362, 3376, false]}, "Bitmap.setBit": {"705": [455, 465, false], "706": [469, 481, true], "707": [526, 531, false]}, "Bitmap.getMSB": {"708": [2280, 2286, true], "709": [2328, 2368, false], "710": [2441, 2465, false], "711": [2536, 2552, false], "712": [2623, 2635, false], "713": [2706, 2716, false], "714": [2785, 2794, false], "715": [2863, 2871, false], "716": [2940, 2948, false]}, "Bitmap.isBitSet": {"717": [828, 838, false], "718": [842, 854, true]}}, "81": {"BitmapAssetsHandler.addifCashAsset": {"719": [3621, 3628, true], "720": [3689, 3718, false], "721": [3879, 3912, false], "722": [3916, 3949, true], "723": [4348, 4361, false], "724": [4483, 4511, false], "725": [4515, 4543, true]}, "BitmapAssetsHandler.setAssetsBitmap": {"726": [1069, 1127, true]}}, "148": {}, "149": {}, "150": {}, "75": {"CashGroup.getRateScalar": {"727": [2840, 2856, false], "728": [2860, 2899, true], "729": [3358, 3372, true]}, "CashGroup.calculateOracleRate": {"730": [9928, 9941, false], "731": [10537, 10553, false]}, "CashGroup.interpolateOracleRate": {"732": [8136, 8165, true], "733": [8239, 8267, true], "734": [8503, 8524, false]}}, "69": {}, "58": {}, "76": {"DateTime.getReferenceTime": {"735": [425, 455, true]}, "DateTime.getTradedMarket": {"736": [1014, 1024, false], "737": [1064, 1074, false], "738": [1118, 1128, false], "739": [1165, 1175, false], "740": [1216, 1226, false], "741": [1267, 1277, false], "742": [1319, 1329, false]}, "DateTime.getMaturityFromBitNum": {"743": [7022, 7033, true], "744": [7105, 7118, true], "745": [7270, 7305, false], "746": [7387, 7423, false], "747": [7767, 7805, false]}, "DateTime.isValidMarketMaturity": {"748": [1665, 1683, true], "749": [1727, 1778, true], "750": [1820, 1853, false], "751": [2003, 2052, false]}, "DateTime.getTimeUTC0": {"752": [668, 689, true]}, "DateTime.getMarketIndex": {"753": [3155, 3173, true], "754": [3217, 3268, true], "755": [3566, 3592, false], "756": [3709, 3734, false]}, "DateTime.getBitNumFromMaturity": {"757": [4283, 4312, false], "758": [4387, 4412, false], "759": [4680, 4718, false], "760": [4780, 4819, false], "761": [5662, 5702, false], "762": [6112, 6154, false]}}, "59": {}, "91": {}, "70": {}, "138": {}, "144": {}, "154": {}, "66": {}, "60": {}, "77": {"Market.getImpliedRate": {"763": [16780, 16787, false], "764": [17738, 17768, false]}, "Market.getOracleRate": {"765": [25399, 25413, true]}, "Market._getExchangeRate": {"766": [20081, 20125, false], "767": [20234, 20241, false], "768": [20465, 20496, false]}, "Market._setMarketStorage": {"769": [29245, 29260, false], "770": [29264, 29294, true], "771": [29349, 29368, false], "772": [29372, 29406, true], "773": [29465, 29484, false], "774": [29488, 29523, true], "775": [29583, 29597, false], "776": [29601, 29631, true], "777": [29712, 29749, true]}, "Market._setTotalLiquidity": {"778": [28806, 28825, false], "779": [28829, 28863, true]}, "Market._updateRateOracle": {"780": [23300, 23324, true], "781": [23472, 23501, false], "782": [23601, 23632, false]}, "Market.removeLiquidity": {"783": [2201, 2220, false], "784": [2253, 2271, true]}, "Market._logProportion": {"785": [21007, 21045, false], "786": [21660, 21679, false]}}, "21": {}, "82": {"PortfolioHandler.storeAssets": {"787": [7457, 7511, true], "788": [7587, 7633, false], "789": [7637, 7656, false], "790": [7983, 8029, false], "791": [8267, 8313, false], "792": [9531, 9550, false], "793": [9599, 9645, false], "794": [9665, 9719, true], "795": [10273, 10297, false], "796": [10301, 10335, true]}, "PortfolioHandler.addAsset": {"797": [3192, 3378, false], "798": [3410, 3446, false], "799": [3677, 3683, false], "800": [3866, 3906, false], "801": [3930, 3943, true], "802": [4031, 4058, false], "803": [4062, 4089, true], "804": [4204, 4271, false]}, "PortfolioHandler.deleteAsset": {"805": [12757, 12799, true], "806": [12847, 12883, true], "807": [13034, 13088, false], "808": [13104, 13166, true], "809": [13642, 13671, false], "810": [13675, 13717, false], "811": [13845, 13872, false]}, "PortfolioHandler._storeAsset": {"812": [11697, 11717, false], "813": [11721, 11765, true], "814": [11826, 11844, false], "815": [11848, 11882, true], "816": [11940, 11959, false], "817": [11963, 12017, true], "818": [12070, 12103, false], "819": [12107, 12140, true]}, "PortfolioHandler._updatePortfolioContext": {"820": [11051, 11070, true], "821": [11074, 11105, false], "822": [11230, 11277, true]}, "PortfolioHandler.buildPortfolioState": {"823": [15620, 15641, false]}, "PortfolioHandler._mergeAssetIntoArray": {"824": [1492, 1520, true], "825": [1540, 1570, true], "826": [1590, 1616, false], "827": [1815, 1861, false], "828": [1881, 1935, true], "829": [2135, 2175, false], "830": [2203, 2219, true], "831": [2316, 2346, false], "832": [2350, 2380, true]}, "PortfolioHandler._extendNewAssetArray": {"833": [5514, 5535, true]}, "PortfolioHandler.getSortedPortfolio": {"834": [15044, 15062, false]}, "PortfolioHandler._loadAssetArray": {"835": [16917, 16947, true]}}, "92": {"SafeInt256.subNoNeg": {"836": [1885, 1891, true]}, "SafeInt256.sub": {"837": [1385, 1413, true]}, "SafeInt256.mul": {"838": [497, 504, false], "839": [515, 521, true], "840": [525, 535, true], "841": [560, 566, true], "842": [570, 580, true]}, "SafeInt256.div": {"843": [1108, 1115, false], "844": [1119, 1135, true]}, "SafeInt256.toInt": {"845": [2596, 2626, true]}, "SafeInt256.add": {"846": [1511, 1539, true]}}, "6": {"SafeMath.add": {"847": [2794, 2800, true]}, "SafeMath.sub": {"848": [3213, 3219, true]}, "SafeMath.mul": {"849": [3611, 3617, false], "850": [3672, 3682, true]}, "SafeMath.div": {"851": [4294, 4299, true]}}, "84": {"SettleBitmapAssets.settleBitmappedCashGroup": {"852": [2043, 2073, true], "853": [2417, 2435, false], "854": [3331, 3338, true]}}, "85": {"SettlePortfolioAssets.settlePortfolio": {"855": [2865, 2887, false], "856": [2984, 3047, false], "857": [3281, 3326, false], "858": [3766, 3812, false], "859": [4098, 4124, false]}, "SettlePortfolioAssets._getSettleAmountArray": {"860": [1451, 1488, false], "861": [1665, 1699, false], "862": [2007, 2028, false]}, "SettlePortfolioAssets._settleLiquidityTokenTofCash": {"863": [5609, 5619, false], "864": [5889, 5939, false], "865": [5959, 6005, false], "866": [6025, 6075, false]}}, "67": {}, "83": {"TransferAssets.encodeAssetId": {"867": [974, 1012, true], "868": [1031, 1059, true], "869": [1078, 1126, true]}}, "78": {}, "79": {"nTokenHandler.setArrayLengthAndInitializedTime": {"870": [5785, 5832, true]}, "nTokenHandler._getParameters": {"871": [10571, 10584, false], "872": [10588, 10601, true]}}, "37": {}, "80": {}}}, "dependencies": ["ABDKMath64x64", "AaveHandler", "AccountContextHandler", "AssetHandler", "AssetRate", "AssetRateAdapter", "BalanceHandler", "Bitmap", "BitmapAssetsHandler", "CErc20Interface", "CEtherInterface", "CTokenInterface", "CashGroup", "CompoundHandler", "Constants", "DateTime", "Deployments", "FloatingPoint56", "GenericToken", "IEIP20NonStandard", "ILendingPool", "IRewarder", "Incentives", "LibStorage", "Market", "MigrateIncentives", "PortfolioHandler", "SafeInt256", "OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/SafeMath", "SettleBitmapAssets", "SettlePortfolioAssets", "TokenHandler", "TransferAssets", "nTokenCalculations", "nTokenHandler", "nTokenMintAction", "nTokenSupply"], "offset": [1461, 32812], "type": "library", "abi": [{"anonymous": false, "inputs": [{"indexed": false, "internalType": "uint16", "name": "currencyId", "type": "uint16"}], "name": "MarketsInitialized", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "uint16", "name": "currencyId", "type": "uint16"}, {"indexed": false, "internalType": "int256", "name": "cashIntoMarkets", "type": "int256"}], "name": "SweepCashIntoMarkets", "type": "event"}, {"inputs": [], "name": "getLibInfo", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}], "ast": {"absolutePath": "contracts/external/actions/InitializeMarketsAction.sol", "exportedSymbols": {"ABDKMath64x64": [43822], "AaveHandler": [26065], "AccountBalance": [56783], "AccountContext": [56702], "AccountContextHandler": [23459], "AggregatorInterface": [61634], "AggregatorV2V3Interface": [58280], "AggregatorV3Interface": [61680], "AssetHandler": [39459], "AssetRate": [30073], "AssetRateAdapter": [58324], "AssetRateParameters": [56598], "AssetRateStorage": [56666], "AssetStorageState": [56467], "BalanceAction": [56480], "BalanceActionWithTrades": [56496], "BalanceHandler": [24802], "BalanceState": [56591], "BalanceStorage": [56726], "Bitmap": [44163], "BitmapAssetsHandler": [36492], "CErc20Interface": [58737], "CEtherInterface": [59010], "CTokenInterface": [59004], "CashGroup": [31352], "CashGroupParameters": [56607], "CashGroupSettings": [56691], "CompoundHandler": [26257], "Constants": [22246], "Context": [61703], "DateTime": [31991], "Deployments": [22260], "DepositActionType": [56462], "ERC20": [60002], "ETHRate": [56572], "ETHRateStorage": [56661], "FloatingPoint56": [44239], "GenericToken": [26389], "IAToken": [60024], "IATokenFull": [60059], "IEIP20NonStandard": [61125], "IERC20": [58871], "ILendingPool": [60138], "IRewarder": [58338], "IScaledBalanceToken": [60049], "Incentives": [24987], "InitializeMarketsAction": [8074], "LibStorage": [22642], "LiquidationFactors": [56550], "Market": [33905], "MarketParameters": [56637], "MarketStorage": [56746], "MigrateIncentives": [316], "PortfolioAsset": [56620], "PortfolioAssetStorage": [56758], "PortfolioHandler": [37782], "PortfolioState": [56561], "SafeInt256": [44554], "SafeMath": [55990], "SettleAmount": [56501], "SettleBitmapAssets": [38260], "SettlePortfolioAssets": [38685], "SettlementRateStorage": [56733], "Token": [56512], "TokenHandler": [25826], "TokenStorage": [56648], "TokenType": [56447], "TradeActionType": [56454], "TransferAssets": [38011], "ifCashStorage": [56749], "nTokenCalculations": [34475], "nTokenContext": [56717], "nTokenHandler": [35501], "nTokenMintAction": [12297], "nTokenPortfolio": [56527], "nTokenSupply": [35803], "nTokenTotalSupplyStorage": [56772], "nTokenTotalSupplyStorage_deprecated": [56765]}, "id": 8075, "license": "GPL-3.0-only", "nodeType": "SourceUnit", "nodes": [{"id": 6530, "literals": ["solidity", "^", "0.7", ".0"], "nodeType": "PragmaDirective", "src": "41:23:31"}, {"id": 6531, "literals": ["abicoder", "v2"], "nodeType": "PragmaDirective", "src": "65:19:31"}, {"absolutePath": "contracts/external/actions/nTokenMintAction.sol", "file": "./nTokenMintAction.sol", "id": 6532, "nodeType": "ImportDirective", "scope": 8075, "sourceUnit": 12298, "src": "86:32:31", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/Market.sol", "file": "../../internal/markets/Market.sol", "id": 6533, "nodeType": "ImportDirective", "scope": 8075, "sourceUnit": 33906, "src": "119:43:31", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/CashGroup.sol", "file": "../../internal/markets/CashGroup.sol", "id": 6534, "nodeType": "ImportDirective", "scope": 8075, "sourceUnit": 31353, "src": "163:46:31", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/AssetRate.sol", "file": "../../internal/markets/AssetRate.sol", "id": 6535, "nodeType": "ImportDirective", "scope": 8075, "sourceUnit": 30074, "src": "210:46:31", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/balances/BalanceHandler.sol", "file": "../../internal/balances/BalanceHandler.sol", "id": 6536, "nodeType": "ImportDirective", "scope": 8075, "sourceUnit": 24803, "src": "257:52:31", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/portfolio/PortfolioHandler.sol", "file": "../../internal/portfolio/PortfolioHandler.sol", "id": 6537, "nodeType": "ImportDirective", "scope": 8075, "sourceUnit": 37783, "src": "310:55:31", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/settlement/SettlePortfolioAssets.sol", "file": "../../internal/settlement/SettlePortfolioAssets.sol", "id": 6538, "nodeType": "ImportDirective", "scope": 8075, "sourceUnit": 38686, "src": "366:61:31", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/settlement/SettleBitmapAssets.sol", "file": "../../internal/settlement/SettleBitmapAssets.sol", "id": 6539, "nodeType": "ImportDirective", "scope": 8075, "sourceUnit": 38261, "src": "428:58:31", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/nToken/nTokenHandler.sol", "file": "../../internal/nToken/nTokenHandler.sol", "id": 6540, "nodeType": "ImportDirective", "scope": 8075, "sourceUnit": 35502, "src": "487:49:31", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/math/SafeInt256.sol", "file": "../../math/SafeInt256.sol", "id": 6541, "nodeType": "ImportDirective", "scope": 8075, "sourceUnit": 44555, "src": "537:35:31", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/math/Bitmap.sol", "file": "../../math/Bitmap.sol", "id": 6542, "nodeType": "ImportDirective", "scope": 8075, "sourceUnit": 44164, "src": "573:31:31", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "C:/Users/weiti/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/contracts/math/SafeMath.sol", "file": "@openzeppelin/contracts/math/SafeMath.sol", "id": 6543, "nodeType": "ImportDirective", "scope": 8075, "sourceUnit": 55991, "src": "605:51:31", "symbolAliases": [], "unitAlias": ""}, {"abstract": false, "baseContracts": [], "contractDependencies": [], "contractKind": "library", "documentation": {"id": 6544, "nodeType": "StructuredDocumentation", "src": "658:803:31", "text": "@notice Initialize markets is called once every quarter to setup the new markets. Only the nToken account\n can initialize markets, and this method will be called on behalf of that account. In this action\n the following will occur:\n  - nToken Liquidity Tokens will be settled\n  - Any ifCash assets will be settled\n  - If nToken liquidity tokens are settled with negative net ifCash, enough cash will be withheld at the PV\n    to purchase offsetting positions\n  - fCash positions are written to storage\n  - For each market, calculate the proportion of fCash to cash given:\n     - previous oracle rates\n     - rate anchor set by governance\n     - percent of cash to deposit into the market set by governance\n  - Set new markets and add liquidity tokens to portfolio"}, "fullyImplemented": true, "id": 8074, "linearizedBaseContracts": [8074], "name": "InitializeMarketsAction", "nodeType": "ContractDefinition", "nodes": [{"id": 6547, "libraryName": {"id": 6545, "name": "Bitmap", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 44163, "src": "1505:6:31", "typeDescriptions": {"typeIdentifier": "t_contract$_Bitmap_$44163", "typeString": "library Bitmap"}}, "nodeType": "UsingForDirective", "src": "1499:25:31", "typeName": {"id": 6546, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "1516:7:31", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}}, {"id": 6550, "libraryName": {"id": 6548, "name": "SafeMath", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 55990, "src": "1535:8:31", "typeDescriptions": {"typeIdentifier": "t_contract$_SafeMath_$55990", "typeString": "library SafeMath"}}, "nodeType": "UsingForDirective", "src": "1529:27:31", "typeName": {"id": 6549, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "1548:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}}, {"id": 6553, "libraryName": {"id": 6551, "name": "SafeInt256", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 44554, "src": "1567:10:31", "typeDescriptions": {"typeIdentifier": "t_contract$_SafeInt256_$44554", "typeString": "library SafeInt256"}}, "nodeType": "UsingForDirective", "src": "1561:28:31", "typeName": {"id": 6552, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1582:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}}, {"id": 6556, "libraryName": {"id": 6554, "name": "PortfolioHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 37782, "src": "1600:16:31", "typeDescriptions": {"typeIdentifier": "t_contract$_PortfolioHandler_$37782", "typeString": "library PortfolioHandler"}}, "nodeType": "UsingForDirective", "src": "1594:42:31", "typeName": {"id": 6555, "name": "PortfolioState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56561, "src": "1621:14:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$56561_storage_ptr", "typeString": "struct PortfolioState"}}}, {"id": 6559, "libraryName": {"id": 6557, "name": "Market", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 33905, "src": "1647:6:31", "typeDescriptions": {"typeIdentifier": "t_contract$_Market_$33905", "typeString": "library Market"}}, "nodeType": "UsingForDirective", "src": "1641:34:31", "typeName": {"id": 6558, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56637, "src": "1658:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_storage_ptr", "typeString": "struct MarketParameters"}}}, {"id": 6562, "libraryName": {"id": 6560, "name": "BalanceHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 24802, "src": "1686:14:31", "typeDescriptions": {"typeIdentifier": "t_contract$_BalanceHandler_$24802", "typeString": "library BalanceHandler"}}, "nodeType": "UsingForDirective", "src": "1680:38:31", "typeName": {"id": 6561, "name": "BalanceState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56591, "src": "1705:12:31", "typeDescriptions": {"typeIdentifier": "t_struct$_BalanceState_$56591_storage_ptr", "typeString": "struct BalanceState"}}}, {"id": 6565, "libraryName": {"id": 6563, "name": "CashGroup", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 31352, "src": "1729:9:31", "typeDescriptions": {"typeIdentifier": "t_contract$_CashGroup_$31352", "typeString": "library CashGroup"}}, "nodeType": "UsingForDirective", "src": "1723:40:31", "typeName": {"id": 6564, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56607, "src": "1743:19:31", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$56607_storage_ptr", "typeString": "struct CashGroupParameters"}}}, {"id": 6568, "libraryName": {"id": 6566, "name": "AssetRate", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 30073, "src": "1774:9:31", "typeDescriptions": {"typeIdentifier": "t_contract$_AssetRate_$30073", "typeString": "library AssetRate"}}, "nodeType": "UsingForDirective", "src": "1768:40:31", "typeName": {"id": 6567, "name": "AssetRateParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56598, "src": "1788:19:31", "typeDescriptions": {"typeIdentifier": "t_struct$_AssetRateParameters_$56598_storage_ptr", "typeString": "struct AssetRateParameters"}}}, {"id": 6571, "libraryName": {"id": 6569, "name": "AccountContextHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 23459, "src": "1819:21:31", "typeDescriptions": {"typeIdentifier": "t_contract$_AccountContextHandler_$23459", "typeString": "library AccountContextHandler"}}, "nodeType": "UsingForDirective", "src": "1813:47:31", "typeName": {"id": 6570, "name": "AccountContext", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56702, "src": "1845:14:31", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$56702_storage_ptr", "typeString": "struct AccountContext"}}}, {"id": 6574, "libraryName": {"id": 6572, "name": "nTokenHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 35501, "src": "1871:13:31", "typeDescriptions": {"typeIdentifier": "t_contract$_nTokenHandler_$35501", "typeString": "library nTokenHandler"}}, "nodeType": "UsingForDirective", "src": "1865:40:31", "typeName": {"id": 6573, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56527, "src": "1889:15:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_storage_ptr", "typeString": "struct nTokenPortfolio"}}}, {"anonymous": false, "id": 6578, "name": "MarketsInitialized", "nodeType": "EventDefinition", "parameters": {"id": 6577, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6576, "indexed": false, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 6578, "src": "1936:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 6575, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "1936:6:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}], "src": "1935:19:31"}, "src": "1911:44:31"}, {"anonymous": false, "id": 6584, "name": "SweepCashIntoMarkets", "nodeType": "EventDefinition", "parameters": {"id": 6583, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6580, "indexed": false, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 6584, "src": "1987:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 6579, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "1987:6:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 6582, "indexed": false, "mutability": "mutable", "name": "cashIntoMarkets", "nodeType": "VariableDeclaration", "scope": 6584, "src": "2006:22:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6581, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2006:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "1986:43:31"}, "src": "1960:70:31"}, {"canonicalName": "InitializeMarketsAction.GovernanceParameters", "id": 6597, "members": [{"constant": false, "id": 6587, "mutability": "mutable", "name": "depositShares", "nodeType": "VariableDeclaration", "scope": 6597, "src": "2074:22:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 6585, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2074:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6586, "nodeType": "ArrayTypeName", "src": "2074:8:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}, {"constant": false, "id": 6590, "mutability": "mutable", "name": "leverageThresholds", "nodeType": "VariableDeclaration", "scope": 6597, "src": "2106:27:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 6588, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2106:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6589, "nodeType": "ArrayTypeName", "src": "2106:8:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}, {"constant": false, "id": 6593, "mutability": "mutable", "name": "annualizedAnchorRates", "nodeType": "VariableDeclaration", "scope": 6597, "src": "2143:30:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 6591, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2143:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6592, "nodeType": "ArrayTypeName", "src": "2143:8:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}, {"constant": false, "id": 6596, "mutability": "mutable", "name": "proportions", "nodeType": "VariableDeclaration", "scope": 6597, "src": "2183:20:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 6594, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2183:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6595, "nodeType": "ArrayTypeName", "src": "2183:8:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}], "name": "GovernanceParameters", "nodeType": "StructDefinition", "scope": 8074, "src": "2036:174:31", "visibility": "public"}, {"body": {"id": 6637, "nodeType": "Block", "src": "2373:400:31", "statements": [{"assignments": [6607], "declarations": [{"constant": false, "id": 6607, "mutability": "mutable", "name": "params", "nodeType": "VariableDeclaration", "scope": 6637, "src": "2383:34:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}, "typeName": {"id": 6606, "name": "GovernanceParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 6597, "src": "2383:20:31", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_storage_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}}, "visibility": "internal"}], "id": 6608, "nodeType": "VariableDeclarationStatement", "src": "2383:34:31"}, {"expression": {"id": 6620, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"expression": {"id": 6609, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6607, "src": "2428:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 6611, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "depositShares", "nodeType": "MemberAccess", "referencedDeclaration": 6587, "src": "2428:20:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, {"expression": {"id": 6612, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6607, "src": "2450:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 6613, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "leverageThresholds", "nodeType": "MemberAccess", "referencedDeclaration": 6590, "src": "2450:25:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}], "id": 6614, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "2427:49:31", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "tuple(int256[] memory,int256[] memory)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6617, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6599, "src": "2527:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6618, "name": "maxMarketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6601, "src": "2551:14:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6615, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 35501, "src": "2479:13:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$35501_$", "typeString": "type(library nTokenHandler)"}}, "id": 6616, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getDepositParameters", "nodeType": "MemberAccess", "referencedDeclaration": 34951, "src": "2479:34:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "function (uint256,uint256) view returns (int256[] memory,int256[] memory)"}}, "id": 6619, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2479:96:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "tuple(int256[] memory,int256[] memory)"}}, "src": "2427:148:31", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6621, "nodeType": "ExpressionStatement", "src": "2427:148:31"}, {"expression": {"id": 6633, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"expression": {"id": 6622, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6607, "src": "2587:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 6624, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "annualizedAnchorRates", "nodeType": "MemberAccess", "referencedDeclaration": 6593, "src": "2587:28:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, {"expression": {"id": 6625, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6607, "src": "2617:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 6626, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "proportions", "nodeType": "MemberAccess", "referencedDeclaration": 6596, "src": "2617:18:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}], "id": 6627, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "2586:50:31", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "tuple(int256[] memory,int256[] memory)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6630, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6599, "src": "2694:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6631, "name": "maxMarketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6601, "src": "2718:14:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6628, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 35501, "src": "2639:13:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$35501_$", "typeString": "type(library nTokenHandler)"}}, "id": 6629, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getInitializationParameters", "nodeType": "MemberAccess", "referencedDeclaration": 35197, "src": "2639:41:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "function (uint256,uint256) view returns (int256[] memory,int256[] memory)"}}, "id": 6632, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2639:103:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "tuple(int256[] memory,int256[] memory)"}}, "src": "2586:156:31", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6634, "nodeType": "ExpressionStatement", "src": "2586:156:31"}, {"expression": {"id": 6635, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6607, "src": "2760:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "functionReturnParameters": 6605, "id": 6636, "nodeType": "Return", "src": "2753:13:31"}]}, "id": 6638, "implemented": true, "kind": "function", "modifiers": [], "name": "_getGovernanceParameters", "nodeType": "FunctionDefinition", "parameters": {"id": 6602, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6599, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 6638, "src": "2250:18:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6598, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2250:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 6601, "mutability": "mutable", "name": "maxMarketIndex", "nodeType": "VariableDeclaration", "scope": 6638, "src": "2270:22:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6600, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2270:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "2249:44:31"}, "returnParameters": {"id": 6605, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6604, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 6638, "src": "2340:27:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}, "typeName": {"id": 6603, "name": "GovernanceParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 6597, "src": "2340:20:31", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_storage_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}}, "visibility": "internal"}], "src": "2339:29:31"}, "scope": 8074, "src": "2216:557:31", "stateMutability": "view", "virtual": false, "visibility": "private"}, {"body": {"id": 6730, "nodeType": "Block", "src": "2869:1831:31", "statements": [{"assignments": [6646], "declarations": [{"constant": false, "id": 6646, "mutability": "mutable", "name": "referenceTime", "nodeType": "VariableDeclaration", "scope": 6730, "src": "3651:21:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6645, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3651:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6651, "initialValue": {"arguments": [{"id": 6649, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6642, "src": "3701:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6647, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 31991, "src": "3675:8:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$31991_$", "typeString": "type(library DateTime)"}}, "id": 6648, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 31384, "src": "3675:25:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 6650, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3675:36:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "3651:60:31"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6656, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 6653, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6640, "src": "3729:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6654, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 56522, "src": "3729:26:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"id": 6655, "name": "referenceTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6646, "src": "3758:13:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3729:42:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "494d3a20696e76616c69642074696d65", "id": 6657, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "3773:18:31", "typeDescriptions": {"typeIdentifier": "t_stringliteral_d67a894f7e12aea514cbdfb6607d3417b181a719d15ab025576014b5bd145efd", "typeString": "literal_string \"IM: invalid time\""}, "value": "IM: invalid time"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_d67a894f7e12aea514cbdfb6607d3417b181a719d15ab025576014b5bd145efd", "typeString": "literal_string \"IM: invalid time\""}], "id": 6652, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "3721:7:31", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 6658, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3721:71:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6659, "nodeType": "ExpressionStatement", "src": "3721:71:31"}, {"id": 6684, "nodeType": "Block", "src": "3803:340:31", "statements": [{"assignments": [6663], "declarations": [{"constant": false, "id": 6663, "mutability": "mutable", "name": "settleAmount", "nodeType": "VariableDeclaration", "scope": 6684, "src": "3920:34:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_SettleAmount_$56501_memory_ptr_$dyn_memory_ptr", "typeString": "struct SettleAmount[]"}, "typeName": {"baseType": {"id": 6661, "name": "SettleAmount", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56501, "src": "3920:12:31", "typeDescriptions": {"typeIdentifier": "t_struct$_SettleAmount_$56501_storage_ptr", "typeString": "struct SettleAmount"}}, "id": 6662, "nodeType": "ArrayTypeName", "src": "3920:14:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_SettleAmount_$56501_storage_$dyn_storage_ptr", "typeString": "struct SettleAmount[]"}}, "visibility": "internal"}], "id": 6670, "initialValue": {"arguments": [{"expression": {"id": 6666, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6640, "src": "4011:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6667, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 56516, "src": "4011:21:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$56561_memory_ptr", "typeString": "struct PortfolioState memory"}}, {"id": 6668, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6642, "src": "4034:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_PortfolioState_$56561_memory_ptr", "typeString": "struct PortfolioState memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6664, "name": "SettlePortfolioAssets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 38685, "src": "3973:21:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_SettlePortfolioAssets_$38685_$", "typeString": "type(library SettlePortfolioAssets)"}}, "id": 6665, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "settlePortfolio", "nodeType": "MemberAccess", "referencedDeclaration": 38590, "src": "3973:37:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_PortfolioState_$56561_memory_ptr_$_t_uint256_$returns$_t_array$_t_struct$_SettleAmount_$56501_memory_ptr_$dyn_memory_ptr_$", "typeString": "function (struct PortfolioState memory,uint256) returns (struct SettleAmount memory[] memory)"}}, "id": 6669, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3973:71:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_SettleAmount_$56501_memory_ptr_$dyn_memory_ptr", "typeString": "struct SettleAmount memory[] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "3920:124:31"}, {"expression": {"id": 6682, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 6671, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6640, "src": "4058:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6673, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 56520, "src": "4058:18:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"baseExpression": {"id": 6677, "name": "settleAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6663, "src": "4102:12:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_SettleAmount_$56501_memory_ptr_$dyn_memory_ptr", "typeString": "struct SettleAmount memory[] memory"}}, "id": 6679, "indexExpression": {"hexValue": "30", "id": 6678, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4115:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "4102:15:31", "typeDescriptions": {"typeIdentifier": "t_struct$_SettleAmount_$56501_memory_ptr", "typeString": "struct SettleAmount memory"}}, "id": 6680, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "netCashChange", "nodeType": "MemberAccess", "referencedDeclaration": 56500, "src": "4102:29:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 6674, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6640, "src": "4079:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6675, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 56520, "src": "4079:18:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6676, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 44377, "src": "4079:22:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 6681, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4079:53:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "4058:74:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6683, "nodeType": "ExpressionStatement", "src": "4058:74:31"}]}, {"assignments": [6686, 6688], "declarations": [{"constant": false, "id": 6686, "mutability": "mutable", "name": "settledAssetCash", "nodeType": "VariableDeclaration", "scope": 6730, "src": "4154:23:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6685, "name": "int256", "nodeType": "ElementaryTypeName", "src": "4154:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 6688, "mutability": "mutable", "name": "blockTimeUTC0", "nodeType": "VariableDeclaration", "scope": 6730, "src": "4179:21:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6687, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4179:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6700, "initialValue": {"arguments": [{"expression": {"id": 6691, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6640, "src": "4277:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6692, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 56526, "src": "4277:19:31", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"expression": {"id": 6693, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6640, "src": "4314:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6694, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 56514, "src": "4314:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$56607_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 6695, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 56600, "src": "4314:27:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 6696, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6640, "src": "4359:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6697, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 56522, "src": "4359:26:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6698, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6642, "src": "4403:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6689, "name": "SettleBitmapAssets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 38260, "src": "4216:18:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_SettleBitmapAssets_$38260_$", "typeString": "type(library SettleBitmapAssets)"}}, "id": 6690, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "settleBitmappedCashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 38194, "src": "4216:43:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_int256_$_t_uint256_$", "typeString": "function (address,uint256,uint256,uint256) returns (int256,uint256)"}}, "id": 6699, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4216:210:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_uint256_$", "typeString": "tuple(int256,uint256)"}}, "nodeType": "VariableDeclarationStatement", "src": "4153:273:31"}, {"expression": {"id": 6709, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 6701, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6640, "src": "4436:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6703, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 56520, "src": "4436:18:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6707, "name": "settledAssetCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6686, "src": "4480:16:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 6704, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6640, "src": "4457:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6705, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 56520, "src": "4457:18:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6706, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 44377, "src": "4457:22:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 6708, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4457:40:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "4436:61:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6710, "nodeType": "ExpressionStatement", "src": "4436:61:31"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6718, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6712, "name": "blockTimeUTC0", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6688, "src": "4599:13:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"expression": {"arguments": [{"id": 6715, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "4621:6:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint40_$", "typeString": "type(uint40)"}, "typeName": {"id": 6714, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "4621:6:31", "typeDescriptions": {}}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_type$_t_uint40_$", "typeString": "type(uint40)"}], "id": 6713, "name": "type", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -27, "src": "4616:4:31", "typeDescriptions": {"typeIdentifier": "t_function_metatype_pure$__$returns$__$", "typeString": "function () pure"}}, "id": 6716, "isConstant": false, "isLValue": false, "isPure": true, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4616:12:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_magic_meta_type_t_uint40", "typeString": "type(uint40)"}}, "id": 6717, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "max", "nodeType": "MemberAccess", "src": "4616:16:31", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "src": "4599:33:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 6711, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "4591:7:31", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 6719, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4591:42:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6720, "nodeType": "ExpressionStatement", "src": "4591:42:31"}, {"expression": {"id": 6728, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 6721, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6640, "src": "4643:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6723, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 56522, "src": "4643:26:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6726, "name": "blockTimeUTC0", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6688, "src": "4679:13:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 6725, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "4672:6:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint40_$", "typeString": "type(uint40)"}, "typeName": {"id": 6724, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "4672:6:31", "typeDescriptions": {}}}, "id": 6727, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4672:21:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "src": "4643:50:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6729, "nodeType": "ExpressionStatement", "src": "4643:50:31"}]}, "id": 6731, "implemented": true, "kind": "function", "modifiers": [], "name": "_settleNTokenPortfolio", "nodeType": "FunctionDefinition", "parameters": {"id": 6643, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6640, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 6731, "src": "2811:29:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 6639, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56527, "src": "2811:15:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 6642, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 6731, "src": "2842:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6641, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2842:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "2810:50:31"}, "returnParameters": {"id": 6644, "nodeType": "ParameterList", "parameters": [], "src": "2869:0:31"}, "scope": 8074, "src": "2779:1921:31", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 6790, "nodeType": "Block", "src": "5025:1333:31", "statements": [{"assignments": [6745], "declarations": [{"constant": false, "id": 6745, "mutability": "mutable", "name": "rateOracleTimeWindow", "nodeType": "VariableDeclaration", "scope": 6790, "src": "5035:28:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6744, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5035:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6750, "initialValue": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"expression": {"id": 6746, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6738, "src": "5066:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6747, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 56514, "src": "5066:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$56607_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 6748, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "getRateOracleTimeWindow", "nodeType": "MemberAccess", "referencedDeclaration": 30466, "src": "5066:40:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_CashGroupParameters_$56607_memory_ptr_$returns$_t_uint256_$bound_to$_t_struct$_CashGroupParameters_$56607_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory) pure returns (uint256)"}}, "id": 6749, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5066:42:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "5035:73:31"}, {"assignments": [6752], "declarations": [{"constant": false, "id": 6752, "mutability": "mutable", "name": "settlementDate", "nodeType": "VariableDeclaration", "scope": 6790, "src": "5206:22:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6751, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5206:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6757, "initialValue": {"arguments": [{"id": 6755, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6736, "src": "5257:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6753, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 31991, "src": "5231:8:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$31991_$", "typeString": "type(library DateTime)"}}, "id": 6754, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 31384, "src": "5231:25:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 6756, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5231:36:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "5206:61:31"}, {"body": {"id": 6788, "nodeType": "Block", "src": "5912:440:31", "statements": [{"expression": {"arguments": [{"id": 6775, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6734, "src": "5991:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"baseExpression": {"expression": {"expression": {"id": 6776, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6738, "src": "6096:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6777, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 56516, "src": "6096:21:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$56561_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 6778, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 56553, "src": "6096:34:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$56620_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 6780, "indexExpression": {"id": 6779, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6759, "src": "6131:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6096:37:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$56620_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 6781, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 56611, "src": "6096:46:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6782, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6736, "src": "6160:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"hexValue": "66616c7365", "id": 6783, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "6252:5:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "false"}, {"id": 6784, "name": "rateOracleTimeWindow", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6745, "src": "6275:20:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6785, "name": "settlementDate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6752, "src": "6313:14:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"baseExpression": {"id": 6771, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6741, "src": "5926:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 6773, "indexExpression": {"id": 6772, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6759, "src": "5942:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "5926:18:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 6774, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadMarketWithSettlementDate", "nodeType": "MemberAccess", "referencedDeclaration": 33654, "src": "5926:47:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_MarketParameters_$56637_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$_t_uint256_$_t_uint256_$returns$__$bound_to$_t_struct$_MarketParameters_$56637_memory_ptr_$", "typeString": "function (struct MarketParameters memory,uint256,uint256,uint256,bool,uint256,uint256) view"}}, "id": 6786, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5926:415:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6787, "nodeType": "ExpressionStatement", "src": "5926:415:31"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6767, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6762, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6759, "src": "5860:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"expression": {"expression": {"id": 6763, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6738, "src": "5864:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6764, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 56516, "src": "5864:21:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$56561_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 6765, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 56553, "src": "5864:34:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$56620_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 6766, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "5864:41:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5860:45:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 6789, "initializationExpression": {"assignments": [6759], "declarations": [{"constant": false, "id": 6759, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 6789, "src": "5845:9:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6758, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5845:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6761, "initialValue": {"hexValue": "31", "id": 6760, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "5857:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "nodeType": "VariableDeclarationStatement", "src": "5845:13:31"}, "loopExpression": {"expression": {"id": 6769, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "5907:3:31", "subExpression": {"id": 6768, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6759, "src": "5907:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6770, "nodeType": "ExpressionStatement", "src": "5907:3:31"}, "nodeType": "ForStatement", "src": "5840:512:31"}]}, "documentation": {"id": 6732, "nodeType": "StructuredDocumentation", "src": "4706:121:31", "text": "@notice Special method to get previous markets, normal usage would not reference previous markets\n in this way"}, "id": 6791, "implemented": true, "kind": "function", "modifiers": [], "name": "_getPreviousMarkets", "nodeType": "FunctionDefinition", "parameters": {"id": 6742, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6734, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 6791, "src": "4870:18:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6733, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4870:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 6736, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 6791, "src": "4898:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6735, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4898:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 6738, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 6791, "src": "4925:29:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 6737, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56527, "src": "4925:15:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 6741, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 6791, "src": "4964:41:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 6739, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56637, "src": "4964:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 6740, "nodeType": "ArrayTypeName", "src": "4964:18:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}], "src": "4860:151:31"}, "returnParameters": {"id": 6743, "nodeType": "ParameterList", "parameters": [], "src": "5025:0:31"}, "scope": 8074, "src": "4832:1526:31", "stateMutability": "view", "virtual": false, "visibility": "private"}, {"body": {"id": 6865, "nodeType": "Block", "src": "6761:1164:31", "statements": [{"body": {"id": 6857, "nodeType": "Block", "src": "7047:694:31", "statements": [{"assignments": [6820], "declarations": [{"constant": false, "id": 6820, "mutability": "mutable", "name": "asset", "nodeType": "VariableDeclaration", "scope": 6857, "src": "7061:27:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$56620_memory_ptr", "typeString": "struct PortfolioAsset"}, "typeName": {"id": 6819, "name": "PortfolioAsset", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56620, "src": "7061:14:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$56620_storage_ptr", "typeString": "struct PortfolioAsset"}}, "visibility": "internal"}], "id": 6826, "initialValue": {"baseExpression": {"expression": {"expression": {"id": 6821, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6794, "src": "7091:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6822, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 56516, "src": "7091:21:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$56561_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 6823, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 56553, "src": "7091:34:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$56620_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 6825, "indexExpression": {"id": 6824, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6807, "src": "7126:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "7091:37:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$56620_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "nodeType": "VariableDeclarationStatement", "src": "7061:67:31"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6832, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 6828, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6820, "src": "7333:5:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$56620_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 6829, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "assetType", "nodeType": "MemberAccess", "referencedDeclaration": 56613, "src": "7333:15:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 6830, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22246, "src": "7352:9:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$22246_$", "typeString": "type(library Constants)"}}, "id": 6831, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "FCASH_ASSET_TYPE", "nodeType": "MemberAccess", "referencedDeclaration": 22176, "src": "7352:26:31", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "src": "7333:45:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 6827, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "7325:7:31", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 6833, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7325:54:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6834, "nodeType": "ExpressionStatement", "src": "7325:54:31"}, {"expression": {"arguments": [{"expression": {"id": 6838, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6794, "src": "7446:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6839, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 56526, "src": "7446:19:31", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 6840, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6799, "src": "7483:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 6841, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6820, "src": "7511:5:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$56620_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 6842, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 56611, "src": "7511:14:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 6843, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6794, "src": "7543:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6844, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 56522, "src": "7543:26:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 6845, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6820, "src": "7587:5:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$56620_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 6846, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "notional", "nodeType": "MemberAccess", "referencedDeclaration": 56615, "src": "7587:14:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 6835, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 36492, "src": "7394:19:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$36492_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 6837, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "addifCashAsset", "nodeType": "MemberAccess", "referencedDeclaration": 36189, "src": "7394:34:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (address,uint256,uint256,uint256,int256) returns (int256)"}}, "id": 6847, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7394:221:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6848, "nodeType": "ExpressionStatement", "src": "7394:221:31"}, {"expression": {"arguments": [{"id": 6854, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6807, "src": "7728:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 6849, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6794, "src": "7694:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6852, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 56516, "src": "7694:21:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$56561_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 6853, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "deleteAsset", "nodeType": "MemberAccess", "referencedDeclaration": 37460, "src": "7694:33:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PortfolioState_$56561_memory_ptr_$_t_uint256_$returns$__$bound_to$_t_struct$_PortfolioState_$56561_memory_ptr_$", "typeString": "function (struct PortfolioState memory,uint256) pure"}}, "id": 6855, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7694:36:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6856, "nodeType": "ExpressionStatement", "src": "7694:36:31"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6815, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6810, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6807, "src": "6995:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"expression": {"expression": {"id": 6811, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6794, "src": "6999:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6812, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 56516, "src": "6999:21:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$56561_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 6813, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 56553, "src": "6999:34:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$56620_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 6814, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "6999:41:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "6995:45:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 6858, "initializationExpression": {"assignments": [6807], "declarations": [{"constant": false, "id": 6807, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 6858, "src": "6980:9:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6806, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6980:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6809, "initialValue": {"hexValue": "31", "id": 6808, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6992:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "nodeType": "VariableDeclarationStatement", "src": "6980:13:31"}, "loopExpression": {"expression": {"id": 6817, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "7042:3:31", "subExpression": {"id": 6816, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6807, "src": "7042:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6818, "nodeType": "ExpressionStatement", "src": "7042:3:31"}, "nodeType": "ForStatement", "src": "6975:766:31"}, {"expression": {"arguments": [{"id": 6860, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6794, "src": "7883:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 6861, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6797, "src": "7891:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"id": 6862, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6801, "src": "7908:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 6859, "name": "_getNTokenNegativefCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7049, "src": "7848:34:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_nTokenPortfolio_$56527_memory_ptr_$_t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr_$_t_uint256_$returns$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,struct MarketParameters memory[] memory,uint256) view returns (int256)"}}, "id": 6863, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7848:70:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 6805, "id": 6864, "nodeType": "Return", "src": "7841:77:31"}]}, "documentation": {"id": 6792, "nodeType": "StructuredDocumentation", "src": "6364:180:31", "text": "@notice Check the net fCash assets set by the portfolio and withhold cash to account for\n the PV of negative ifCash. Also sets the ifCash assets into the nToken mapping."}, "id": 6866, "implemented": true, "kind": "function", "modifiers": [], "name": "_withholdAndSetfCashAssets", "nodeType": "FunctionDefinition", "parameters": {"id": 6802, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6794, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 6866, "src": "6594:29:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 6793, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56527, "src": "6594:15:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 6797, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 6866, "src": "6633:41:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 6795, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56637, "src": "6633:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 6796, "nodeType": "ArrayTypeName", "src": "6633:18:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}, {"constant": false, "id": 6799, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 6866, "src": "6684:18:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6798, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6684:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 6801, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 6866, "src": "6712:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6800, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6712:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "6584:151:31"}, "returnParameters": {"id": 6805, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6804, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 6866, "src": "6753:6:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6803, "name": "int256", "nodeType": "ElementaryTypeName", "src": "6753:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "6752:8:31"}, "scope": 8074, "src": "6549:1376:31", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 7048, "nodeType": "Block", "src": "8398:2610:31", "statements": [{"assignments": [6880], "declarations": [{"constant": false, "id": 6880, "mutability": "mutable", "name": "assetsBitmap", "nodeType": "VariableDeclaration", "scope": 7048, "src": "8408:20:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 6879, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "8408:7:31", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "id": 6889, "initialValue": {"arguments": [{"expression": {"id": 6883, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6869, "src": "8467:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6884, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 56526, "src": "8467:19:31", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"expression": {"id": 6885, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6869, "src": "8488:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6886, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 56514, "src": "8488:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$56607_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 6887, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 56600, "src": "8488:27:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 6881, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 36492, "src": "8431:19:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$36492_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 6882, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getAssetsBitmap", "nodeType": "MemberAccess", "referencedDeclaration": 35856, "src": "8431:35:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bytes32_$", "typeString": "function (address,uint256) view returns (bytes32)"}}, "id": 6888, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8431:85:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "VariableDeclarationStatement", "src": "8408:108:31"}, {"assignments": [6891], "declarations": [{"constant": false, "id": 6891, "mutability": "mutable", "name": "oracleRateBuffer", "nodeType": "VariableDeclaration", "scope": 7048, "src": "8738:24:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6890, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "8738:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6906, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6905, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"arguments": [{"baseExpression": {"expression": {"id": 6896, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6869, "src": "8791:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6897, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "parameters", "nodeType": "MemberAccess", "referencedDeclaration": 56524, "src": "8791:17:31", "typeDescriptions": {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}}, "id": 6900, "indexExpression": {"expression": {"id": 6898, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22246, "src": "8809:9:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$22246_$", "typeString": "type(library Constants)"}}, "id": 6899, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "CASH_WITHHOLDING_BUFFER", "nodeType": "MemberAccess", "referencedDeclaration": 22218, "src": "8809:33:31", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "8791:52:31", "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 6895, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "8785:5:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 6894, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "8785:5:31", "typeDescriptions": {}}}, "id": 6901, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8785:59:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 6893, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "8777:7:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 6892, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "8777:7:31", "typeDescriptions": {}}}, "id": 6902, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8777:68:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"expression": {"id": 6903, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22246, "src": "8848:9:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$22246_$", "typeString": "type(library Constants)"}}, "id": 6904, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "TEN_BASIS_POINTS", "nodeType": "MemberAccess", "referencedDeclaration": 22160, "src": "8848:26:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "8777:97:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "8738:136:31"}, {"assignments": [6908], "declarations": [{"constant": false, "id": 6908, "mutability": "mutable", "name": "oracleRateBlockTime", "nodeType": "VariableDeclaration", "scope": 7048, "src": "8884:27:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6907, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "8884:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6920, "initialValue": {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6912, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 6909, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6872, "src": "8914:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 6910, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "8914:22:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 6911, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "8940:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "8914:27:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseExpression": {"arguments": [{"expression": {"id": 6916, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22246, "src": "8970:9:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$22246_$", "typeString": "type(library Constants)"}}, "id": 6917, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 22094, "src": "8970:17:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6914, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6874, "src": "8956:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6915, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 55839, "src": "8956:13:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 6918, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8956:32:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6919, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "Conditional", "src": "8914:74:31", "trueExpression": {"id": 6913, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6874, "src": "8944:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "8884:104:31"}, {"assignments": [6922], "declarations": [{"constant": false, "id": 6922, "mutability": "mutable", "name": "bitNum", "nodeType": "VariableDeclaration", "scope": 7048, "src": "8999:14:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6921, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "8999:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6926, "initialValue": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 6923, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6880, "src": "9016:12:31", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 6924, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getNextBitNum", "nodeType": "MemberAccess", "referencedDeclaration": 44162, "src": "9016:26:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_uint256_$bound_to$_t_bytes32_$", "typeString": "function (bytes32) pure returns (uint256)"}}, "id": 6925, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9016:28:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "8999:45:31"}, {"body": {"id": 7039, "nodeType": "Block", "src": "9074:1840:31", "statements": [{"assignments": [6931], "declarations": [{"constant": false, "id": 6931, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 7039, "src": "9172:16:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6930, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "9172:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6938, "initialValue": {"arguments": [{"expression": {"id": 6934, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6869, "src": "9222:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6935, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 56522, "src": "9222:26:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6936, "name": "bitNum", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6922, "src": "9250:6:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6932, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 31991, "src": "9191:8:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$31991_$", "typeString": "type(library DateTime)"}}, "id": 6933, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getMaturityFromBitNum", "nodeType": "MemberAccess", "referencedDeclaration": 31990, "src": "9191:30:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 6937, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9191:66:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "9172:85:31"}, {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 6951, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6942, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 6939, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6872, "src": "9456:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 6940, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "9456:22:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 6941, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "9482:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "9456:27:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"arguments": [{"expression": {"expression": {"id": 6945, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6869, "src": "9555:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6946, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 56514, "src": "9555:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$56607_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 6947, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 56602, "src": "9555:31:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6948, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6931, "src": "9608:8:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6949, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6874, "src": "9638:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6943, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 31991, "src": "9503:8:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$31991_$", "typeString": "type(library DateTime)"}}, "id": 6944, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "isValidMarketMaturity", "nodeType": "MemberAccess", "referencedDeclaration": 31550, "src": "9503:30:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$", "typeString": "function (uint256,uint256,uint256) pure returns (bool)"}}, "id": 6950, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9503:162:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "9456:209:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 6968, "nodeType": "IfStatement", "src": "9435:470:31", "trueBody": {"id": 6967, "nodeType": "Block", "src": "9680:225:31", "statements": [{"expression": {"id": 6958, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 6952, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6880, "src": "9760:12:31", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6955, "name": "bitNum", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6922, "src": "9795:6:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"hexValue": "66616c7365", "id": 6956, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "9803:5:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "false"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bool", "typeString": "bool"}], "expression": {"id": 6953, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6880, "src": "9775:12:31", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 6954, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBit", "nodeType": "MemberAccess", "referencedDeclaration": 43878, "src": "9775:19:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint256_$_t_bool_$returns$_t_bytes32_$bound_to$_t_bytes32_$", "typeString": "function (bytes32,uint256,bool) pure returns (bytes32)"}}, "id": 6957, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9775:34:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "src": "9760:49:31", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 6959, "nodeType": "ExpressionStatement", "src": "9760:49:31"}, {"expression": {"id": 6964, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 6960, "name": "bitNum", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6922, "src": "9827:6:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 6961, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6880, "src": "9836:12:31", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 6962, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getNextBitNum", "nodeType": "MemberAccess", "referencedDeclaration": 44162, "src": "9836:26:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_uint256_$bound_to$_t_bytes32_$", "typeString": "function (bytes32) pure returns (uint256)"}}, "id": 6963, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9836:28:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "9827:37:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6965, "nodeType": "ExpressionStatement", "src": "9827:37:31"}, {"id": 6966, "nodeType": "Continue", "src": "9882:8:31"}]}}, {"assignments": [6970], "declarations": [{"constant": false, "id": 6970, "mutability": "mutable", "name": "notional", "nodeType": "VariableDeclaration", "scope": 7039, "src": "9919:15:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6969, "name": "int256", "nodeType": "ElementaryTypeName", "src": "9919:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 6980, "initialValue": {"arguments": [{"expression": {"id": 6973, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6869, "src": "10012:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6974, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 56526, "src": "10012:19:31", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"expression": {"id": 6975, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6869, "src": "10053:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6976, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 56514, "src": "10053:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$56607_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 6977, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 56600, "src": "10053:27:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 6978, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6931, "src": "10102:8:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6971, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 36492, "src": "9953:19:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$36492_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 6972, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getifCashNotional", "nodeType": "MemberAccess", "referencedDeclaration": 35927, "src": "9953:37:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (address,uint256,uint256) view returns (int256)"}}, "id": 6979, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9953:175:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "9919:209:31"}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 6983, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6981, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6970, "src": "10214:8:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "30", "id": 6982, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10225:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "10214:12:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 7024, "nodeType": "IfStatement", "src": "10210:521:31", "trueBody": {"id": 7023, "nodeType": "Block", "src": "10228:503:31", "statements": [{"assignments": [6985], "declarations": [{"constant": false, "id": 6985, "mutability": "mutable", "name": "oracleRate", "nodeType": "VariableDeclaration", "scope": 7023, "src": "10246:18:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6984, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "10246:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6992, "initialValue": {"arguments": [{"id": 6989, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6931, "src": "10304:8:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6990, "name": "oracleRateBlockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6908, "src": "10314:19:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 6986, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6869, "src": "10267:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6987, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 56514, "src": "10267:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$56607_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 6988, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "calculateOracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 30794, "src": "10267:36:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_CashGroupParameters_$56607_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_CashGroupParameters_$56607_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory,uint256,uint256) view returns (uint256)"}}, "id": 6991, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10267:67:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "10246:88:31"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6995, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6993, "name": "oracleRateBuffer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6891, "src": "10357:16:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 6994, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6985, "src": "10376:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "10357:29:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 7008, "nodeType": "Block", "src": "10449:86:31", "statements": [{"expression": {"id": 7006, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7001, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6985, "src": "10471:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7004, "name": "oracleRateBuffer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6891, "src": "10499:16:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7002, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6985, "src": "10484:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7003, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 55839, "src": "10484:14:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 7005, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10484:32:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "10471:45:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7007, "nodeType": "ExpressionStatement", "src": "10471:45:31"}]}, "id": 7009, "nodeType": "IfStatement", "src": "10353:182:31", "trueBody": {"id": 7000, "nodeType": "Block", "src": "10388:55:31", "statements": [{"expression": {"id": 6998, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 6996, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6985, "src": "10410:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"hexValue": "30", "id": 6997, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10423:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "10410:14:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6999, "nodeType": "ExpressionStatement", "src": "10410:14:31"}]}}, {"expression": {"id": 7021, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7010, "name": "totalCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6877, "src": "10553:20:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"id": 7015, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6970, "src": "10656:8:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7016, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6931, "src": "10666:8:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7017, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6874, "src": "10676:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7018, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6985, "src": "10687:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7013, "name": "AssetHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 39459, "src": "10622:12:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_AssetHandler_$39459_$", "typeString": "type(library AssetHandler)"}}, "id": 7014, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getPresentfCashValue", "nodeType": "MemberAccess", "referencedDeclaration": 38886, "src": "10622:33:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (int256,uint256,uint256,uint256) pure returns (int256)"}}, "id": 7019, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10622:76:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 7011, "name": "totalCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6877, "src": "10576:20:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7012, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 44351, "src": "10576:24:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7020, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10576:140:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "10553:163:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7022, "nodeType": "ExpressionStatement", "src": "10553:163:31"}]}}, {"expression": {"id": 7031, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7025, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6880, "src": "10803:12:31", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7028, "name": "bitNum", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6922, "src": "10838:6:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"hexValue": "66616c7365", "id": 7029, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "10846:5:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "false"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bool", "typeString": "bool"}], "expression": {"id": 7026, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6880, "src": "10818:12:31", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 7027, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBit", "nodeType": "MemberAccess", "referencedDeclaration": 43878, "src": "10818:19:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint256_$_t_bool_$returns$_t_bytes32_$bound_to$_t_bytes32_$", "typeString": "function (bytes32,uint256,bool) pure returns (bytes32)"}}, "id": 7030, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10818:34:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "src": "10803:49:31", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 7032, "nodeType": "ExpressionStatement", "src": "10803:49:31"}, {"expression": {"id": 7037, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7033, "name": "bitNum", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6922, "src": "10866:6:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 7034, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6880, "src": "10875:12:31", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 7035, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getNextBitNum", "nodeType": "MemberAccess", "referencedDeclaration": 44162, "src": "10875:26:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_uint256_$bound_to$_t_bytes32_$", "typeString": "function (bytes32) pure returns (uint256)"}}, "id": 7036, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10875:28:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "10866:37:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7038, "nodeType": "ExpressionStatement", "src": "10866:37:31"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6929, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6927, "name": "bitNum", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6922, "src": "9061:6:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 6928, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "9071:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "9061:11:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 7040, "nodeType": "WhileStatement", "src": "9054:1860:31"}, {"expression": {"arguments": [{"id": 7045, "name": "totalCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6877, "src": "10980:20:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"expression": {"id": 7041, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6869, "src": "10931:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7042, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 56514, "src": "10931:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$56607_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7043, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "assetRate", "nodeType": "MemberAccess", "referencedDeclaration": 56604, "src": "10931:26:31", "typeDescriptions": {"typeIdentifier": "t_struct$_AssetRateParameters_$56598_memory_ptr", "typeString": "struct AssetRateParameters memory"}}, "id": 7044, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertFromUnderlying", "nodeType": "MemberAccess", "referencedDeclaration": 29578, "src": "10931:48:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_AssetRateParameters_$56598_memory_ptr_$_t_int256_$returns$_t_int256_$bound_to$_t_struct$_AssetRateParameters_$56598_memory_ptr_$", "typeString": "function (struct AssetRateParameters memory,int256) pure returns (int256)"}}, "id": 7046, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10931:70:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 6878, "id": 7047, "nodeType": "Return", "src": "10924:77:31"}]}, "documentation": {"id": 6867, "nodeType": "StructuredDocumentation", "src": "7931:243:31", "text": "@notice If a nToken incurs a negative fCash residual as a result of lending, this means\n that we are going to need to withhold some amount of cash so that market makers can purchase and\n clear the debts off the balance sheet."}, "id": 7049, "implemented": true, "kind": "function", "modifiers": [], "name": "_getNTokenNegativefCashWithholding", "nodeType": "FunctionDefinition", "parameters": {"id": 6875, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6869, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 7049, "src": "8232:29:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 6868, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56527, "src": "8232:15:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 6872, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 7049, "src": "8271:41:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 6870, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56637, "src": "8271:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 6871, "nodeType": "ArrayTypeName", "src": "8271:18:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}, {"constant": false, "id": 6874, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 7049, "src": "8322:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6873, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "8322:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "8222:123:31"}, "returnParameters": {"id": 6878, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6877, "mutability": "mutable", "name": "totalCashWithholding", "nodeType": "VariableDeclaration", "scope": 7049, "src": "8369:27:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6876, "name": "int256", "nodeType": "ElementaryTypeName", "src": "8369:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "8368:29:31"}, "scope": 8074, "src": "8179:2829:31", "stateMutability": "view", "virtual": false, "visibility": "internal"}, {"body": {"id": 7135, "nodeType": "Block", "src": "11257:1145:31", "statements": [{"assignments": [7066], "declarations": [{"constant": false, "id": 7066, "mutability": "mutable", "name": "netAssetCashAvailable", "nodeType": "VariableDeclaration", "scope": 7135, "src": "11267:28:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7065, "name": "int256", "nodeType": "ElementaryTypeName", "src": "11267:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7067, "nodeType": "VariableDeclarationStatement", "src": "11267:28:31"}, {"assignments": [7069], "declarations": [{"constant": false, "id": 7069, "mutability": "mutable", "name": "assetCashWithholding", "nodeType": "VariableDeclaration", "scope": 7135, "src": "11305:27:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7068, "name": "int256", "nodeType": "ElementaryTypeName", "src": "11305:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7070, "nodeType": "VariableDeclarationStatement", "src": "11305:27:31"}, {"condition": {"id": 7071, "name": "isFirstInit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7060, "src": "11347:11:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 7106, "nodeType": "Block", "src": "11459:336:31", "statements": [{"expression": {"arguments": [{"id": 7086, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7051, "src": "11496:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 7087, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7056, "src": "11504:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7085, "name": "_settleNTokenPortfolio", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6731, "src": "11473:22:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$56527_memory_ptr_$_t_uint256_$returns$__$", "typeString": "function (struct nTokenPortfolio memory,uint256)"}}, "id": 7088, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11473:41:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7089, "nodeType": "ExpressionStatement", "src": "11473:41:31"}, {"expression": {"arguments": [{"id": 7091, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7058, "src": "11548:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7092, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7056, "src": "11560:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7093, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7051, "src": "11571:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 7094, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7054, "src": "11579:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}], "id": 7090, "name": "_getPreviousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6791, "src": "11528:19:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$_t_struct$_nTokenPortfolio_$56527_memory_ptr_$_t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr_$returns$__$", "typeString": "function (uint256,uint256,struct nTokenPortfolio memory,struct MarketParameters memory[] memory) view"}}, "id": 7095, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11528:67:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7096, "nodeType": "ExpressionStatement", "src": "11528:67:31"}, {"expression": {"id": 7104, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7097, "name": "assetCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7069, "src": "11609:20:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7099, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7051, "src": "11676:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 7100, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7054, "src": "11700:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"id": 7101, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7058, "src": "11733:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7102, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7056, "src": "11761:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7098, "name": "_withholdAndSetfCashAssets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6866, "src": "11632:26:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$56527_memory_ptr_$_t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,struct MarketParameters memory[] memory,uint256,uint256) returns (int256)"}}, "id": 7103, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11632:152:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "11609:175:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7105, "nodeType": "ExpressionStatement", "src": "11609:175:31"}]}, "id": 7107, "nodeType": "IfStatement", "src": "11343:452:31", "trueBody": {"id": 7084, "nodeType": "Block", "src": "11360:93:31", "statements": [{"expression": {"id": 7082, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7072, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7051, "src": "11374:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7074, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 56522, "src": "11374:26:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"id": 7079, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7056, "src": "11431:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7077, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 31991, "src": "11410:8:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$31991_$", "typeString": "type(library DateTime)"}}, "id": 7078, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getTimeUTC0", "nodeType": "MemberAccess", "referencedDeclaration": 31408, "src": "11410:20:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 7080, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11410:31:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7076, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "11403:6:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint40_$", "typeString": "type(uint40)"}, "typeName": {"id": 7075, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "11403:6:31", "typeDescriptions": {}}}, "id": 7081, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11403:39:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "src": "11374:68:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7083, "nodeType": "ExpressionStatement", "src": "11374:68:31"}]}}, {"expression": {"id": 7114, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7108, "name": "netAssetCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7066, "src": "11922:21:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7112, "name": "assetCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7069, "src": "11974:20:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 7109, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7051, "src": "11946:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7110, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 56520, "src": "11946:18:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7111, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subNoNeg", "nodeType": "MemberAccess", "referencedDeclaration": 44434, "src": "11946:27:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7113, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11946:49:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "11922:73:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7115, "nodeType": "ExpressionStatement", "src": "11922:73:31"}, {"expression": {"id": 7120, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7116, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7051, "src": "12050:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7118, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 56520, "src": "12050:18:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 7119, "name": "assetCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7069, "src": "12071:20:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "12050:41:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7121, "nodeType": "ExpressionStatement", "src": "12050:41:31"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 7129, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7123, "name": "netAssetCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7066, "src": "12246:21:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"arguments": [{"expression": {"id": 7126, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22246, "src": "12277:9:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$22246_$", "typeString": "type(library Constants)"}}, "id": 7127, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "DEPOSIT_PERCENT_BASIS", "nodeType": "MemberAccess", "referencedDeclaration": 22212, "src": "12277:31:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 7125, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "12270:6:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_int256_$", "typeString": "type(int256)"}, "typeName": {"id": 7124, "name": "int256", "nodeType": "ElementaryTypeName", "src": "12270:6:31", "typeDescriptions": {}}}, "id": 7128, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12270:39:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "12246:63:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "494d3a20696e73756666696369656e742063617368", "id": 7130, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "12323:23:31", "typeDescriptions": {"typeIdentifier": "t_stringliteral_9d6734fa91f5216063c151ded537fbf863e668ee43f07e7d73b264c914b71d1a", "typeString": "literal_string \"IM: insufficient cash\""}, "value": "IM: insufficient cash"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_9d6734fa91f5216063c151ded537fbf863e668ee43f07e7d73b264c914b71d1a", "typeString": "literal_string \"IM: insufficient cash\""}], "id": 7122, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "12225:7:31", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7131, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12225:131:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7132, "nodeType": "ExpressionStatement", "src": "12225:131:31"}, {"expression": {"id": 7133, "name": "netAssetCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7066, "src": "12374:21:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 7064, "id": 7134, "nodeType": "Return", "src": "12367:28:31"}]}, "id": 7136, "implemented": true, "kind": "function", "modifiers": [], "name": "_calculateNetAssetCashAvailable", "nodeType": "FunctionDefinition", "parameters": {"id": 7061, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7051, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 7136, "src": "11064:29:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 7050, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56527, "src": "11064:15:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 7054, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 7136, "src": "11103:41:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 7052, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56637, "src": "11103:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 7053, "nodeType": "ArrayTypeName", "src": "11103:18:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}, {"constant": false, "id": 7056, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 7136, "src": "11154:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7055, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "11154:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 7058, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 7136, "src": "11181:18:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7057, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "11181:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 7060, "mutability": "mutable", "name": "isFirstInit", "nodeType": "VariableDeclaration", "scope": 7136, "src": "11209:16:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 7059, "name": "bool", "nodeType": "ElementaryTypeName", "src": "11209:4:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "src": "11054:177:31"}, "returnParameters": {"id": 7064, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7063, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 7136, "src": "11249:6:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7062, "name": "int256", "nodeType": "ElementaryTypeName", "src": "11249:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "11248:8:31"}, "scope": 8074, "src": "11014:1388:31", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 7181, "nodeType": "Block", "src": "12828:524:31", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7151, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 7148, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7140, "src": "12915:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 7149, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "12915:22:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"hexValue": "33", "id": 7150, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "12941:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_3_by_1", "typeString": "int_const 3"}, "value": "3"}, "src": "12915:27:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "494d3a20736978206d6f6e7468206572726f72", "id": 7152, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "12944:21:31", "typeDescriptions": {"typeIdentifier": "t_stringliteral_3ae6f9a9a68da3c3b609502f0cb312a58fe9bb16d8f24a919bfdfee189d0b62b", "typeString": "literal_string \"IM: six month error\""}, "value": "IM: six month error"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_3ae6f9a9a68da3c3b609502f0cb312a58fe9bb16d8f24a919bfdfee189d0b62b", "typeString": "literal_string \"IM: six month error\""}], "id": 7147, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "12907:7:31", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7153, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12907:59:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7154, "nodeType": "ExpressionStatement", "src": "12907:59:31"}, {"expression": {"arguments": [{"expression": {"baseExpression": {"id": 7157, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7140, "src": "13045:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 7159, "indexExpression": {"hexValue": "31", "id": 7158, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13061:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "13045:18:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7160, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 56624, "src": "13045:27:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"baseExpression": {"id": 7161, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7140, "src": "13090:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 7163, "indexExpression": {"hexValue": "32", "id": 7162, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13106:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "13090:18:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7164, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 56624, "src": "13090:27:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"baseExpression": {"id": 7165, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7140, "src": "13135:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 7167, "indexExpression": {"hexValue": "31", "id": 7166, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13151:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "13135:18:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7168, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 56634, "src": "13135:29:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"baseExpression": {"id": 7169, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7140, "src": "13182:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 7171, "indexExpression": {"hexValue": "32", "id": 7170, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13198:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "13182:18:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7172, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 56634, "src": "13182:29:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7178, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7173, "name": "referenceTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7142, "src": "13294:13:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7177, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"hexValue": "32", "id": 7174, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13310:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"expression": {"id": 7175, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22246, "src": "13314:9:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$22246_$", "typeString": "type(library Constants)"}}, "id": 7176, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 22094, "src": "13314:17:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13310:21:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13294:37:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7155, "name": "CashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 31352, "src": "12996:9:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_CashGroup_$31352_$", "typeString": "type(library CashGroup)"}}, "id": 7156, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "interpolateOracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 30667, "src": "12996:31:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256,uint256,uint256,uint256,uint256) pure returns (uint256)"}}, "id": 7179, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12996:349:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 7146, "id": 7180, "nodeType": "Return", "src": "12977:368:31"}]}, "documentation": {"id": 7137, "nodeType": "StructuredDocumentation", "src": "12408:263:31", "text": "@notice The six month implied rate is zero if there have never been any markets initialized\n otherwise the market will be the interpolation between the old 6 month and 1 year markets\n which are now sitting at 3 month and 9 month time to maturity"}, "id": 7182, "implemented": true, "kind": "function", "modifiers": [], "name": "_getSixMonthImpliedRate", "nodeType": "FunctionDefinition", "parameters": {"id": 7143, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7140, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 7182, "src": "12718:41:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 7138, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56637, "src": "12718:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 7139, "nodeType": "ArrayTypeName", "src": "12718:18:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}, {"constant": false, "id": 7142, "mutability": "mutable", "name": "referenceTime", "nodeType": "VariableDeclaration", "scope": 7182, "src": "12769:21:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7141, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "12769:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "12708:88:31"}, "returnParameters": {"id": 7146, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7145, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 7182, "src": "12819:7:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7144, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "12819:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "12818:9:31"}, "scope": 8074, "src": "12676:676:31", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 7270, "nodeType": "Block", "src": "14213:1069:31", "statements": [{"assignments": [7197], "declarations": [{"constant": false, "id": 7197, "mutability": "mutable", "name": "rateAnchor", "nodeType": "VariableDeclaration", "scope": 7270, "src": "14223:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7196, "name": "int256", "nodeType": "ElementaryTypeName", "src": "14223:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7203, "initialValue": {"arguments": [{"id": 7200, "name": "annualizedAnchorRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7191, "src": "14281:20:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7201, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7187, "src": "14303:14:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7198, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 33905, "src": "14243:6:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Market_$33905_$", "typeString": "type(library Market)"}}, "id": 7199, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getExchangeRateFromImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 32883, "src": "14243:37:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (uint256,uint256) pure returns (int256)"}}, "id": 7202, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14243:75:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "14223:95:31"}, {"assignments": [7205], "declarations": [{"constant": false, "id": 7205, "mutability": "mutable", "name": "exchangeRate", "nodeType": "VariableDeclaration", "scope": 7270, "src": "14436:19:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7204, "name": "int256", "nodeType": "ElementaryTypeName", "src": "14436:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7211, "initialValue": {"arguments": [{"id": 7208, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7185, "src": "14496:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7209, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7187, "src": "14508:14:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7206, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 33905, "src": "14458:6:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Market_$33905_$", "typeString": "type(library Market)"}}, "id": 7207, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getExchangeRateFromImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 32883, "src": "14458:37:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (uint256,uint256) pure returns (int256)"}}, "id": 7210, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14458:65:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "14436:87:31"}, {"assignments": [7213], "declarations": [{"constant": false, "id": 7213, "mutability": "mutable", "name": "expValue", "nodeType": "VariableDeclaration", "scope": 7270, "src": "14534:15:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}, "typeName": {"id": 7212, "name": "int128", "nodeType": "ElementaryTypeName", "src": "14534:6:31", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "visibility": "internal"}], "id": 7225, "initialValue": {"arguments": [{"arguments": [{"id": 7222, "name": "rateScalar", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7189, "src": "14693:10:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"components": [{"arguments": [{"id": 7218, "name": "rateAnchor", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7197, "src": "14661:10:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 7216, "name": "exchangeRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7205, "src": "14644:12:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7217, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 44351, "src": "14644:16:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7219, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14644:28:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 7220, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "14643:30:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7221, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mulInRatePrecision", "nodeType": "MemberAccess", "referencedDeclaration": 44474, "src": "14643:49:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7223, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14643:61:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 7214, "name": "ABDKMath64x64", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43822, "src": "14552:13:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_ABDKMath64x64_$43822_$", "typeString": "type(library ABDKMath64x64)"}}, "id": 7215, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "fromInt", "nodeType": "MemberAccess", "referencedDeclaration": 41105, "src": "14552:21:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int128_$", "typeString": "function (int256) pure returns (int128)"}}, "id": 7224, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14552:162:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "nodeType": "VariableDeclarationStatement", "src": "14534:180:31"}, {"expression": {"id": 7233, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7226, "name": "expValue", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7213, "src": "14772:8:31", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7229, "name": "expValue", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7213, "src": "14801:8:31", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, {"expression": {"id": 7230, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22246, "src": "14811:9:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$22246_$", "typeString": "type(library Constants)"}}, "id": 7231, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RATE_PRECISION_64x64", "nodeType": "MemberAccess", "referencedDeclaration": 22163, "src": "14811:30:31", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int128", "typeString": "int128"}, {"typeIdentifier": "t_int128", "typeString": "int128"}], "expression": {"id": 7227, "name": "ABDKMath64x64", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43822, "src": "14783:13:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_ABDKMath64x64_$43822_$", "typeString": "type(library ABDKMath64x64)"}}, "id": 7228, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 41537, "src": "14783:17:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int128_$_t_int128_$returns$_t_int128_$", "typeString": "function (int128,int128) pure returns (int128)"}}, "id": 7232, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14783:59:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "src": "14772:70:31", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "id": 7234, "nodeType": "ExpressionStatement", "src": "14772:70:31"}, {"expression": {"id": 7240, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7235, "name": "expValue", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7213, "src": "14881:8:31", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7238, "name": "expValue", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7213, "src": "14910:8:31", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int128", "typeString": "int128"}], "expression": {"id": 7236, "name": "ABDKMath64x64", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43822, "src": "14892:13:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_ABDKMath64x64_$43822_$", "typeString": "type(library ABDKMath64x64)"}}, "id": 7237, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "exp", "nodeType": "MemberAccess", "referencedDeclaration": 43388, "src": "14892:17:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int128_$returns$_t_int128_$", "typeString": "function (int128) pure returns (int128)"}}, "id": 7239, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14892:27:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "src": "14881:38:31", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "id": 7241, "nodeType": "ExpressionStatement", "src": "14881:38:31"}, {"assignments": [7243], "declarations": [{"constant": false, "id": 7243, "mutability": "mutable", "name": "proportion", "nodeType": "VariableDeclaration", "scope": 7270, "src": "15014:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}, "typeName": {"id": 7242, "name": "int128", "nodeType": "ElementaryTypeName", "src": "15014:6:31", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "visibility": "internal"}], "id": 7255, "initialValue": {"arguments": [{"id": 7246, "name": "expValue", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7213, "src": "15052:8:31", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, {"arguments": [{"id": 7249, "name": "expValue", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7213, "src": "15080:8:31", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, {"commonType": {"typeIdentifier": "t_rational_18446744073709551616_by_1", "typeString": "int_const 18446744073709551616"}, "id": 7252, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "32", "id": 7250, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "15090:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "3634", "id": 7251, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "15093:2:31", "typeDescriptions": {"typeIdentifier": "t_rational_64_by_1", "typeString": "int_const 64"}, "value": "64"}, "src": "15090:5:31", "typeDescriptions": {"typeIdentifier": "t_rational_18446744073709551616_by_1", "typeString": "int_const 18446744073709551616"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int128", "typeString": "int128"}, {"typeIdentifier": "t_rational_18446744073709551616_by_1", "typeString": "int_const 18446744073709551616"}], "expression": {"id": 7247, "name": "ABDKMath64x64", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43822, "src": "15062:13:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_ABDKMath64x64_$43822_$", "typeString": "type(library ABDKMath64x64)"}}, "id": 7248, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 41246, "src": "15062:17:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int128_$_t_int128_$returns$_t_int128_$", "typeString": "function (int128,int128) pure returns (int128)"}}, "id": 7253, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15062:34:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int128", "typeString": "int128"}, {"typeIdentifier": "t_int128", "typeString": "int128"}], "expression": {"id": 7244, "name": "ABDKMath64x64", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43822, "src": "15034:13:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_ABDKMath64x64_$43822_$", "typeString": "type(library ABDKMath64x64)"}}, "id": 7245, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 41537, "src": "15034:17:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int128_$_t_int128_$returns$_t_int128_$", "typeString": "function (int128,int128) pure returns (int128)"}}, "id": 7254, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15034:63:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "nodeType": "VariableDeclarationStatement", "src": "15014:83:31"}, {"expression": {"id": 7263, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7256, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7243, "src": "15152:10:31", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7259, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7243, "src": "15183:10:31", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, {"expression": {"id": 7260, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22246, "src": "15195:9:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$22246_$", "typeString": "type(library Constants)"}}, "id": 7261, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RATE_PRECISION_64x64", "nodeType": "MemberAccess", "referencedDeclaration": 22163, "src": "15195:30:31", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int128", "typeString": "int128"}, {"typeIdentifier": "t_int128", "typeString": "int128"}], "expression": {"id": 7257, "name": "ABDKMath64x64", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43822, "src": "15165:13:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_ABDKMath64x64_$43822_$", "typeString": "type(library ABDKMath64x64)"}}, "id": 7258, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 41318, "src": "15165:17:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int128_$_t_int128_$returns$_t_int128_$", "typeString": "function (int128,int128) pure returns (int128)"}}, "id": 7262, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15165:61:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "src": "15152:74:31", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "id": 7264, "nodeType": "ExpressionStatement", "src": "15152:74:31"}, {"expression": {"arguments": [{"id": 7267, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7243, "src": "15264:10:31", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int128", "typeString": "int128"}], "expression": {"id": 7265, "name": "ABDKMath64x64", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43822, "src": "15244:13:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_ABDKMath64x64_$43822_$", "typeString": "type(library ABDKMath64x64)"}}, "id": 7266, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "toInt", "nodeType": "MemberAccess", "referencedDeclaration": 41121, "src": "15244:19:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int128_$returns$_t_int64_$", "typeString": "function (int128) pure returns (int64)"}}, "id": 7268, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15244:31:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int64", "typeString": "int64"}}, "functionReturnParameters": 7195, "id": 7269, "nodeType": "Return", "src": "15237:38:31"}]}, "documentation": {"id": 7183, "nodeType": "StructuredDocumentation", "src": "13358:651:31", "text": "@notice Calculates a market proportion via the implied rate. The formula is:\n    exchangeRate = e ^ (impliedRate * timeToMaturity)\n    exchangeRate = (1 / rateScalar) * ln(proportion / (1 - proportion)) + rateAnchor\n    proportion / (1 - proportion) = e^((exchangeRate - rateAnchor) * rateScalar)\n    exp = e^((exchangeRate - rateAnchor) * rateScalar)\n    proportion / (1 - proportion) = exp\n    exp * (1 - proportion) = proportion\n    exp - exp * proportion = proportion\n    exp = proportion + exp * proportion\n    exp = proportion * (1 + exp)\n    proportion = exp / (1 + exp)"}, "id": 7271, "implemented": true, "kind": "function", "modifiers": [], "name": "_getProportionFromOracleRate", "nodeType": "FunctionDefinition", "parameters": {"id": 7192, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7185, "mutability": "mutable", "name": "oracleRate", "nodeType": "VariableDeclaration", "scope": 7271, "src": "14061:18:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7184, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "14061:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 7187, "mutability": "mutable", "name": "timeToMaturity", "nodeType": "VariableDeclaration", "scope": 7271, "src": "14089:22:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7186, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "14089:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 7189, "mutability": "mutable", "name": "rateScalar", "nodeType": "VariableDeclaration", "scope": 7271, "src": "14121:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7188, "name": "int256", "nodeType": "ElementaryTypeName", "src": "14121:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 7191, "mutability": "mutable", "name": "annualizedAnchorRate", "nodeType": "VariableDeclaration", "scope": 7271, "src": "14148:28:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7190, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "14148:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "14051:131:31"}, "returnParameters": {"id": 7195, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7194, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 7271, "src": "14205:6:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7193, "name": "int256", "nodeType": "ElementaryTypeName", "src": "14205:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "14204:8:31"}, "scope": 8074, "src": "14014:1268:31", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 7308, "nodeType": "Block", "src": "15984:339:31", "statements": [{"assignments": [7288], "declarations": [{"constant": false, "id": 7288, "mutability": "mutable", "name": "rateAnchor", "nodeType": "VariableDeclaration", "scope": 7308, "src": "15994:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7287, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15994:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7294, "initialValue": {"arguments": [{"id": 7291, "name": "annualizedAnchorRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7280, "src": "16052:20:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7292, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7282, "src": "16074:14:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7289, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 33905, "src": "16014:6:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Market_$33905_$", "typeString": "type(library Market)"}}, "id": 7290, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getExchangeRateFromImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 32883, "src": "16014:37:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (uint256,uint256) pure returns (int256)"}}, "id": 7293, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16014:75:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "15994:95:31"}, {"assignments": [7296], "declarations": [{"constant": false, "id": 7296, "mutability": "mutable", "name": "oracleRate", "nodeType": "VariableDeclaration", "scope": 7308, "src": "16099:18:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7295, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16099:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7305, "initialValue": {"arguments": [{"id": 7299, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7274, "src": "16155:11:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7300, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7276, "src": "16180:22:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7301, "name": "rateScalar", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7278, "src": "16216:10:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7302, "name": "rateAnchor", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7288, "src": "16240:10:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7303, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7282, "src": "16264:14:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7297, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 33905, "src": "16120:6:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Market_$33905_$", "typeString": "type(library Market)"}}, "id": 7298, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 32828, "src": "16120:21:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$_t_int256_$_t_int256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (int256,int256,int256,int256,uint256) pure returns (uint256)"}}, "id": 7304, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16120:168:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "16099:189:31"}, {"expression": {"id": 7306, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7296, "src": "16306:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 7286, "id": 7307, "nodeType": "Return", "src": "16299:17:31"}]}, "documentation": {"id": 7272, "nodeType": "StructuredDocumentation", "src": "15288:459:31", "text": "@dev Returns the oracle rate given the market ratios of fCash to cash. The annualizedAnchorRate\n is used to calculate a rate anchor. Since a rate anchor varies with timeToMaturity and annualizedAnchorRate\n does not, this method will return consistent values regardless of the timeToMaturity of when initialize\n markets is called. This can be helpful if a currency needs to be initialized mid quarter when it is\n newly launched."}, "id": 7309, "implemented": true, "kind": "function", "modifiers": [], "name": "_calculateOracleRate", "nodeType": "FunctionDefinition", "parameters": {"id": 7283, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7274, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 7309, "src": "15791:18:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7273, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15791:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 7276, "mutability": "mutable", "name": "underlyingCashToMarket", "nodeType": "VariableDeclaration", "scope": 7309, "src": "15819:29:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7275, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15819:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 7278, "mutability": "mutable", "name": "rateScalar", "nodeType": "VariableDeclaration", "scope": 7309, "src": "15858:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7277, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15858:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 7280, "mutability": "mutable", "name": "annualizedAnchorRate", "nodeType": "VariableDeclaration", "scope": 7309, "src": "15885:28:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7279, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "15885:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 7282, "mutability": "mutable", "name": "timeToMaturity", "nodeType": "VariableDeclaration", "scope": 7309, "src": "15923:22:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7281, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "15923:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "15781:170:31"}, "returnParameters": {"id": 7286, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7285, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 7309, "src": "15975:7:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7284, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "15975:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "15974:9:31"}, "scope": 8074, "src": "15752:571:31", "stateMutability": "pure", "virtual": false, "visibility": "internal"}, {"body": {"id": 7396, "nodeType": "Block", "src": "16801:1347:31", "statements": [{"assignments": [7322], "declarations": [{"constant": false, "id": 7322, "mutability": "mutable", "name": "longMaturity", "nodeType": "VariableDeclaration", "scope": 7396, "src": "16811:20:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7321, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16811:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7325, "initialValue": {"expression": {"id": 7323, "name": "longMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7316, "src": "16834:10:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7324, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 56624, "src": "16834:19:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "16811:42:31"}, {"assignments": [7327], "declarations": [{"constant": false, "id": 7327, "mutability": "mutable", "name": "longRate", "nodeType": "VariableDeclaration", "scope": 7396, "src": "16863:16:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7326, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16863:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7330, "initialValue": {"expression": {"id": 7328, "name": "longMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7316, "src": "16882:10:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7329, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 56634, "src": "16882:21:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "16863:40:31"}, {"assignments": [7332], "declarations": [{"constant": false, "id": 7332, "mutability": "mutable", "name": "newMaturity", "nodeType": "VariableDeclaration", "scope": 7396, "src": "16974:19:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7331, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16974:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7338, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7337, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 7333, "name": "longMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7316, "src": "16996:10:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7334, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 56624, "src": "16996:19:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"expression": {"id": 7335, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22246, "src": "17018:9:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$22246_$", "typeString": "type(library Constants)"}}, "id": 7336, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 22094, "src": "17018:17:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "16996:39:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "16974:61:31"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7342, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7340, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7312, "src": "17053:13:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"id": 7341, "name": "longMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7322, "src": "17069:12:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17053:28:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "494d3a20696e746572706f6c6174696f6e206572726f72", "id": 7343, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "17083:25:31", "typeDescriptions": {"typeIdentifier": "t_stringliteral_6a0dd34aedecaa1e1d26490a08433b07ec30bfee75ad530560f22fe0683a486f", "typeString": "literal_string \"IM: interpolation error\""}, "value": "IM: interpolation error"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_6a0dd34aedecaa1e1d26490a08433b07ec30bfee75ad530560f22fe0683a486f", "typeString": "literal_string \"IM: interpolation error\""}], "id": 7339, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "17045:7:31", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7344, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17045:64:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7345, "nodeType": "ExpressionStatement", "src": "17045:64:31"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7348, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7346, "name": "longRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7327, "src": "17290:8:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"id": 7347, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7314, "src": "17302:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17290:21:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 7394, "nodeType": "Block", "src": "17586:556:31", "statements": [{"assignments": [7369], "declarations": [{"constant": false, "id": 7369, "mutability": "mutable", "name": "diff", "nodeType": "VariableDeclaration", "scope": 7394, "src": "17760:12:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7368, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "17760:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7384, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7382, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7380, "name": "longMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7322, "src": "17945:12:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 7381, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7312, "src": "17960:13:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17945:28:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7377, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7375, "name": "newMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7332, "src": "17839:11:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 7376, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7312, "src": "17853:13:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17839:27:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7372, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7370, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7314, "src": "17792:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 7371, "name": "longRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7327, "src": "17804:8:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17792:20:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 7373, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "17791:22:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7374, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 55873, "src": "17791:47:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 7378, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17791:76:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7379, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 55895, "src": "17791:153:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 7383, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17791:183:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "17760:214:31"}, {"expression": {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7387, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7385, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7314, "src": "18092:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 7386, "name": "diff", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7369, "src": "18104:4:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "18092:16:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseExpression": {"hexValue": "30", "id": 7391, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "18130:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "id": 7392, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "Conditional", "src": "18092:39:31", "trueExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7390, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7388, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7314, "src": "18111:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 7389, "name": "diff", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7369, "src": "18123:4:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "18111:16:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 7320, "id": 7393, "nodeType": "Return", "src": "18085:46:31"}]}, "id": 7395, "nodeType": "IfStatement", "src": "17286:856:31", "trueBody": {"id": 7367, "nodeType": "Block", "src": "17313:267:31", "statements": [{"expression": {"arguments": [{"id": 7364, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7314, "src": "17559:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7361, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7359, "name": "longMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7322, "src": "17504:12:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 7360, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7312, "src": "17519:13:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17504:28:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7356, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7354, "name": "newMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7332, "src": "17398:11:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 7355, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7312, "src": "17412:13:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17398:27:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7351, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7349, "name": "longRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7327, "src": "17351:8:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 7350, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7314, "src": "17362:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17351:20:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 7352, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "17350:22:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7353, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 55873, "src": "17350:47:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 7357, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17350:76:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7358, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 55895, "src": "17350:153:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 7362, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17350:183:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7363, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 55817, "src": "17350:208:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 7365, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17350:219:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 7320, "id": 7366, "nodeType": "Return", "src": "17327:242:31"}]}}]}, "documentation": {"id": 7310, "nodeType": "StructuredDocumentation", "src": "16329:296:31", "text": "@notice Returns the linear interpolation between two market rates. The formula is\n slope = (longMarket.oracleRate - shortMarket.oracleRate) / (longMarket.maturity - shortMarket.maturity)\n interpolatedRate = slope * (assetMaturity - shortMarket.maturity) + shortMarket.oracleRate"}, "id": 7397, "implemented": true, "kind": "function", "modifiers": [], "name": "_interpolateFutureRate", "nodeType": "FunctionDefinition", "parameters": {"id": 7317, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7312, "mutability": "mutable", "name": "shortMaturity", "nodeType": "VariableDeclaration", "scope": 7397, "src": "16671:21:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7311, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16671:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 7314, "mutability": "mutable", "name": "shortRate", "nodeType": "VariableDeclaration", "scope": 7397, "src": "16702:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7313, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16702:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 7316, "mutability": "mutable", "name": "longMarket", "nodeType": "VariableDeclaration", "scope": 7397, "src": "16729:34:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 7315, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56637, "src": "16729:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "src": "16661:108:31"}, "returnParameters": {"id": 7320, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7319, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 7397, "src": "16792:7:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7318, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16792:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "16791:9:31"}, "scope": 8074, "src": "16630:1518:31", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 7457, "nodeType": "Block", "src": "18440:766:31", "statements": [{"assignments": [7414], "declarations": [{"constant": false, "id": 7414, "mutability": "mutable", "name": "assetCashToMarket", "nodeType": "VariableDeclaration", "scope": 7457, "src": "18534:24:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7413, "name": "int256", "nodeType": "ElementaryTypeName", "src": "18534:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7423, "initialValue": {"arguments": [{"expression": {"id": 7420, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22246, "src": "18617:9:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$22246_$", "typeString": "type(library Constants)"}}, "id": 7421, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "DEPOSIT_PERCENT_BASIS", "nodeType": "MemberAccess", "referencedDeclaration": 22212, "src": "18617:31:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"arguments": [{"id": 7417, "name": "depositShare", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7402, "src": "18599:12:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 7415, "name": "netAssetCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7400, "src": "18573:21:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7416, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 44295, "src": "18573:25:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7418, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18573:39:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7419, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 44325, "src": "18573:43:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7422, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18573:76:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "18534:115:31"}, {"expression": {"id": 7428, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7424, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7406, "src": "18659:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7426, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalAssetCash", "nodeType": "MemberAccess", "referencedDeclaration": 56628, "src": "18659:24:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 7427, "name": "assetCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7414, "src": "18686:17:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "18659:44:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7429, "nodeType": "ExpressionStatement", "src": "18659:44:31"}, {"expression": {"id": 7434, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7430, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7406, "src": "18713:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7432, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalLiquidity", "nodeType": "MemberAccess", "referencedDeclaration": 56630, "src": "18713:24:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 7433, "name": "assetCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7414, "src": "18740:17:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "18713:44:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7435, "nodeType": "ExpressionStatement", "src": "18713:44:31"}, {"expression": {"arguments": [{"expression": {"expression": {"id": 7441, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7408, "src": "18890:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7442, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 56514, "src": "18890:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$56607_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7443, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 56600, "src": "18890:27:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 7444, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7406, "src": "18931:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7445, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 56624, "src": "18931:18:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7446, "name": "assetType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7404, "src": "18963:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7447, "name": "assetCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7414, "src": "19024:17:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 7436, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7408, "src": "18846:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7439, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 56516, "src": "18846:21:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$56561_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 7440, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "addAsset", "nodeType": "MemberAccess", "referencedDeclaration": 36813, "src": "18846:30:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PortfolioState_$56561_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$returns$__$bound_to$_t_struct$_PortfolioState_$56561_memory_ptr_$", "typeString": "function (struct PortfolioState memory,uint256,uint256,uint256,int256) pure"}}, "id": 7448, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18846:205:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7449, "nodeType": "ExpressionStatement", "src": "18846:205:31"}, {"expression": {"arguments": [{"id": 7454, "name": "assetCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7414, "src": "19181:17:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"expression": {"id": 7450, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7408, "src": "19134:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7451, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 56514, "src": "19134:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$56607_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7452, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "assetRate", "nodeType": "MemberAccess", "referencedDeclaration": 56604, "src": "19134:26:31", "typeDescriptions": {"typeIdentifier": "t_struct$_AssetRateParameters_$56598_memory_ptr", "typeString": "struct AssetRateParameters memory"}}, "id": 7453, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertToUnderlying", "nodeType": "MemberAccess", "referencedDeclaration": 29550, "src": "19134:46:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_AssetRateParameters_$56598_memory_ptr_$_t_int256_$returns$_t_int256_$bound_to$_t_struct$_AssetRateParameters_$56598_memory_ptr_$", "typeString": "function (struct AssetRateParameters memory,int256) pure returns (int256)"}}, "id": 7455, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19134:65:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 7412, "id": 7456, "nodeType": "Return", "src": "19127:72:31"}]}, "documentation": {"id": 7398, "nodeType": "StructuredDocumentation", "src": "18154:40:31", "text": "@dev This is here to clear the stack"}, "id": 7458, "implemented": true, "kind": "function", "modifiers": [], "name": "_setLiquidityAmount", "nodeType": "FunctionDefinition", "parameters": {"id": 7409, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7400, "mutability": "mutable", "name": "netAssetCashAvailable", "nodeType": "VariableDeclaration", "scope": 7458, "src": "18237:28:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7399, "name": "int256", "nodeType": "ElementaryTypeName", "src": "18237:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 7402, "mutability": "mutable", "name": "depositShare", "nodeType": "VariableDeclaration", "scope": 7458, "src": "18275:19:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7401, "name": "int256", "nodeType": "ElementaryTypeName", "src": "18275:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 7404, "mutability": "mutable", "name": "assetType", "nodeType": "VariableDeclaration", "scope": 7458, "src": "18304:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7403, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "18304:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 7406, "mutability": "mutable", "name": "newMarket", "nodeType": "VariableDeclaration", "scope": 7458, "src": "18331:33:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 7405, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56637, "src": "18331:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 7408, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 7458, "src": "18374:29:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 7407, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56527, "src": "18374:15:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}], "src": "18227:182:31"}, "returnParameters": {"id": 7412, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7411, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 7458, "src": "18432:6:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7410, "name": "int256", "nodeType": "ElementaryTypeName", "src": "18432:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "18431:8:31"}, "scope": 8074, "src": "18199:1007:31", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 7480, "nodeType": "Block", "src": "19793:134:31", "statements": [{"expression": {"arguments": [{"arguments": [{"id": 7476, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7463, "src": "19908:10:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 7473, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22246, "src": "19879:9:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$22246_$", "typeString": "type(library Constants)"}}, "id": 7474, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RATE_PRECISION", "nodeType": "MemberAccess", "referencedDeclaration": 22137, "src": "19879:24:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7475, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 44351, "src": "19879:28:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7477, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19879:40:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"arguments": [{"id": 7470, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7463, "src": "19850:10:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 7468, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7461, "src": "19810:22:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7469, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 44295, "src": "19810:39:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7471, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19810:51:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7472, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 44325, "src": "19810:68:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7478, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19810:110:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 7467, "id": 7479, "nodeType": "Return", "src": "19803:117:31"}]}, "documentation": {"id": 7459, "nodeType": "StructuredDocumentation", "src": "19212:70:31", "text": "@notice Calculates the fCash amount given the cash and proportion:"}, "id": 7481, "implemented": true, "kind": "function", "modifiers": [], "name": "_calculatefCashAmountFromProportion", "nodeType": "FunctionDefinition", "parameters": {"id": 7464, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7461, "mutability": "mutable", "name": "underlyingCashToMarket", "nodeType": "VariableDeclaration", "scope": 7481, "src": "19700:29:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7460, "name": "int256", "nodeType": "ElementaryTypeName", "src": "19700:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 7463, "mutability": "mutable", "name": "proportion", "nodeType": "VariableDeclaration", "scope": 7481, "src": "19739:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7462, "name": "int256", "nodeType": "ElementaryTypeName", "src": "19739:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "19690:72:31"}, "returnParameters": {"id": 7467, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7466, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 7481, "src": "19785:6:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7465, "name": "int256", "nodeType": "ElementaryTypeName", "src": "19785:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "19784:8:31"}, "scope": 8074, "src": "19646:281:31", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 7596, "nodeType": "Block", "src": "20311:1542:31", "statements": [{"assignments": [7488], "declarations": [{"constant": false, "id": 7488, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 7596, "src": "20321:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7487, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "20321:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7491, "initialValue": {"expression": {"id": 7489, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "20341:5:31", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 7490, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "20341:15:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "20321:35:31"}, {"assignments": [7493], "declarations": [{"constant": false, "id": 7493, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 7596, "src": "20366:29:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 7492, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56527, "src": "20366:15:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}], "id": 7494, "nodeType": "VariableDeclarationStatement", "src": "20366:29:31"}, {"expression": {"arguments": [{"id": 7498, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7484, "src": "20440:10:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 7495, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7493, "src": "20405:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7497, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadNTokenPortfolioStateful", "nodeType": "MemberAccess", "referencedDeclaration": 35452, "src": "20405:34:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$56527_memory_ptr_$_t_uint16_$returns$__$bound_to$_t_struct$_nTokenPortfolio_$56527_memory_ptr_$", "typeString": "function (struct nTokenPortfolio memory,uint16)"}}, "id": 7499, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20405:46:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7500, "nodeType": "ExpressionStatement", "src": "20405:46:31"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7507, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"expression": {"expression": {"id": 7502, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7493, "src": "20469:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7503, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 56516, "src": "20469:21:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$56561_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 7504, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 56553, "src": "20469:34:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$56620_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 7505, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "20469:41:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 7506, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "20513:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "20469:45:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "4e6f206e546f6b656e20617373657473", "id": 7508, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "20516:18:31", "typeDescriptions": {"typeIdentifier": "t_stringliteral_3f454b94fcbc66ce724be53e6bee2bef2feb299f8e10b25dd5701c1f07cf7e69", "typeString": "literal_string \"No nToken assets\""}, "value": "No nToken assets"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_3f454b94fcbc66ce724be53e6bee2bef2feb299f8e10b25dd5701c1f07cf7e69", "typeString": "literal_string \"No nToken assets\""}], "id": 7501, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "20461:7:31", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7509, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20461:74:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7510, "nodeType": "ExpressionStatement", "src": "20461:74:31"}, {"assignments": [7512], "declarations": [{"constant": false, "id": 7512, "mutability": "mutable", "name": "referenceTime", "nodeType": "VariableDeclaration", "scope": 7596, "src": "20613:21:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7511, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "20613:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7517, "initialValue": {"arguments": [{"id": 7515, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7488, "src": "20663:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7513, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 31991, "src": "20637:8:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$31991_$", "typeString": "type(library DateTime)"}}, "id": 7514, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 31384, "src": "20637:25:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 7516, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20637:36:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "20613:60:31"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7522, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 7519, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7493, "src": "20691:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7520, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 56522, "src": "20691:26:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"id": 7521, "name": "referenceTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7512, "src": "20721:13:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "20691:43:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "4d75737420696e697469616c697a65206d61726b657473", "id": 7523, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "20736:25:31", "typeDescriptions": {"typeIdentifier": "t_stringliteral_2d3ce58f5f1882899a483daf0da39579536f02aba47b3d464458c1db805c3796", "typeString": "literal_string \"Must initialize markets\""}, "value": "Must initialize markets"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_2d3ce58f5f1882899a483daf0da39579536f02aba47b3d464458c1db805c3796", "typeString": "literal_string \"Must initialize markets\""}], "id": 7518, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "20683:7:31", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7524, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20683:79:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7525, "nodeType": "ExpressionStatement", "src": "20683:79:31"}, {"assignments": [7527], "declarations": [{"constant": false, "id": 7527, "mutability": "mutable", "name": "minSweepCashTime", "nodeType": "VariableDeclaration", "scope": 7596, "src": "20848:24:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7526, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "20848:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7545, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7543, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"arguments": [{"baseExpression": {"expression": {"id": 7535, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7493, "src": "20949:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7536, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "parameters", "nodeType": "MemberAccess", "referencedDeclaration": 56524, "src": "20949:17:31", "typeDescriptions": {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}}, "id": 7539, "indexExpression": {"expression": {"id": 7537, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22246, "src": "20967:9:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$22246_$", "typeString": "type(library Constants)"}}, "id": 7538, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RESIDUAL_PURCHASE_TIME_BUFFER", "nodeType": "MemberAccess", "referencedDeclaration": 22221, "src": "20967:39:31", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "20949:58:31", "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 7534, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "20943:5:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 7533, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "20943:5:31", "typeDescriptions": {}}}, "id": 7540, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20943:65:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 7532, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "20935:7:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 7531, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "20935:7:31", "typeDescriptions": {}}}, "id": 7541, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20935:74:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"hexValue": "31", "id": 7542, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "21012:7:31", "subdenomination": "hours", "typeDescriptions": {"typeIdentifier": "t_rational_3600_by_1", "typeString": "int_const 3600"}, "value": "1"}, "src": "20935:84:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 7528, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7493, "src": "20887:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7529, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 56522, "src": "20887:26:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7530, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 55817, "src": "20887:30:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 7544, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20887:146:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "20848:185:31"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7549, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7547, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7488, "src": "21051:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 7548, "name": "minSweepCashTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7527, "src": "21063:16:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "21051:28:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "496e76616c696420737765657020636173682074696d65", "id": 7550, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "21081:25:31", "typeDescriptions": {"typeIdentifier": "t_stringliteral_0da3c3ff12aa49d5aa15cc95f721ced561aef8adc1df935610ef80f728c1bff6", "typeString": "literal_string \"Invalid sweep cash time\""}, "value": "Invalid sweep cash time"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_0da3c3ff12aa49d5aa15cc95f721ced561aef8adc1df935610ef80f728c1bff6", "typeString": "literal_string \"Invalid sweep cash time\""}], "id": 7546, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "21043:7:31", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7551, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21043:64:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7552, "nodeType": "ExpressionStatement", "src": "21043:64:31"}, {"assignments": [7554], "declarations": [{"constant": false, "id": 7554, "mutability": "mutable", "name": "assetCashWithholding", "nodeType": "VariableDeclaration", "scope": 7596, "src": "21118:27:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7553, "name": "int256", "nodeType": "ElementaryTypeName", "src": "21118:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7564, "initialValue": {"arguments": [{"id": 7556, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7493, "src": "21212:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"arguments": [{"hexValue": "30", "id": 7560, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "21259:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}], "id": 7559, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "21236:22:31", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (struct MarketParameters memory[] memory)"}, "typeName": {"baseType": {"id": 7557, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56637, "src": "21240:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 7558, "nodeType": "ArrayTypeName", "src": "21240:18:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}}, "id": 7561, "isConstant": false, "isLValue": false, "isPure": true, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21236:25:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"id": 7562, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7488, "src": "21335:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7555, "name": "_getNTokenNegativefCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7049, "src": "21160:34:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_nTokenPortfolio_$56527_memory_ptr_$_t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr_$_t_uint256_$returns$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,struct MarketParameters memory[] memory,uint256) view returns (int256)"}}, "id": 7563, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21160:198:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "21118:240:31"}, {"assignments": [7566], "declarations": [{"constant": false, "id": 7566, "mutability": "mutable", "name": "cashIntoMarkets", "nodeType": "VariableDeclaration", "scope": 7596, "src": "21369:22:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7565, "name": "int256", "nodeType": "ElementaryTypeName", "src": "21369:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7572, "initialValue": {"arguments": [{"id": 7570, "name": "assetCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7554, "src": "21422:20:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 7567, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7493, "src": "21394:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7568, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 56520, "src": "21394:18:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7569, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subNoNeg", "nodeType": "MemberAccess", "referencedDeclaration": 44434, "src": "21394:27:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7571, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21394:49:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "21369:74:31"}, {"expression": {"arguments": [{"expression": {"id": 7576, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7493, "src": "21508:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7577, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 56526, "src": "21508:19:31", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"expression": {"id": 7578, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7493, "src": "21541:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7579, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 56514, "src": "21541:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$56607_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7580, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 56600, "src": "21541:27:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 7581, "name": "assetCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7554, "src": "21582:20:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 7573, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 24802, "src": "21453:14:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BalanceHandler_$24802_$", "typeString": "type(library BalanceHandler)"}}, "id": 7575, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBalanceStorageForNToken", "nodeType": "MemberAccess", "referencedDeclaration": 24364, "src": "21453:41:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_int256_$returns$__$", "typeString": "function (address,uint256,int256)"}}, "id": 7582, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21453:159:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7583, "nodeType": "ExpressionStatement", "src": "21453:159:31"}, {"expression": {"arguments": [{"id": 7587, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7484, "src": "21754:10:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 7588, "name": "cashIntoMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7566, "src": "21766:15:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 7584, "name": "nTokenMintAction", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12297, "src": "21726:16:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenMintAction_$12297_$", "typeString": "type(library nTokenMintAction)"}}, "id": 7586, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "nTokenMint", "nodeType": "MemberAccess", "referencedDeclaration": 11753, "src": "21726:27:31", "typeDescriptions": {"typeIdentifier": "t_function_delegatecall_nonpayable$_t_uint16_$_t_int256_$returns$_t_int256_$", "typeString": "function (uint16,int256) returns (int256)"}}, "id": 7589, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21726:56:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7590, "nodeType": "ExpressionStatement", "src": "21726:56:31"}, {"eventCall": {"arguments": [{"id": 7592, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7484, "src": "21818:10:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 7593, "name": "cashIntoMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7566, "src": "21830:15:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 7591, "name": "SweepCashIntoMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6584, "src": "21797:20:31", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_uint16_$_t_int256_$returns$__$", "typeString": "function (uint16,int256)"}}, "id": 7594, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21797:49:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7595, "nodeType": "EmitStatement", "src": "21792:54:31"}]}, "documentation": {"id": 7482, "nodeType": "StructuredDocumentation", "src": "19933:315:31", "text": "@notice Sweeps nToken cash balance into markets after accounting for cash withholding. Can be\n done after fCash residuals are purchased to ensure that markets have maximum liquidity.\n @param currencyId currency of markets to initialize\n @dev emit:CashSweepIntoMarkets\n @dev auth:none"}, "functionSelector": "bb6dd58e", "id": 7597, "implemented": true, "kind": "function", "modifiers": [], "name": "sweepCashIntoMarkets", "nodeType": "FunctionDefinition", "parameters": {"id": 7485, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7484, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 7597, "src": "20283:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 7483, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "20283:6:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}], "src": "20282:19:31"}, "returnParameters": {"id": 7486, "nodeType": "ParameterList", "parameters": [], "src": "20311:0:31"}, "scope": 8074, "src": "20253:1600:31", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 8016, "nodeType": "Block", "src": "22227:9788:31", "statements": [{"assignments": [7606], "declarations": [{"constant": false, "id": 7606, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 8016, "src": "22237:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7605, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "22237:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7609, "initialValue": {"expression": {"id": 7607, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "22257:5:31", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 7608, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "22257:15:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "22237:35:31"}, {"assignments": [7611], "declarations": [{"constant": false, "id": 7611, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 8016, "src": "22282:29:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 7610, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56527, "src": "22282:15:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}], "id": 7612, "nodeType": "VariableDeclarationStatement", "src": "22282:29:31"}, {"expression": {"arguments": [{"id": 7616, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7600, "src": "22356:10:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 7613, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "22321:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7615, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadNTokenPortfolioStateful", "nodeType": "MemberAccess", "referencedDeclaration": 35452, "src": "22321:34:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$56527_memory_ptr_$_t_uint16_$returns$__$bound_to$_t_struct$_nTokenPortfolio_$56527_memory_ptr_$", "typeString": "function (struct nTokenPortfolio memory,uint16)"}}, "id": 7617, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22321:46:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7618, "nodeType": "ExpressionStatement", "src": "22321:46:31"}, {"assignments": [7622], "declarations": [{"constant": false, "id": 7622, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 8016, "src": "22377:41:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 7620, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56637, "src": "22377:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 7621, "nodeType": "ArrayTypeName", "src": "22377:18:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}], "id": 7630, "initialValue": {"arguments": [{"expression": {"expression": {"id": 7626, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "22456:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7627, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 56514, "src": "22456:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$56607_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7628, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 56602, "src": "22456:31:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7625, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "22433:22:31", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (struct MarketParameters memory[] memory)"}, "typeName": {"baseType": {"id": 7623, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56637, "src": "22437:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 7624, "nodeType": "ArrayTypeName", "src": "22437:18:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}}, "id": 7629, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22433:55:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "22377:111:31"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7636, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"expression": {"id": 7632, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "22586:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7633, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 56514, "src": "22586:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$56607_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7634, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 56602, "src": "22586:31:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 7635, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "22621:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "22586:36:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "494d3a206e6f206d61726b65747320746f20696e6974", "id": 7637, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "22624:24:31", "typeDescriptions": {"typeIdentifier": "t_stringliteral_eced7728e7c12743e7eaef0993c325956a61b4ad601efe4693df3f1cccc9396b", "typeString": "literal_string \"IM: no markets to init\""}, "value": "IM: no markets to init"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_eced7728e7c12743e7eaef0993c325956a61b4ad601efe4693df3f1cccc9396b", "typeString": "literal_string \"IM: no markets to init\""}], "id": 7631, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "22578:7:31", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7638, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22578:71:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7639, "nodeType": "ExpressionStatement", "src": "22578:71:31"}, {"condition": {"id": 7640, "name": "isFirstInit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7602, "src": "22745:11:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 7652, "nodeType": "IfStatement", "src": "22741:119:31", "trueBody": {"id": 7651, "nodeType": "Block", "src": "22758:102:31", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7647, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"expression": {"expression": {"id": 7642, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "22780:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7643, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 56516, "src": "22780:21:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$56561_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 7644, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 56553, "src": "22780:34:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$56620_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 7645, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "22780:41:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 7646, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "22825:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "22780:46:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "494d3a206e6f7420666972737420696e6974", "id": 7648, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "22828:20:31", "typeDescriptions": {"typeIdentifier": "t_stringliteral_bbcaa2bde0172b9004792c3d4299c962eece96a494ac56d615b00b378fa74c56", "typeString": "literal_string \"IM: not first init\""}, "value": "IM: not first init"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_bbcaa2bde0172b9004792c3d4299c962eece96a494ac56d615b00b378fa74c56", "typeString": "literal_string \"IM: not first init\""}], "id": 7641, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "22772:7:31", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7649, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22772:77:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7650, "nodeType": "ExpressionStatement", "src": "22772:77:31"}]}}, {"assignments": [7654], "declarations": [{"constant": false, "id": 7654, "mutability": "mutable", "name": "netAssetCashAvailable", "nodeType": "VariableDeclaration", "scope": 8016, "src": "22870:28:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7653, "name": "int256", "nodeType": "ElementaryTypeName", "src": "22870:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7662, "initialValue": {"arguments": [{"id": 7656, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "22946:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 7657, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7622, "src": "22966:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"id": 7658, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7606, "src": "22995:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7659, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7600, "src": "23018:10:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 7660, "name": "isFirstInit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7602, "src": "23042:11:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 7655, "name": "_calculateNetAssetCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7136, "src": "22901:31:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$56527_memory_ptr_$_t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$_t_bool_$returns$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,struct MarketParameters memory[] memory,uint256,uint256,bool) returns (int256)"}}, "id": 7661, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22901:162:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "22870:193:31"}, {"assignments": [7664], "declarations": [{"constant": false, "id": 7664, "mutability": "mutable", "name": "parameters", "nodeType": "VariableDeclaration", "scope": 8016, "src": "23074:38:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}, "typeName": {"id": 7663, "name": "GovernanceParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 6597, "src": "23074:20:31", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_storage_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}}, "visibility": "internal"}], "id": 7671, "initialValue": {"arguments": [{"id": 7666, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7600, "src": "23152:10:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"expression": {"id": 7667, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "23164:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7668, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 56514, "src": "23164:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$56607_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7669, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 56602, "src": "23164:31:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7665, "name": "_getGovernanceParameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6638, "src": "23127:24:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_struct$_GovernanceParameters_$6597_memory_ptr_$", "typeString": "function (uint256,uint256) view returns (struct InitializeMarketsAction.GovernanceParameters memory)"}}, "id": 7670, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23127:69:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "nodeType": "VariableDeclarationStatement", "src": "23074:122:31"}, {"assignments": [7673], "declarations": [{"constant": false, "id": 7673, "mutability": "mutable", "name": "newMarket", "nodeType": "VariableDeclaration", "scope": 8016, "src": "23207:33:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 7672, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56637, "src": "23207:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "id": 7674, "nodeType": "VariableDeclarationStatement", "src": "23207:33:31"}, {"assignments": [7676], "declarations": [{"constant": false, "id": 7676, "mutability": "mutable", "name": "oracleRate", "nodeType": "VariableDeclaration", "scope": 8016, "src": "23303:18:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7675, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23303:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7677, "nodeType": "VariableDeclarationStatement", "src": "23303:18:31"}, {"body": {"id": 7978, "nodeType": "Block", "src": "23393:8005:31", "statements": [{"expression": {"id": 7705, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7690, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7673, "src": "23451:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7692, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 56624, "src": "23451:18:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7702, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7700, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "23555:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"hexValue": "31", "id": 7701, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "23559:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "23555:5:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7698, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 31991, "src": "23530:8:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$31991_$", "typeString": "type(library DateTime)"}}, "id": 7699, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getTradedMarket", "nodeType": "MemberAccess", "referencedDeclaration": 31480, "src": "23530:24:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 7703, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23530:31:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"id": 7695, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7606, "src": "23498:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7693, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 31991, "src": "23472:8:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$31991_$", "typeString": "type(library DateTime)"}}, "id": 7694, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 31384, "src": "23472:25:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 7696, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23472:36:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7697, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 55817, "src": "23472:40:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 7704, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23472:103:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "23451:124:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7706, "nodeType": "ExpressionStatement", "src": "23451:124:31"}, {"assignments": [7708], "declarations": [{"constant": false, "id": 7708, "mutability": "mutable", "name": "underlyingCashToMarket", "nodeType": "VariableDeclaration", "scope": 7978, "src": "23590:29:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7707, "name": "int256", "nodeType": "ElementaryTypeName", "src": "23590:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7722, "initialValue": {"arguments": [{"id": 7710, "name": "netAssetCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7654, "src": "23679:21:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"baseExpression": {"expression": {"id": 7711, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7664, "src": "23722:10:31", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 7712, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "depositShares", "nodeType": "MemberAccess", "referencedDeclaration": 6587, "src": "23722:24:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 7714, "indexExpression": {"id": 7713, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "23747:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "23722:27:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7718, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 7715, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22246, "src": "23771:9:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$22246_$", "typeString": "type(library Constants)"}}, "id": 7716, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "MIN_LIQUIDITY_TOKEN_INDEX", "nodeType": "MemberAccess", "referencedDeclaration": 22179, "src": "23771:35:31", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"id": 7717, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "23809:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "23771:39:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7719, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7673, "src": "23862:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 7720, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "23893:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}], "id": 7709, "name": "_setLiquidityAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7458, "src": "23638:19:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$_t_uint256_$_t_struct$_MarketParameters_$56637_memory_ptr_$_t_struct$_nTokenPortfolio_$56527_memory_ptr_$returns$_t_int256_$", "typeString": "function (int256,int256,uint256,struct MarketParameters memory,struct nTokenPortfolio memory) pure returns (int256)"}}, "id": 7721, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23638:279:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "23590:327:31"}, {"assignments": [7724], "declarations": [{"constant": false, "id": 7724, "mutability": "mutable", "name": "timeToMaturity", "nodeType": "VariableDeclaration", "scope": 7978, "src": "23932:22:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7723, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23932:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7730, "initialValue": {"arguments": [{"id": 7728, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7606, "src": "23980:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 7725, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7673, "src": "23957:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7726, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 56624, "src": "23957:18:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7727, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 55839, "src": "23957:22:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 7729, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23957:33:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "23932:58:31"}, {"assignments": [7732], "declarations": [{"constant": false, "id": 7732, "mutability": "mutable", "name": "rateScalar", "nodeType": "VariableDeclaration", "scope": 7978, "src": "24004:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7731, "name": "int256", "nodeType": "ElementaryTypeName", "src": "24004:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7741, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7738, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7736, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "24055:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"hexValue": "31", "id": 7737, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "24059:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "24055:5:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7739, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7724, "src": "24062:14:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 7733, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "24024:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7734, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 56514, "src": "24024:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$56607_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7735, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "getRateScalar", "nodeType": "MemberAccess", "referencedDeclaration": 30296, "src": "24024:30:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_CashGroupParameters_$56607_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_int256_$bound_to$_t_struct$_CashGroupParameters_$56607_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory,uint256,uint256) pure returns (int256)"}}, "id": 7740, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "24024:53:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "24004:73:31"}, {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 7772, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 7760, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 7752, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7742, "name": "isFirstInit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7602, "src": "24626:11:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 7750, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7745, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7743, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "24748:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "31", "id": 7744, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "24753:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "24748:6:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7749, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 7746, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7622, "src": "24758:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 7747, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "24758:22:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "32", "id": 7748, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "24784:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "src": "24758:27:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "24748:37:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 7751, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "24747:39:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "24626:160:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7758, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7753, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "24892:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"expression": {"expression": {"expression": {"id": 7754, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "24897:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7755, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 56516, "src": "24897:21:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$56561_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 7756, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 56553, "src": "24897:34:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$56620_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 7757, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "24897:41:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "24892:46:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 7759, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "24891:48:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "24626:313:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 7770, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7763, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7761, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "25072:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "31", "id": 7762, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "25077:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "25072:6:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7769, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"baseExpression": {"id": 7764, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7622, "src": "25082:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 7766, "indexExpression": {"hexValue": "32", "id": 7765, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "25098:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "25082:18:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7767, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 56634, "src": "25082:29:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 7768, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "25115:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "25082:34:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "25072:44:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 7771, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "25071:46:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "24626:491:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 7963, "nodeType": "Block", "src": "26075:5129:31", "statements": [{"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7818, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7816, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "26337:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 7817, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "26342:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "26337:6:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7829, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7827, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "26617:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "31", "id": 7828, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "26622:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "26617:6:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 7864, "nodeType": "Block", "src": "27327:1479:31", "statements": [{"assignments": [7842], "declarations": [{"constant": false, "id": 7842, "mutability": "mutable", "name": "shortMarketMaturity", "nodeType": "VariableDeclaration", "scope": 7864, "src": "28110:27:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7841, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "28110:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7853, "initialValue": {"arguments": [{"arguments": [{"id": 7850, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "28230:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7848, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 31991, "src": "28205:8:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$31991_$", "typeString": "type(library DateTime)"}}, "id": 7849, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getTradedMarket", "nodeType": "MemberAccess", "referencedDeclaration": 31480, "src": "28205:24:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 7851, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "28205:27:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"id": 7845, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7606, "src": "28190:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7843, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 31991, "src": "28164:8:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$31991_$", "typeString": "type(library DateTime)"}}, "id": 7844, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 31384, "src": "28164:25:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 7846, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "28164:36:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7847, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 55817, "src": "28164:40:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 7852, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "28164:69:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "28110:123:31"}, {"expression": {"id": 7862, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7854, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7676, "src": "28255:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7856, "name": "shortMarketMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7842, "src": "28316:19:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7857, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7676, "src": "28633:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"baseExpression": {"id": 7858, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7622, "src": "28747:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 7860, "indexExpression": {"id": 7859, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "28763:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "28747:18:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}], "id": 7855, "name": "_interpolateFutureRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7397, "src": "28268:22:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_struct$_MarketParameters_$56637_memory_ptr_$returns$_t_uint256_$", "typeString": "function (uint256,uint256,struct MarketParameters memory) pure returns (uint256)"}}, "id": 7861, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "28268:519:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "28255:532:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7863, "nodeType": "ExpressionStatement", "src": "28255:532:31"}]}, "id": 7865, "nodeType": "IfStatement", "src": "26613:2193:31", "trueBody": {"id": 7840, "nodeType": "Block", "src": "26625:696:31", "statements": [{"expression": {"id": 7838, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7830, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7676, "src": "27141:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7832, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7622, "src": "27203:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"arguments": [{"id": 7835, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7606, "src": "27270:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7833, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 31991, "src": "27244:8:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$31991_$", "typeString": "type(library DateTime)"}}, "id": 7834, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 31384, "src": "27244:25:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 7836, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27244:36:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7831, "name": "_getSixMonthImpliedRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7182, "src": "27154:23:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (struct MarketParameters memory[] memory,uint256) pure returns (uint256)"}}, "id": 7837, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27154:148:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "27141:161:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7839, "nodeType": "ExpressionStatement", "src": "27141:161:31"}]}}, "id": 7866, "nodeType": "IfStatement", "src": "26333:2473:31", "trueBody": {"id": 7826, "nodeType": "Block", "src": "26345:262:31", "statements": [{"expression": {"id": 7824, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7819, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7676, "src": "26546:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"baseExpression": {"id": 7820, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7622, "src": "26559:15:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$56637_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 7822, "indexExpression": {"hexValue": "31", "id": 7821, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "26575:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "26559:18:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7823, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 56634, "src": "26559:29:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "26546:42:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7825, "nodeType": "ExpressionStatement", "src": "26546:42:31"}]}}, {"assignments": [7868], "declarations": [{"constant": false, "id": 7868, "mutability": "mutable", "name": "proportion", "nodeType": "VariableDeclaration", "scope": 7963, "src": "29120:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7867, "name": "int256", "nodeType": "ElementaryTypeName", "src": "29120:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7881, "initialValue": {"arguments": [{"id": 7870, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7676, "src": "29214:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7871, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7724, "src": "29250:14:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7872, "name": "rateScalar", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7732, "src": "29290:10:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"arguments": [{"baseExpression": {"expression": {"id": 7875, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7664, "src": "29334:10:31", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 7876, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "annualizedAnchorRates", "nodeType": "MemberAccess", "referencedDeclaration": 6593, "src": "29334:32:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 7878, "indexExpression": {"id": 7877, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "29367:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "29334:35:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 7874, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "29326:7:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 7873, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "29326:7:31", "typeDescriptions": {}}}, "id": 7879, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "29326:44:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7869, "name": "_getProportionFromOracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7271, "src": "29160:28:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_int256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (uint256,uint256,int256,uint256) pure returns (int256)"}}, "id": 7880, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "29160:264:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "29120:304:31"}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 7887, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7882, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7868, "src": "29912:10:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"baseExpression": {"expression": {"id": 7883, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7664, "src": "29925:10:31", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 7884, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "leverageThresholds", "nodeType": "MemberAccess", "referencedDeclaration": 6590, "src": "29925:29:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 7886, "indexExpression": {"id": 7885, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "29955:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "29925:32:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "29912:45:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 7938, "nodeType": "Block", "src": "30588:135:31", "statements": [{"expression": {"id": 7936, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7929, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7673, "src": "30610:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7931, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 56626, "src": "30610:20:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7933, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7708, "src": "30669:22:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7934, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7868, "src": "30693:10:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 7932, "name": "_calculatefCashAmountFromProportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7481, "src": "30633:35:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7935, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "30633:71:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "30610:94:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7937, "nodeType": "ExpressionStatement", "src": "30610:94:31"}]}, "id": 7939, "nodeType": "IfStatement", "src": "29908:815:31", "trueBody": {"id": 7928, "nodeType": "Block", "src": "29959:623:31", "statements": [{"expression": {"id": 7893, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7888, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7868, "src": "29981:10:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"baseExpression": {"expression": {"id": 7889, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7664, "src": "29994:10:31", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 7890, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "leverageThresholds", "nodeType": "MemberAccess", "referencedDeclaration": 6590, "src": "29994:29:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 7892, "indexExpression": {"id": 7891, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "30024:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "29994:32:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "29981:45:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7894, "nodeType": "ExpressionStatement", "src": "29981:45:31"}, {"expression": {"id": 7902, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7895, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7673, "src": "30048:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7897, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 56626, "src": "30048:20:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7899, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7708, "src": "30107:22:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7900, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7868, "src": "30131:10:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 7898, "name": "_calculatefCashAmountFromProportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7481, "src": "30071:35:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7901, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "30071:71:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "30048:94:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7903, "nodeType": "ExpressionStatement", "src": "30048:94:31"}, {"expression": {"id": 7919, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7904, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7676, "src": "30165:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"id": 7906, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7673, "src": "30224:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7907, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 56626, "src": "30224:20:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7908, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7708, "src": "30270:22:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7909, "name": "rateScalar", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7732, "src": "30318:10:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"arguments": [{"baseExpression": {"expression": {"id": 7912, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7664, "src": "30362:10:31", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 7913, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "annualizedAnchorRates", "nodeType": "MemberAccess", "referencedDeclaration": 6593, "src": "30362:32:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 7915, "indexExpression": {"id": 7914, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "30395:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "30362:35:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 7911, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "30354:7:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 7910, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "30354:7:31", "typeDescriptions": {}}}, "id": 7916, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "30354:44:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7917, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7724, "src": "30456:14:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7905, "name": "_calculateOracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7309, "src": "30178:20:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$_t_int256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (int256,int256,int256,uint256,uint256) pure returns (uint256)"}}, "id": 7918, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "30178:314:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "30165:327:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7920, "nodeType": "ExpressionStatement", "src": "30165:327:31"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7924, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7922, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7676, "src": "30523:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 7923, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "30537:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "30523:15:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "4f7261636c652072617465206f766572666c6f77", "id": 7925, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "30540:22:31", "typeDescriptions": {"typeIdentifier": "t_stringliteral_23d0a49e299abba1ef8dfb174e16735ce5b23ca44b6c0498417f6fe3d740d7b1", "typeString": "literal_string \"Oracle rate overflow\""}, "value": "Oracle rate overflow"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_23d0a49e299abba1ef8dfb174e16735ce5b23ca44b6c0498417f6fe3d740d7b1", "typeString": "literal_string \"Oracle rate overflow\""}], "id": 7921, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "30515:7:31", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7926, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "30515:48:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7927, "nodeType": "ExpressionStatement", "src": "30515:48:31"}]}}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 7943, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 7940, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7673, "src": "30933:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7941, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 56626, "src": "30933:20:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "31", "id": 7942, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "30956:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "30933:24:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 7950, "nodeType": "IfStatement", "src": "30929:54:31", "trueBody": {"expression": {"id": 7948, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7944, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7673, "src": "30959:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7946, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 56626, "src": "30959:20:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"hexValue": "31", "id": 7947, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "30982:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "30959:24:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7949, "nodeType": "ExpressionStatement", "src": "30959:24:31"}}, {"expression": {"id": 7955, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7951, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7673, "src": "31002:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7953, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 56634, "src": "31002:20:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 7954, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7676, "src": "31025:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "31002:33:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7956, "nodeType": "ExpressionStatement", "src": "31002:33:31"}, {"expression": {"id": 7961, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7957, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7673, "src": "31150:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7959, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "previousTradeTime", "nodeType": "MemberAccess", "referencedDeclaration": 56636, "src": "31150:27:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 7960, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7606, "src": "31180:9:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "31150:39:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7962, "nodeType": "ExpressionStatement", "src": "31150:39:31"}]}, "id": 7964, "nodeType": "IfStatement", "src": "24605:6599:31", "trueBody": {"id": 7815, "nodeType": "Block", "src": "25132:937:31", "statements": [{"assignments": [7774], "declarations": [{"constant": false, "id": 7774, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 7815, "src": "25360:18:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7773, "name": "int256", "nodeType": "ElementaryTypeName", "src": "25360:6:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7782, "initialValue": {"arguments": [{"id": 7776, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7708, "src": "25417:22:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"baseExpression": {"expression": {"id": 7777, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7664, "src": "25441:10:31", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 7778, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "proportions", "nodeType": "MemberAccess", "referencedDeclaration": 6596, "src": "25441:22:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 7780, "indexExpression": {"id": 7779, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "25464:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "25441:25:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 7775, "name": "_calculatefCashAmountFromProportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7481, "src": "25381:35:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7781, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25381:86:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "25360:107:31"}, {"expression": {"id": 7787, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7783, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7673, "src": "25486:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7785, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 56626, "src": "25486:20:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 7786, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7774, "src": "25509:11:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "25486:34:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7788, "nodeType": "ExpressionStatement", "src": "25486:34:31"}, {"expression": {"id": 7805, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7789, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7673, "src": "25538:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7791, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 56634, "src": "25538:20:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7793, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7774, "src": "25603:11:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7794, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7708, "src": "25636:22:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7795, "name": "rateScalar", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7732, "src": "25680:10:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"arguments": [{"baseExpression": {"expression": {"id": 7798, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7664, "src": "25720:10:31", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6597_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 7799, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "annualizedAnchorRates", "nodeType": "MemberAccess", "referencedDeclaration": 6593, "src": "25720:32:31", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 7801, "indexExpression": {"id": 7800, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "25753:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "25720:35:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 7797, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "25712:7:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 7796, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "25712:7:31", "typeDescriptions": {}}}, "id": 7802, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25712:44:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7803, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7724, "src": "25810:14:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7792, "name": "_calculateOracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7309, "src": "25561:20:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$_t_int256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (int256,int256,int256,uint256,uint256) pure returns (uint256)"}}, "id": 7804, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25561:281:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "25538:304:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7806, "nodeType": "ExpressionStatement", "src": "25538:304:31"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7811, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 7808, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7673, "src": "26002:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7809, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 56634, "src": "26002:20:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 7810, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "26025:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "26002:24:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "494d3a20696d706c6965642072617465206661696c6564", "id": 7812, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "26028:25:31", "typeDescriptions": {"typeIdentifier": "t_stringliteral_f67a3c8a35da69c45d1ed45fabcbc3676eda7020663e1b262f347036fe2c14e4", "typeString": "literal_string \"IM: implied rate failed\""}, "value": "IM: implied rate failed"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_f67a3c8a35da69c45d1ed45fabcbc3676eda7020663e1b262f347036fe2c14e4", "typeString": "literal_string \"IM: implied rate failed\""}], "id": 7807, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "25994:7:31", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7813, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25994:60:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7814, "nodeType": "ExpressionStatement", "src": "25994:60:31"}]}}, {"expression": {"id": 7970, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7965, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7673, "src": "31280:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7967, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "lastImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 56632, "src": "31280:25:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 7968, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7673, "src": "31308:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7969, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 56634, "src": "31308:20:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "31280:48:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7971, "nodeType": "ExpressionStatement", "src": "31280:48:31"}, {"expression": {"arguments": [{"id": 7973, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7673, "src": "31357:9:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 7974, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7600, "src": "31368:10:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 7975, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "31380:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}], "id": 7972, "name": "finalizeMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 8061, "src": "31342:14:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$56637_memory_ptr_$_t_uint256_$_t_struct$_nTokenPortfolio_$56527_memory_ptr_$returns$__$", "typeString": "function (struct MarketParameters memory,uint256,struct nTokenPortfolio memory)"}}, "id": 7976, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "31342:45:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7977, "nodeType": "ExpressionStatement", "src": "31342:45:31"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7686, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7682, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "23351:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"expression": {"id": 7683, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "23355:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7684, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 56514, "src": "23355:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$56607_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7685, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 56602, "src": "23355:31:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "23351:35:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 7979, "initializationExpression": {"assignments": [7679], "declarations": [{"constant": false, "id": 7679, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 7979, "src": "23336:9:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7678, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23336:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7681, "initialValue": {"hexValue": "30", "id": 7680, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "23348:1:31", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "23336:13:31"}, "loopExpression": {"expression": {"id": 7688, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "23388:3:31", "subExpression": {"id": 7687, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7679, "src": "23388:1:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7689, "nodeType": "ExpressionStatement", "src": "23388:3:31"}, "nodeType": "ForStatement", "src": "23331:8067:31"}, {"assignments": [null, null, 7981, null], "declarations": [null, null, {"constant": false, "id": 7981, "mutability": "mutable", "name": "assetArrayLength", "nodeType": "VariableDeclaration", "scope": 8016, "src": "31512:22:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}, "typeName": {"id": 7980, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "31512:5:31", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "visibility": "internal"}, null], "id": 7988, "initialValue": {"arguments": [{"expression": {"id": 7985, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "31615:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7986, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 56526, "src": "31615:19:31", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "expression": {"expression": {"id": 7982, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "31581:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7983, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 56516, "src": "31581:21:31", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$56561_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 7984, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storeAssets", "nodeType": "MemberAccess", "referencedDeclaration": 37124, "src": "31581:33:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_PortfolioState_$56561_memory_ptr_$_t_address_$returns$_t_bool_$_t_bytes32_$_t_uint8_$_t_uint40_$bound_to$_t_struct$_PortfolioState_$56561_memory_ptr_$", "typeString": "function (struct PortfolioState memory,address) returns (bool,bytes32,uint8,uint40)"}}, "id": 7987, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "31581:54:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_bool_$_t_bytes32_$_t_uint8_$_t_uint40_$", "typeString": "tuple(bool,bytes32,uint8,uint40)"}}, "nodeType": "VariableDeclarationStatement", "src": "31435:200:31"}, {"expression": {"arguments": [{"expression": {"id": 7992, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "31700:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7993, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 56526, "src": "31700:19:31", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 7994, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7600, "src": "31733:10:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 7995, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "31757:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7996, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 56520, "src": "31757:18:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 7989, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 24802, "src": "31645:14:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BalanceHandler_$24802_$", "typeString": "type(library BalanceHandler)"}}, "id": 7991, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBalanceStorageForNToken", "nodeType": "MemberAccess", "referencedDeclaration": 24364, "src": "31645:41:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_int256_$returns$__$", "typeString": "function (address,uint256,int256)"}}, "id": 7997, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "31645:140:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7998, "nodeType": "ExpressionStatement", "src": "31645:140:31"}, {"expression": {"arguments": [{"expression": {"id": 8002, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "31855:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 8003, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 56526, "src": "31855:19:31", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 8004, "name": "assetArrayLength", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7981, "src": "31888:16:31", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, {"expression": {"id": 8005, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7611, "src": "31918:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 8006, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 56522, "src": "31918:26:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint8", "typeString": "uint8"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7999, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 35501, "src": "31795:13:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$35501_$", "typeString": "type(library nTokenHandler)"}}, "id": 8001, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setArrayLengthAndInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 34906, "src": "31795:46:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint8_$_t_uint256_$returns$__$", "typeString": "function (address,uint8,uint256)"}}, "id": 8007, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "31795:159:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 8008, "nodeType": "ExpressionStatement", "src": "31795:159:31"}, {"eventCall": {"arguments": [{"arguments": [{"id": 8012, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7600, "src": "31996:10:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "id": 8011, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "31989:6:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint16_$", "typeString": "type(uint16)"}, "typeName": {"id": 8010, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "31989:6:31", "typeDescriptions": {}}}, "id": 8013, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "31989:18:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "id": 8009, "name": "MarketsInitialized", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6578, "src": "31970:18:31", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_uint16_$returns$__$", "typeString": "function (uint16)"}}, "id": 8014, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "31970:38:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 8015, "nodeType": "EmitStatement", "src": "31965:43:31"}]}, "documentation": {"id": 7598, "nodeType": "StructuredDocumentation", "src": "21859:290:31", "text": "@notice Initialize the market for a given currency id, done once a quarter\n @param currencyId currency of markets to initialize\n @param isFirstInit true if this is the first time the markets have been initialized\n @dev emit:MarketsInitialized\n @dev auth:none"}, "functionSelector": "d0e064c0", "id": 8017, "implemented": true, "kind": "function", "modifiers": [], "name": "initializeMarkets", "nodeType": "FunctionDefinition", "parameters": {"id": 7603, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7600, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 8017, "src": "22181:17:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 7599, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "22181:6:31", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 7602, "mutability": "mutable", "name": "isFirstInit", "nodeType": "VariableDeclaration", "scope": 8017, "src": "22200:16:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 7601, "name": "bool", "nodeType": "ElementaryTypeName", "src": "22200:4:31", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "src": "22180:37:31"}, "returnParameters": {"id": 7604, "nodeType": "ParameterList", "parameters": [], "src": "22227:0:31"}, "scope": 8074, "src": "22154:9861:31", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 8060, "nodeType": "Block", "src": "32167:452:31", "statements": [{"assignments": [8027], "declarations": [{"constant": false, "id": 8027, "mutability": "mutable", "name": "settlementDate", "nodeType": "VariableDeclaration", "scope": 8060, "src": "32233:22:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 8026, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "32233:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 8036, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 8035, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"expression": {"id": 8030, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "32284:5:31", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 8031, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "32284:15:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 8028, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 31991, "src": "32258:8:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$31991_$", "typeString": "type(library DateTime)"}}, "id": 8029, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 31384, "src": "32258:25:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 8032, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "32258:42:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"expression": {"id": 8033, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22246, "src": "32303:9:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$22246_$", "typeString": "type(library Constants)"}}, "id": 8034, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 22094, "src": "32303:17:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "32258:62:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "32233:87:31"}, {"expression": {"arguments": [{"id": 8040, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 8021, "src": "32367:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 8041, "name": "settlementDate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 8027, "src": "32379:14:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 8037, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 8019, "src": "32330:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 8039, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "setMarketStorageForInitialize", "nodeType": "MemberAccess", "referencedDeclaration": 33413, "src": "32330:36:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$56637_memory_ptr_$_t_uint256_$_t_uint256_$returns$__$bound_to$_t_struct$_MarketParameters_$56637_memory_ptr_$", "typeString": "function (struct MarketParameters memory,uint256,uint256)"}}, "id": 8042, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "32330:64:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 8043, "nodeType": "ExpressionStatement", "src": "32330:64:31"}, {"expression": {"arguments": [{"expression": {"id": 8047, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 8023, "src": "32453:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 8048, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 56526, "src": "32453:19:31", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 8049, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 8021, "src": "32486:10:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 8050, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 8019, "src": "32510:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 8051, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 56624, "src": "32510:15:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 8052, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 8023, "src": "32539:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 8053, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 56522, "src": "32539:26:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"arguments": [], "expression": {"argumentTypes": [], "expression": {"expression": {"id": 8054, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 8019, "src": "32579:6:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 8055, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 56626, "src": "32579:17:31", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 8056, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 44391, "src": "32579:21:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 8057, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "32579:23:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 8044, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 36492, "src": "32405:19:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$36492_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 8046, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "addifCashAsset", "nodeType": "MemberAccess", "referencedDeclaration": 36189, "src": "32405:34:31", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (address,uint256,uint256,uint256,int256) returns (int256)"}}, "id": 8058, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "32405:207:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 8059, "nodeType": "ExpressionStatement", "src": "32405:207:31"}]}, "id": 8061, "implemented": true, "kind": "function", "modifiers": [], "name": "finalizeMarket", "nodeType": "FunctionDefinition", "parameters": {"id": 8024, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 8019, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 8061, "src": "32054:30:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 8018, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56637, "src": "32054:16:31", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$56637_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 8021, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 8061, "src": "32094:18:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 8020, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "32094:7:31", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 8023, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 8061, "src": "32122:29:31", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 8022, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 56527, "src": "32122:15:31", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$56527_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}], "src": "32044:113:31"}, "returnParameters": {"id": 8025, "nodeType": "ParameterList", "parameters": [], "src": "32167:0:31"}, "scope": 8074, "src": "32021:598:31", "stateMutability": "nonpayable", "virtual": false, "visibility": "internal"}, {"body": {"id": 8072, "nodeType": "Block", "src": "32761:49:31", "statements": [{"expression": {"arguments": [{"id": 8069, "name": "nTokenMintAction", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12297, "src": "32786:16:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenMintAction_$12297_$", "typeString": "type(library nTokenMintAction)"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_type$_t_contract$_nTokenMintAction_$12297_$", "typeString": "type(library nTokenMintAction)"}], "id": 8068, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "32778:7:31", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": {"id": 8067, "name": "address", "nodeType": "ElementaryTypeName", "src": "32778:7:31", "typeDescriptions": {}}}, "id": 8070, "isConstant": false, "isLValue": false, "isPure": true, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "32778:25:31", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "functionReturnParameters": 8066, "id": 8071, "nodeType": "Return", "src": "32771:32:31"}]}, "documentation": {"id": 8062, "nodeType": "StructuredDocumentation", "src": "32625:77:31", "text": "@notice Get a list of deployed library addresses (sorted by library name)"}, "functionSelector": "c4c96dae", "id": 8073, "implemented": true, "kind": "function", "modifiers": [], "name": "getLibInfo", "nodeType": "FunctionDefinition", "parameters": {"id": 8063, "nodeType": "ParameterList", "parameters": [], "src": "32726:2:31"}, "returnParameters": {"id": 8066, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 8065, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 8073, "src": "32752:7:31", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 8064, "name": "address", "nodeType": "ElementaryTypeName", "src": "32752:7:31", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}], "src": "32751:9:31"}, "scope": 8074, "src": "32707:103:31", "stateMutability": "view", "virtual": false, "visibility": "external"}], "scope": 8075, "src": "1461:31351:31"}], "src": "41:32772:31"}, "compiler": {"version": "0.7.6+commit.7338295f", "evm_version": "istanbul", "optimizer": {"enabled": true, "runs": 200}}, "contractName": "InitializeMarketsAction", "deployedBytecode": "730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063bb6dd58e14610050578063c4c96dae14610072578063d0e064c014610090575b600080fd5b81801561005c57600080fd5b5061007061006b366004614f93565b6100b0565b005b61007a61029d565b6040516100879190614fe7565b60405180910390f35b81801561009c57600080fd5b506100706100ab366004614fad565b6102b5565b426100b9614dd8565b6100c38184610731565b602081015151516100ef5760405162461bcd60e51b81526004016100e69061514a565b60405180910390fd5b60006100fa8361074a565b905080826080015110156101205760405162461bcd60e51b81526004016100e690615090565b60a0820151608083015160009161013e919060021a610e100261076d565b905080841161015f5760405162461bcd60e51b81526004016100e690614ffb565b6040805160008082526020820190925261019d90859083610196565b610183614e21565b81526020019060019003908161017b5790505b50876107d0565b905060006101b882866060015161093090919063ffffffff16565b60c08601518651519192506101d19161ffff168461094c565b604051632128561360e11b815273__$892f367d396be2b92d3b049e6e62920984$__90634250ac269061020a908a90859060040161536d565b60206040518083038186803b15801561022257600080fd5b505af4158015610236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025a9190614f7b565b507f120b36bd1b47ae64f0f3ea6eb0fbfba209b2c780a31864e382d9957377a9f946878260405161028c92919061536d565b60405180910390a150505050505050565b73__$892f367d396be2b92d3b049e6e62920984$__90565b426102be614dd8565b6102c88185610731565b80516020015160009067ffffffffffffffff811180156102e757600080fd5b5060405190808252806020026020018201604052801561032157816020015b61030e614e21565b8152602001906001900390816103065790505b508251602001519091506103475760405162461bcd60e51b81526004016100e6906152e3565b83156103715760208201515151156103715760405162461bcd60e51b81526004016100e690615233565b60006103848383868961ffff168961096f565b9050600061039e8761ffff16856000015160200151610a01565b90506103a8614e21565b6000805b8651602001518110156106a1576103d76103c882600101610a3d565b6103d18a61074a565b9061076d565b60208401528351805160009161040a91889190859081106103f457fe5b602002602001015184600260ff1601878c610ae1565b905060006104258a8660200151610b4690919063ffffffff16565b895190915060009061043b906001860184610ba3565b90508b806104555750836001148015610455575088516002145b80610466575060208a015151518410155b80610494575083600114801561049457508860028151811061048457fe5b602002602001015160c001516000145b156105155760006104bc84896060015187815181106104af57fe5b6020026020010151610c15565b9050808760400181815250506104ec8185848b6040015189815181106104de57fe5b602002602001015187610c32565b60c0880181905261050f5760405162461bcd60e51b81526004016100e690615313565b5061067d565b8361053a578860018151811061052757fe5b602002602001015160c001519450610597565b836001141561055c57610555896105508d61074a565b610c5c565b9450610597565b600061057361056a86610a3d565b6103d18e61074a565b905061059381878c888151811061058657fe5b6020026020010151610cf5565b9550505b60006105bc8684848b6040015189815181106105af57fe5b6020026020010151610d8c565b9050876020015185815181106105ce57fe5b602002602001015181131561064857876020015185815181106105ed57fe5b602002602001015190506106018482610c15565b876040018181525050610624876040015185848b6040015189815181106104de57fe5b9550856106435760405162461bcd60e51b81526004016100e690615062565b610658565b6106528482610c15565b60408801525b60018760400151121561066d57600160408801525b5060c0860185905260e086018b90525b60c086015160a08701526106968661ffff8f168c610e2e565b5050506001016103ac565b5060006106bf8760c001518860200151610e7790919063ffffffff16565b50925050506106db8760c001518b61ffff16896060015161094c565b6106ee8760c001518289608001516110b6565b7fcffeff9accc9171f01fec36e09a1a06f0160ce50a8c4c0a2adff9cec562adf088a60405161071d919061535e565b60405180910390a150505050505050505050565b61073b8282611129565b610744816111cc565b90915250565b60006276a70082101561075c57600080fd5b6276a700825b06820390505b919050565b6000828201838110156107c7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000806107ed8560c0015186600001516000015161ffff166111ef565b60a0860151855191925060011a620f424002906000901561081a57610815856276a700610b46565b61081c565b845b9050600061082984611224565b90505b8015610912576000610842896080015183611249565b90508751600014801561086157508851602001516108619082896112fc565b1561088557610872858360006113a1565b945061087d85611224565b91505061082c565b60c089015189515160009161089e9161ffff16846113ec565b905060008112156108f25789516000906108b9908487611431565b9050808611156108cb575060006108d8565b6108d58187610b46565b90505b6108ee6108e783858c85611510565b8990611556565b9750505b6108fe868460006113a1565b955061090986611224565b9250505061082c565b875160400151610922908661156c565b9450505050505b9392505050565b600061093c8383611556565b905060008112156107ca57600080fd5b600081121561095a57600080fd5b61096a838383600080600061159d565b505050565b6000806000831561099457610983866116c8565b64ffffffffff1660808901526109b9565b61099e88876116e4565b6109aa85878a8a6117be565b6109b68888878961184e565b90505b60608801516109c89082610930565b6060890182905291506305f5e10082136109f45760405162461bcd60e51b81526004016100e690615204565b5090505b95945050505050565b610a09614e69565b610a11614e69565b610a1b84846118d7565b60208301528152610a2c848461190f565b606083015260408201529392505050565b60008160011415610a5257506276a700610768565b8160021415610a65575062ed4e00610768565b8160031415610a7957506301da9c00610768565b8160041415610a8d57506303b53800610768565b8160051415610aa157506309450c00610768565b8160061415610ab5575063128a1800610768565b8160071415610ac957506325143000610768565b60405162461bcd60e51b81526004016100e6906150f6565b600080610afc6305f5e100610af68989611939565b90611987565b606085018190526080850181905283515160208087015190860151929350610b2b929161ffff169088856119b8565b825160400151610b3b9082611ab5565b979650505050505050565b600082821115610b9d576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082600111158015610bba575083602001518311155b610bc357600080fd5b606084015160806008600019860102019060ff90821c16633b9aca00026000610bfc610bee86611ae0565b610af6846301da9c00611939565b905060008113610c0b57600080fd5b9695505050505050565b60006107c7610c28633b9aca0084611556565b610af68585611939565b600080610c3f8484611afa565b90506000610c508888888588611b65565b98975050505050505050565b6000600383511015610c805760405162461bcd60e51b81526004016100e69061511d565b6107c783600181518110610c9057fe5b60200260200101516020015184600281518110610ca957fe5b60200260200101516020015185600181518110610cc257fe5b602002602001015160c0015186600281518110610cdb57fe5b602090810291909101015160c0015162ed4e008701611c22565b602081015160c0820151600091906276a7008201828710610d285760405162461bcd60e51b81526004016100e69061519d565b858210610d5757610d4d866103d1898603610d478387038c8703611c80565b90611cd9565b9350505050610929565b6000610d6d888503610d47858a038b8603611c80565b9050808711610d7d576000610d81565b8087035b945050505050610929565b600080610d998386611afa565b90506000610da78787611afa565b90506000610dc7610dc287610dbc8587611556565b90611d40565b611d59565b9050610dd981621dcd6560491b611d8c565b9050610de481611ddf565b90506000610dff82610dfa84600160401b611e34565b611d8c565b9050610e1181621dcd6560491b611e67565b9050610e1c81611e9d565b60070b9450505050505b949350505050565b60006276a700610e3d4261074a565b019050610e4b848483611ea6565b610e708260c001518486602001518560800151610e6b8960400151611f0d565b611f1b565b5050505050565b6000808080808080805b895151811015610f085760008a600001518281518110610e9d57fe5b60200260200101519050600380811115610eb357fe5b8160a001516003811115610ec357fe5b1415610ece57600080fd5b60028160a001516003811115610ee057fe5b14158015610ef057506060810151155b15610eff57610eff8b83612085565b50600101610e81565b5060005b895151811015610fab5760008a600001518281518110610f2857fe5b6020026020010151905060026003811115610f3f57fe5b8160a001516003811115610f4f57fe5b1415610f6357608081015160009055610fa2565b60018160a001516003811115610f7557fe5b1415610f8e57608081015180610f8b83826121d5565b50505b610f9a818686866122fe565b919650945092505b50600101610f0c565b5060608901516000610fbb612361565b6001600160a01b038b1660009081526020829052604081209192505b8c60200151518110156110855760008d602001518281518110610ff657fe5b60200260200101519050806060015160001415611013575061107d565b60028160a00151600381111561102557fe5b14158015611043575060038160a00151600381111561104057fe5b14155b61104c57600080fd5b611058818989896122fe565b919950975095506110758184876010811061106f57fe5b016121d5565b600185019450505b600101610fd7565b506010831115801561109c575064ffffffffff8411155b6110a557600080fd5b50939a929950975095509350505050565b63ffffffff81106110c657600080fd5b60006110d061236e565b6001600160a01b039094166000908152602094909452506040909220805460ff909216600160501b0260ff60501b1963ffffffff909416600160301b0269ffffffff000000000000199093169290921792909216179055565b6111368161ffff1661237b565b6001600160a01b031660c0830181905260009081908190611156906123a1565b9450945094505050600061116d8660c0015161240a565b505060808701859052604087018190526001600160d81b0319831660a088015260c08701519091506111a19084600061246b565b602087015260c08601516111b99061ffff87166124fe565b5050506060909601959095525050505050565b6111d4614e91565b60006111e38361ffff166125a7565b905061092983826125f3565b6000806111fa612636565b6001600160a01b038516600090815260209182526040808220868352909252205491505092915050565b60008161123357506000610768565b61123c82612643565b60ff036001019050919050565b60008161125557600080fd5b61010082111561126457600080fd5b600061126f846116c8565b90506000605a841161128a57506201518083020190506107ca565b608784116112b2575060591983016207e900908102908206909103016276a7000190506107ca565b60c384116112db5750608619830162278d00908102908206909103016301da9c000190506107ca565b5060c21983016276a70090810290820690910301630b1fa8000190506107ca565b600080841161131d5760405162461bcd60e51b81526004016100e6906150c7565b600784111561133e5760405162461bcd60e51b81526004016100e6906151d4565b6276a70083061561135157506000610929565b600061135c8361074a565b905060015b8581116113955761137b61137482610a3d565b839061076d565b85141561138d57600192505050610929565b600101611361565b50600095945050505050565b6000600183101580156113b657506101008311155b6113bf57600080fd5b81156113d85750600160ff1b60001983011c8317610929565b50600160ff1b60001983011c198316610929565b6000806113f76126dc565b6001600160a01b03861660009081526020918252604080822087835283528082208683529092522054600f90810b900b9150509392505050565b6000806000611445866020015186866126e9565b915091506000611454876127b1565b90508161146d578651610d4d9061ffff168783886127c5565b60006114788661074a565b9050600061148861137486610a3d565b905060006114a08a6000015161ffff1683868b6127c5565b905060008087600114156114c5578991506114be8c60400151612864565b90506114f4565b6114db6114d460018a03610a3d565b869061076d565b91506114f18c6000015161ffff1683888d6127c5565b90505b611501828583868f611c22565b98505050505050505050610929565b60008461151f57506000610e26565b600061152b8585610b46565b9050600061153982856128f5565b9050633b9aca0081131561154c57600080fd5b610b3b8782611d40565b808203828113156000831215146107ca57600080fd5b600080610e268460200151610af686604001516115976402540be4008861193990919063ffffffff16565b90611939565b60006115a761295d565b6001600160a01b0388166000908152602082815260408083208a845290915290209091506001600160571b031986128015906115ea57506001600160571b038613155b6115f357600080fd5b6000851215801561160b57506001600160501b038513155b61161457600080fd5b831561161f57600080fd5b66ffffffffffffff83111561163357600080fd5b805466ffffffffffffff909316600160701b0266ffffffffffffff60701b19600a9790970b6affffffffffffffffffffff16600160a81b026001600160a81b0363ffffffff909616600160501b0263ffffffff60501b196001600160501b0390981669ffffffffffffffffffff1990961695909517969096169390931793909316939093179390931692909217909155505050565b6000620151808210156116da57600080fd5b6201518082610762565b60006116ef8261074a565b9050808360800151106117145760405162461bcd60e51b81526004016100e69061525f565b600061172484602001518461296a565b90506117558160008151811061173657fe5b6020026020010151602001518560600151612b6890919063ffffffff16565b60608501525060c08301518351516080850151600092839261177e9261ffff9091169087612b7e565b606087015191935091506117929083612b68565b606086015264ffffffffff8111156117a957600080fd5b64ffffffffff16608090940193909352505050565b60006117cd83600001516127b1565b905060006117da8561074a565b905060015b602085015151518110156118455761183d87866020015160000151838151811061180557fe5b60200260200101516020015188600087878a888151811061182257fe5b6020026020010151612ca3909695949392919063ffffffff16565b6001016117df565b50505050505050565b600060015b602086015151518110156118cb576000866020015160000151828151811061187757fe5b60200260200101519050600160ff1681604001511461189557600080fd5b6118b28760c001518683602001518a608001518560600151611f1b565b5060208701516118c29083612085565b50600101611853565b506109f88585846107d0565b60608060006118e4612cda565b60008681526020829052604081209192506119029082908790612ce7565b9097909650945050505050565b606080600061191c612e86565b600086815260208290526040902090915061190281866001612ce7565b8181026000198314156119695781158061195b57508282828161195857fe5b05145b61196457600080fd5b6107ca565b82158061197e57508183828161197b57fe5b05145b6107ca57600080fd5b60008160001914801561199d5750600160ff1b83145b156119a757600080fd5b8183816119b057fe5b059392505050565b84516119c79085858585612e93565b156119d157610e70565b6040850151156119fe5760006119ee866020015186868686612e93565b905080156119fc5750610e70565b505b611a0782612fa4565b15611a1a576000811215611a1a57600080fd5b6001600160571b03198112801590611a3957506001600160571b038113155b611a4257600080fd5b84602001515185604001511415611a6657611a608560200151612fba565b60208601525b60008560200151866040015181518110611a7c57fe5b6020908102919091018101519586528501939093526040808501929092526060840152600060a090930192909252500180516001019052565b600080610e268460400151610af66402540be400610af687896020015161193990919063ffffffff16565b60006001600160ff1b03821115611af657600080fd5b5090565b600080611b17611b126301da9c00610d478787611c80565b613073565b90506000611b2b82621dcd6560491b611d8c565b90506000611b3882611ddf565b90506000611b4c82621dcd6560491b611e67565b9050611b5781611e9d565b60070b979650505050505050565b6000806000611b7888888888600061308a565b9150915080611b8c576000925050506109f8565b6000611b9783611d59565b90506000611bab82621dcd6560491b611d8c565b90506000611bb882613140565b90506000611bd4611bcf83621dcd6560491b611e67565b61317a565b67ffffffffffffffff1690506000611bf489610d47846301da9c00611c80565b905063ffffffff811115611c125760009750505050505050506109f8565b9c9b505050505050505050505050565b6000818610611c3057600080fd5b848210611c3c57600080fd5b838310611c6257611c5b846103d1888803610d478388038b8803611c80565b90506109f8565b611c5b611c79878703610d478688038a8703611c80565b8590610b46565b600082611c8f575060006107ca565b82820282848281611c9c57fe5b04146107c75760405162461bcd60e51b81526004018080602001828103825260218152602001806153826021913960400191505060405180910390fd5b6000808211611d2f576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611d3857fe5b049392505050565b60006107c7611d4f8484611939565b633b9aca00611987565b6000677fffffffffffffff198212158015611d7c5750677fffffffffffffff8213155b611d8557600080fd5b5060401b90565b600081600f0b60001415611d9f57600080fd5b600082600f0b604085600f0b901b81611db457fe5b05905060016001607f1b03198112801590611dd6575060016001607f1b038113155b6107c757600080fd5b6000600160461b82600f0b12611df457600080fd5b683fffffffffffffffff1982600f0b1215611e1157506000610768565b6107ca608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d613196565b6000600f83810b9083900b0160016001607f1b03198112801590611dd6575060016001607f1b038113156107c757600080fd5b6000600f83810b9083900b0260401d60016001607f1b03198112801590611dd6575060016001607f1b038113156107c757600080fd5b600f0b60401d90565b6000611eb0613c44565b60008481526020828152604080832088830151845282528083208684529091529081902090860151606087015160a088015160c089015160e08a01519596509394611eff948694939291613c51565b610e70818660800151613d65565b60006107ca60001983611939565b600080611f2887876111ef565b90506000611f346126dc565b6001600160a01b0389166000908152602082815260408083208b845282528083208a8452909152812091925080611f6b888a613dae565b9150915080611f7957600080fd5b611f838583613eb9565b15612012578254600090611f9f908990600f90810b900b612b68565b905060016001607f1b03198112801590611fc0575060016001607f1b038113155b611fc957600080fd5b83546001600160801b0319166001600160801b03600f83900b1617845580611ffa57611ff7868460006113a1565b95505b6120058c8c88613ee9565b95506109f8945050505050565b86156120765760016001607f1b03198712801590612037575060016001607f1b038713155b61204057600080fd5b82546001600160801b0319166001600160801b03600f89900b16178355612069858360016113a1565b94506120768b8b87613ee9565b50949998505050505050505050565b815151811061209357600080fd5b60008260600151116120a457600080fd5b6000826000015182815181106120b657fe5b60200260200101519050600260038111156120cd57fe5b8160a0015160038111156120dd57fe5b141580156120fb575060038160a0015160038111156120f857fe5b14155b61210457600080fd5b606083018051600019019052600080805b8551518110156121775760008660000151828151811061213157fe5b6020026020010151905082816080015111801561215e575060028160a00151600381111561215b57fe5b14155b1561216e57806080015192508193505b50600101612115565b5081841415612190575050600260a091909101526121d1565b6000856000015183815181106121a257fe5b602090810291909101015160808581018051918301805190915252600160a09182015260029401939093525050505b5050565b8151158015906121e857508151613fff10155b6121f157600080fd5b8160200151600010801561220e5750602082015164ffffffffff10155b61221757600080fd5b8160400151600010801561223057506040820151600810155b61223957600080fd5b60608201516001600160571b031913801590612260575060608201516001600160571b0312155b61226957600080fd5b8151815460208401516040850151606090950151600a0b6affffffffffffffffffffff16600160401b0272ffffffffffffffffffffff00000000000000001960ff909616600160381b0267ff000000000000001964ffffffffff909316620100000266ffffffffff00001961ffff90961661ffff19909516949094179490941692909217169190911792909216919091179055565b60008060008061230d88613f43565b905084158061231b57508085115b15612324578094505b8680612334575060008860600151125b965061ffff86161561234557600080fd5b50509451939560109390931c60f09490941b9390931793509150565b6000806107ca600d613faa565b6000806107ca6002613faa565b600080612386613fc3565b6000938452602052505060409020546001600160a01b031690565b6000806000806000806123b261236e565b6001600160a01b039097166000908152602097909752505060409094205461ffff81169563ffffffff62010000830481169650600160301b830416945060ff600160501b8304169350600160581b90910460d81b9150565b600080600080612418613fd0565b6001600160a01b0395909516600090815260209590955250506040909220546bffffffffffffffffffffffff811693600160601b82046001600160801b03169350600160e01b90910463ffffffff169150565b612473614ebd565b61247b614ebd565b60ff841661248a579050610929565b6124948585613fdd565b815260ff841660608201528267ffffffffffffffff811180156124b657600080fd5b506040519080825280602002602001820160405280156124f057816020015b6124dd614ee5565b8152602001906001900390816124d55790505b506020820152949350505050565b600080600080600061250e61295d565b6001600160a01b0388166000908152602082815260408083208a8452909152902080546001600160501b0381169650600160501b900463ffffffff169450909150831561257757805461257090600160701b900466ffffffffffffff16614006565b925061258c565b8054600160701b900466ffffffffffffff1692505b54600160a81b9004600a90810b900b97939650919450925050565b6125af614f25565b60008060006125bd85614014565b604080516060810182526001600160a01b039093168352602083019390935260ff16600a0a918101919091529350505050919050565b6125fb614e91565b600061260a8461ffff166140d7565b6040805160808101825261ffff96909616865260ff821660208701528501939093525050606082015290565b6000806107ca600b613faa565b60008161264f57600080fd5b600160801b821061266257608091821c91015b600160401b821061267557604091821c91015b640100000000821061268957602091821c91015b62010000821061269b57601091821c91015b61010082106126ac57600891821c91015b601082106126bc57600491821c91015b600482106126cc57600291821c91015b6002821061076857600101919050565b6000806107ca600c613faa565b6000806000851161270c5760405162461bcd60e51b81526004016100e6906150c7565b600785111561272d5760405162461bcd60e51b81526004016100e6906151d4565b60006127388461074a565b905060015b86811161279057600061275961275283610a3d565b849061076d565b90508681141561277157509250600091506127a99050565b8681111561278757509250600191506127a99050565b5060010161273d565b5060405162461bcd60e51b81526004016100e6906152b6565b935093915050565b6060015161012c60089190911c60ff160290565b6000806127d0613c44565b905060006276a7006127e18561074a565b6000898152602085815260408083208b84528252808320949093018083529390522080549192509063ffffffff600160a01b8204811691600160c01b8104821691600160e01b90910416816128485760405162461bcd60e51b81526004016100e690615032565b6128558184848c8c6140f4565b9b9a5050505050505050505050565b80516000906001600160a01b031661287e57506000610768565b600082600001516001600160a01b031663dd30a6666040518163ffffffff1660e01b815260040160206040518083038186803b1580156128bd57600080fd5b505afa1580156128d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c79190614f7b565b60008061290d611b126301da9c00610d478688611c80565b905061291f81621dcd6560491b611d8c565b905061293261292d82614187565b611ddf565b905061294481621dcd6560491b611e67565b9050600061295182611e9d565b60070b95945050505050565b6000806107ca6006613faa565b6060612974614f25565b600061298085856141a9565b905061298a614e21565b815161299a575091506107ca9050565b6000805b875151811015612b5c576000886000015182815181106129ba57fe5b6020026020010151905060006129cf82613f43565b9050888111156129e0575050612b54565b81600001518685815181106129f157fe5b60200260200101516000015114612a26576001840193508160000151868581518110612a1957fe5b6020908102919091010151525b604082015160009060011415612a7357612a49836000015184602001518c6142ce565b9750612a6283606001518961156c90919063ffffffff16565b9050612a6e8b85612085565b612b0a565b612a808360400151612fa4565b15612b0a57612a9986846000015185602001518561443e565b6000612ab284606001518861445290919063ffffffff16565b602086015191935091508b1015612ad357612ace8c86836144fa565b612b08565b612ae6846000015185602001518d6142ce565b9850612afc612af58a8361156c565b8390612b68565b9150612b088c86612085565b505b612b3481888781518110612b1a57fe5b602002602001015160200151612b6890919063ffffffff16565b878681518110612b4057fe5b602002602001015160200181815250505050505b60010161299e565b50919695505050505050565b818101828112156000831215146107ca57600080fd5b6000806000612b8d87876111ef565b9050612b98846116c8565b915084821015612ba757600080fd5b6000612bb38684613dae565b50905080612bc2575050612c9a565b6000612bcd83611224565b90505b8015801590612bdf5750818111155b15612c29576000612bf08883611249565b9050612c08612c018b8b848b6145b0565b8790612b68565b9550612c16848360006113a1565b9350612c2184611224565b915050612bd0565b60005b8115612c8a576000612c3e8984611249565b9050600080612c4d8884613dae565b9150915080612c5b57600080fd5b612c67848360016113a1565b9350612c75878660006113a1565b9650612c8087611224565b9450505050612c2c565b612c958a8a83613ee9565b505050505b94509492505050565b612cb0878787868561464b565b612cc98760e001518860a001518960c0015185886140f4565b60c090970196909652505050505050565b6000806107ca6004613faa565b6060806000808567ffffffffffffffff81118015612d0457600080fd5b50604051908082528060200260200182016040528015612d2e578160200160208202803683370190505b50905060008667ffffffffffffffff81118015612d4a57600080fd5b50604051908082528060200260200182016040528015612d74578160200160208202803683370190505b50905060005b87811015612e78578884600e8110612d8e57fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16838281518110612dbc57fe5b60209081029190910101526001909301928884600e8110612dd957fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16828281518110612e0757fe5b60209081029190910101526001909301928615612e70576000838281518110612e2c57fe5b6020026020010151138015612e5457506000828281518110612e4a57fe5b6020026020010151135b612e705760405162461bcd60e51b81526004016100e690615289565b600101612d7a565b509097909650945050505050565b6000806107ca6005613faa565b6000805b8651811015612f97576000878281518110612eae57fe5b60200260200101519050848160400151141580612ecc575080518714155b80612edb575085816020015114155b15612ee65750612f8f565b60028160a001516003811115612ef857fe5b14158015612f16575060038160a001516003811115612f1357fe5b14155b612f1f57600080fd5b6060810151600090612f319086612b68565b9050612f3c86612fa4565b15612f4f576000811215612f4f57600080fd5b6001600160571b03198112801590612f6e57506001600160571b038113155b612f7757600080fd5b6060820152600160a090910181905291506109f89050565b600101612e97565b5060009695505050505050565b6000600282108015906107ca5750506008101590565b606060008251600014612fd1578251600202612fd4565b60015b905060008167ffffffffffffffff81118015612fef57600080fd5b5060405190808252806020026020018201604052801561302957816020015b613016614ee5565b81526020019060019003908161300e5790505b50905060005b845181101561306b5784818151811061304457fe5b602002602001015182828151811061305857fe5b602090810291909101015260010161302f565b509392505050565b6000677fffffffffffffff821115611d8557600080fd5b600080806130988885610930565b905060006130b06130a98a8a612b68565b8390614706565b905063393870008113156130cc57600080935093505050613136565b6000806130d88361471f565b91509150806130f1576000809550955050505050613136565b600061310789613101858d614706565b90612b68565b9050633b9aca0081121561312657600080965096505050505050613136565b9550600194506131369350505050565b9550959350505050565b60008082600f0b1361315157600080fd5b608061315c836147c1565b600f0b6fb17217f7d1cf79abc9e3b39803f2f6af02901c9050919050565b60008082600f0b121561318c57600080fd5b50600f0b60401d90565b6000600160461b82600f0b126131ab57600080fd5b683fffffffffffffffff1982600f0b12156131c857506000610768565b6001607f1b60006001603f1b8416600f0b13156131f65770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315613223577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b1315613250577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b131561327d5770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b13156132aa577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b13156132d757700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b13156133045770010163da9fb33356d84a66ae336dcdfa3f0260801c5b600083600160381b16600f0b131561332d57700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b13156133595770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b1315613385577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b13156133b157700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b13156133dd577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b131561340957700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b13156134355770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b1315613461577001000162e525ee054754457d59952920260260801c5b600083600160301b16600f0b131561348a5770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b13156134b5577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b13156134e057700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b131561350b5770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b131561353657700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b13156135615770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b131561358c577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b13156135b757700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b13156135e2577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b131561360c57700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b13156136365770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b1315613660577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b131561368a5770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b13156136b4577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b13156136de57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b13156137085770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b131561373257700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b131561375b5770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315613784577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b13156137ad57700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b13156137d6577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b13156137ff57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b13156138285770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b1315613851577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b131561387a5770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b13156138a2577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b13156138ca57700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b13156138f25770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b131561391a57700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b13156139425770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b131561396a577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b131561399257700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b13156139ba577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b13156139e157700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b1315613a085770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b1315613a2f577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b1315613a565770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315613a7d577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b1315613aa457700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b1315613acb5770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b1315613af257700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b1315613b185770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b1315613b3e577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b1315613b6457700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b1315613b8a577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b1315613bb057700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b1315613bd65770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315613bfc577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b1315613c225770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c60016001607f1b038111156107ca57600080fd5b6000806107ca600a613faa565b60008512158015613c6957506001600160501b038513155b613c7257600080fd5b60008412158015613c8a57506001600160501b038413155b613c9357600080fd5b826000108015613ca7575063ffffffff8311155b613cb057600080fd5b816000108015613cc4575063ffffffff8211155b613ccd57600080fd5b63ffffffff811115613cde57600080fd5b855469ffffffffffffffffffff19166001600160501b039586161769ffffffffffffffffffff60501b1916600160501b94909516939093029390931763ffffffff60a01b1916600160a01b63ffffffff928316021763ffffffff60c01b1916600160c01b93821693909302929092176001600160e01b0316600160e01b9190921602179055565b60008112158015613d7d57506001600160501b038113155b613d8657600080fd5b600191909101805469ffffffffffffffffffff19166001600160501b03909216919091179055565b6000806000613dbc856116c8565b905062015180840615613dd6576000809250925050613eb2565b838110613dea576000809250925050613eb2565b6201518081850304605a8111613e0757925060019150613eb29050565b6101688111613e46576000620151806207e900840604820160591901905060068104605a0160068281613e3657fe5b0660001494509450505050613eb2565b6108708111613e765760006201518062278d00840604820161016719019050601e8104608701601e8281613e3657fe5b611de28111613ea6576000620151806276a700840604820161086f19019050605a810460c301605a8281613e3657fe5b61010060009350935050505b9250929050565b600060018210158015613ece57506101008211155b613ed757600080fd5b50600019011b600160ff1b9081161490565b6014613ef48261489c565b1115613f125760405162461bcd60e51b81526004016100e690615174565b6000613f1c612636565b6001600160a01b039094166000908152602094855260408082209482529390945250912055565b6000808260400151118015613f5d57506040820151600810155b613f6657600080fd5b6040820151600210613f7d57506020810151610768565b6000613f8f6001846040015103610a3d565b6020840151909150610929906276a700906103d19084610b46565b6000620f4240826012811115613fbc57fe5b0192915050565b6000806107ca6003613faa565b6000806107ca6011613faa565b60606000613feb848461496c565b90506001815111613ffd5790506107ca565b6107c781614a8e565b600881901c60ff9091161b90565b600080600080600061402586614c47565b909250905060006001600160a01b03831661404a5750600090506402540be4006140cc565b826001600160a01b0316631ee108336040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561408557600080fd5b505af1158015614099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140bd9190614f7b565b9050600081136140cc57600080fd5b969195509350915050565b6000806140e2614c7e565b60009384526020525050604090205490565b600080831161410257600080fd5b818611156141115750836109f8565b600061411d8388610b46565b90508381111561413057859150506109f8565b600061414485610d4784633b9aca00611c80565b90506000614156633b9aca0083610b46565b90506000614179633b9aca00610d4761416f8b86611c80565b6103d18d88611c80565b9a9950505050505050505050565b6000600f82900b60016001607f1b031914156141a257600080fd5b5060000390565b81515160609060009081906141f35760408051600080825260208201909252906141e9565b6141d6614f4f565b8152602001906001900390816141ce5790505b50925050506107ca565b8451515b6000198101901561424e5760008660000151828151811061421457fe5b602002602001015190508561422882613f43565b11156142345750614249565b8051831461424757805160019094019392505b505b6141f7565b5060008267ffffffffffffffff8111801561426857600080fd5b506040519080825280602002602001820160405280156142a257816020015b61428f614f4f565b8152602001906001900390816142875790505b50905082156109f85781816000815181106142b957fe5b60209081029190910101515295945050505050565b6142d6614f25565b6000806142e38686614c8b565b9150915081600014156144135760006142fb87614014565b91945090925090506001600160a01b0381161561441157600061431c614cd4565b905085600010801561432e5750858711155b801561433f575064ffffffffff8611155b61434857600080fd5b83600012801561435f57506001600160801b038413155b61436857600080fd5b6000888152602082815260408083208a845290915290819020805464ffffffffff191664ffffffffff89161774ffffffffffffffffffffffffffffffff00000000001916650100000000006001600160801b038816021760ff60a81b1916600160a81b60ff871602178155905188908a907f0fdfa6885701e2f1f42e4187b9231cf81c1fe23671ef64fa46f34ddb56c1dc189061440690899061534a565b60405180910390a350505b505b6040805160608101825260008152602081019390935260ff909116600a0a9082015290509392505050565b61444c84848460018561464b565b50505050565b6000808261446557506000905080613eb2565b6000831361447257600080fd5b6144918460800151610af685876060015161193990919063ffffffff16565b91506144b28460800151610af685876040015161193990919063ffffffff16565b60808501519091506144c49084610930565b608085015260408401516144d89082610930565b604085015260608401516144ec9083610930565b6060850152613eb284614ce1565b60008360000151838151811061450c57fe5b60200260200101519050826000146145975760008460000151600185038151811061453357fe5b602002602001015190508160000151816000015114801561455b575081602001518160200151145b801561456b575060408101516001145b1561459557606081015161457f9084612b68565b6060820152600160a08201526145958585612085565b505b600160408201819052606082019290925260a001525050565b6000806145bb6126dc565b6001600160a01b0387166000908152602082815260408083208984528252808320888452909152812054919250600f91820b90910b906145fc8787876142ce565b9050614608818361156c565b6001600160a01b03989098166000908152602093845260408082209882529784528781209681529590925250505091902080546001600160801b03191690555090565b6000614655613c44565b6000868152602082815260408083208884528252808320868452825291829020808a5290890187905280546001600160501b03808216938b0193909352600160501b810490921660608a015263ffffffff600160a01b8304811660a08b0152600160c01b8304811660c08b0152600160e01b90920490911660e08901529091508084156146f45760018201546001600160501b031660808901526146fc565b600060808901525b5050505050505050565b60006107c761471984633b9aca00611939565b83611987565b600080633b9aca00831415614739575060009050806147bc565b600061475361474c633b9aca0086611556565b8590614706565b9050600061476082611d59565b9050600081600f0b1361477b576000809350935050506147bc565b60006147af6147aa61479e61478f85613140565b6814b927f32bffb83338614d39565b621dcd6560491b611e67565b611e9d565b60070b9450600193505050505b915091565b60008082600f0b136147d257600080fd5b6000600f83900b600160401b81126147ec576040918201911d5b6401000000008112614800576020918201911d5b620100008112614812576010918201911d5b6101008112614823576008918201911d5b60108112614833576004918201911d5b60048112614843576002918201911d5b60028112614852576001820191505b603f19820160401b600f85900b607f8490031b6001603f1b5b60008113156148915790800260ff81901c8281029390930192607f011c9060011d61486b565b509095945050505050565b600181901c7f5555555555555555555555555555555555555555555555555555555555555555908116911601600281901c7f3333333333333333333333333333333333333333333333333333333333333333908116911601600481901c7f07070707070707070707070707070707070707070707070707070707070707079190911601600881901c7e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f908116911601601081901c01602081901c01604081901c01608081901c60ff90811691160190565b606060108260ff16111561497f57600080fd5b6000614989612361565b6001600160a01b038516600090815260208290526040812091925060ff851667ffffffffffffffff811180156149be57600080fd5b506040519080825280602002602001820160405280156149f857816020015b6149e5614ee5565b8152602001906001900390816149dd5790505b50905060005b8560ff16811015614a84576000838260108110614a1757fe5b0190506000838381518110614a2857fe5b602090810291909101810151835461ffff8116825264ffffffffff620100008204169282019290925260ff600160381b8304166040820152600160401b909104600a90810b900b606082015260800191909152506001016149fe565b5095945050505050565b805160008167ffffffffffffffff81118015614aa957600080fd5b50604051908082528060200260200182016040528015614ad3578160200160208202803683370190505b50905060005b82811015614b30576000848281518110614aef57fe5b60200260200101519050614b10816000015182602001518360400151614d6c565b838381518110614b1c57fe5b602090810291909101015250600101614ad9565b5060015b8281101561444c57805b600081118015614b765750828181518110614b5557fe5b6020026020010151836001830381518110614b6c57fe5b6020026020010151115b15614c3e57828181518110614b8757fe5b6020026020010151836001830381518110614b9e57fe5b6020026020010151846001840381518110614bb557fe5b60200260200101858481518110614bc857fe5b6020026020010182815250828152505050848181518110614be557fe5b6020026020010151856001830381518110614bfc57fe5b6020026020010151866001840381518110614c1357fe5b60200260200101878481518110614c2657fe5b60209081029190910101919091525260001901614b3e565b50600101614b34565b6000806000614c54614dc7565b600094855260205250506040909120546001600160a01b03811692600160a01b90910460ff169150565b6000806107ca6009613faa565b6000806000614c98614cd4565b6000958652602090815260408087209587529490525050509020546501000000000081046001600160801b031691600160a81b90910460ff1690565b6000806107ca6008613faa565b6000614cec82614dd4565b905060008160000160189054906101000a900463ffffffff169050614d2b82846040015185606001518660a001518563ffffffff168860e00151613c51565b61096a828460800151613d65565b6000600f82810b9084900b0360016001607f1b03198112801590611dd6575060016001607f1b038113156107c757600080fd5b6000613fff841115614d7d57600080fd5b64ffffffffff831115614d8f57600080fd5b6008821115614d9d57600080fd5b5067ffff000000000000603084901b1665ffffffffff00600884901b161760ff8216179392505050565b6000806107ca600f613faa565b5190565b6040518060e00160405280614deb614e91565b8152602001614df8614ebd565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b60405180610100016040528060008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6040805160808101825260008082526020820152908101614eb0614f25565b8152600060209091015290565b6040518060800160405280606081526020016060815260200160008152602001600081525090565b6040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160006003811115614f2057fe5b905290565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b803561ffff8116811461076857600080fd5b600060208284031215614f8c578081fd5b5051919050565b600060208284031215614fa4578081fd5b6107c782614f69565b60008060408385031215614fbf578081fd5b614fc883614f69565b915060208301358015158114614fdc578182fd5b809150509250929050565b6001600160a01b0391909116815260200190565b60208082526017908201527f496e76616c696420737765657020636173682074696d65000000000000000000604082015260600190565b60208082526016908201527513585c9ad95d081b9bdd081a5b9a5d1a585b1a5e995960521b604082015260600190565b6020808252601490820152734f7261636c652072617465206f766572666c6f7760601b604082015260600190565b60208082526017908201527f4d75737420696e697469616c697a65206d61726b657473000000000000000000604082015260600190565b60208082526015908201527410d1ce881b9bc81b585c9ad95d1cc81b1a5cdd1959605a1b604082015260600190565b6020808252600d908201526c092dcecc2d8d2c840d2dcc8caf609b1b604082015260600190565b60208082526013908201527224a69d1039b4bc1036b7b73a341032b93937b960691b604082015260600190565b60208082526010908201526f4e6f206e546f6b656e2061737365747360801b604082015260600190565b6020808252600f908201526e4f766572206d61782061737365747360881b604082015260600190565b60208082526017908201527f494d3a20696e746572706f6c6174696f6e206572726f72000000000000000000604082015260600190565b60208082526016908201527510d1ce881b585c9ad95d081a5b99195e08189bdd5b9960521b604082015260600190565b6020808252601590820152740929a7440d2dce6eaccccd2c6d2cadce840c6c2e6d605b1b604082015260600190565b60208082526012908201527112534e881b9bdd08199a5c9cdd081a5b9a5d60721b604082015260600190565b60208082526010908201526f494d3a20696e76616c69642074696d6560801b604082015260600190565b60208082526013908201527250543a20696e69742076616c7565207a65726f60681b604082015260600190565b60208082526013908201527210d1ce881b9bc81b585c9ad95d08199bdd5b99606a1b604082015260600190565b60208082526016908201527512534e881b9bc81b585c9ad95d1cc81d1bc81a5b9a5d60521b604082015260600190565b60208082526017908201527f494d3a20696d706c6965642072617465206661696c6564000000000000000000604082015260600190565b6001600160801b0391909116815260200190565b61ffff91909116815260200190565b61ffff92909216825260208201526040019056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212206450a3b2f25e4646df1812f17fb029168dd0f81dfe00973993ce5ddb299bc6a164736f6c63430007060033", "deployedSourceMap": "1461:31351:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20253:1600;;;;;;;;;;-1:-1:-1;20253:1600:31;;;;;:::i;:::-;;:::i;:::-;;32707:103;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;22154:9861;;;;;;;;;;-1:-1:-1;22154:9861:31;;;;;:::i;:::-;;:::i;20253:1600::-;20341:15;20366:29;;:::i;:::-;20405:46;:6;20440:10;20405:34;:46::i;:::-;20469:21;;;;:34;:41;20461:74;;;;-1:-1:-1;;;20461:74:31;;;;;;;:::i;:::-;;;;;;;;;20613:21;20637:36;20663:9;20637:25;:36::i;:::-;20613:60;;20721:13;20691:6;:26;;;:43;;20683:79;;;;-1:-1:-1;;;20683:79:31;;;;;;;:::i;:::-;20949:17;;;;20887:26;;;;20848:24;;20887:146;;:26;5985:1:58;20949:58:31;21012:7;20935:84;20887:30;:146::i;:::-;20848:185;;21063:16;21051:9;:28;21043:64;;;;-1:-1:-1;;;21043:64:31;;;;;;;:::i;:::-;21236:25;;;21118:27;21236:25;;;;;;;;;21160:198;;21212:6;;21118:27;21236:25;;;;;:::i;:::-;;;;;;;;;;;;;;;;;21335:9;21160:34;:198::i;:::-;21118:240;;21369:22;21394:49;21422:20;21394:6;:18;;;:27;;:49;;;;:::i;:::-;21508:19;;;;21541:16;;:27;21369:74;;-1:-1:-1;21453:159:31;;;;21582:20;21453:41;:159::i;:::-;21726:56;;-1:-1:-1;;;21726:56:31;;:16;;:27;;:56;;21754:10;;21766:15;;21726:56;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;21797:49;21818:10;21830:15;21797:49;;;;;;;:::i;:::-;;;;;;;;20253:1600;;;;;;;:::o;32707:103::-;32778:25;32707:103;:::o;22154:9861::-;22257:15;22282:29;;:::i;:::-;22321:46;:6;22356:10;22321:34;:46::i;:::-;22456:16;;:31;;;22377:41;;22433:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;22586:16:31;;:31;;;22377:111;;-1:-1:-1;22578:71:31;;;;-1:-1:-1;;;22578:71:31;;;;;;;:::i;:::-;22745:11;22741:119;;;22780:21;;;;:34;:41;:46;22772:77;;;;-1:-1:-1;;;22772:77:31;;;;;;;:::i;:::-;22870:28;22901:162;22946:6;22966:15;22995:9;23018:10;22901:162;;23042:11;22901:31;:162::i;:::-;22870:193;;23074:38;23127:69;23152:10;23127:69;;23164:6;:16;;;:31;;;23127:24;:69::i;:::-;23074:122;;23207:33;;:::i;:::-;23303:18;;23331:8067;23355:16;;:31;;;23351:35;;23331:8067;;;23472:103;23530:31;23555:1;23559;23555:5;23530:24;:31::i;:::-;23472:36;23498:9;23472:25;:36::i;:::-;:40;;:103::i;:::-;23451:18;;;:124;23722:24;;:27;;23590:29;;23638:279;;23679:21;;23722:24;23747:1;;23722:27;;;;;;;;;;;;23809:1;4847::58;23771:39:31;;;23862:9;23893:6;23638:19;:279::i;:::-;23590:327;;23932:22;23957:33;23980:9;23957;:18;;;:22;;:33;;;;:::i;:::-;24024:16;;23932:58;;-1:-1:-1;24004:17:31;;24024:53;;24059:1;24055:5;;23932:58;24024:30;:53::i;:::-;24004:73;;24626:11;:160;;;;24748:1;24753;24748:6;:37;;;;;24758:15;:22;24784:1;24758:27;24748:37;24626:313;;;-1:-1:-1;24897:21:31;;;;:34;:41;24892:46;;;24626:313;:491;;;;25072:1;25077;25072:6;:44;;;;;25082:15;25098:1;25082:18;;;;;;;;;;;;;;:29;;;25115:1;25082:34;25072:44;24605:6599;;;25360:18;25381:86;25417:22;25441:10;:22;;;25464:1;25441:25;;;;;;;;;;;;;;25381:35;:86::i;:::-;25360:107;;25509:11;25486:9;:20;;:34;;;;;25561:281;25603:11;25636:22;25680:10;25720;:32;;;25753:1;25720:35;;;;;;;;;;;;;;25810:14;25561:20;:281::i;:::-;25538:20;;;:304;;;25994:60;;;;-1:-1:-1;;;25994:60:31;;;;;;;:::i;:::-;24605:6599;;;;26337:6;26333:2473;;26559:15;26575:1;26559:18;;;;;;;;;;;;;;:29;;;26546:42;;26333:2473;;;26617:1;26622;26617:6;26613:2193;;;27154:148;27203:15;27244:36;27270:9;27244:25;:36::i;:::-;27154:23;:148::i;:::-;27141:161;;26613:2193;;;28110:27;28164:69;28205:27;28230:1;28205:24;:27::i;:::-;28164:36;28190:9;28164:25;:36::i;:69::-;28110:123;;28268:519;28316:19;28633:10;28747:15;28763:1;28747:18;;;;;;;;;;;;;;28268:22;:519::i;:::-;28255:532;;26613:2193;;29120:17;29160:264;29214:10;29250:14;29290:10;29334;:32;;;29367:1;29334:35;;;;;;;;;;;;;;29160:28;:264::i;:::-;29120:304;;29925:10;:29;;;29955:1;29925:32;;;;;;;;;;;;;;29912:10;:45;29908:815;;;29994:10;:29;;;30024:1;29994:32;;;;;;;;;;;;;;29981:45;;30071:71;30107:22;30131:10;30071:35;:71::i;:::-;30048:9;:20;;:94;;;;;30178:314;30224:9;:20;;;30270:22;30318:10;30362;:32;;;30395:1;30362:35;;;;;;;30178:314;30165:327;-1:-1:-1;30523:15:31;30515:48;;;;-1:-1:-1;;;30515:48:31;;;;;;;:::i;:::-;29908:815;;;30633:71;30669:22;30693:10;30633:35;:71::i;:::-;30610:20;;;:94;29908:815;30956:1;30933:9;:20;;;:24;30929:54;;;30982:1;30959:20;;;:24;30929:54;-1:-1:-1;31002:20:31;;;:33;;;31150:27;;;:39;;;24605:6599;31308:20;;;;31280:25;;;:48;31342:45;31308:9;31342:45;;;31380:6;31342:14;:45::i;:::-;-1:-1:-1;;;23388:3:31;;23331:8067;;;;31512:22;31581:54;31615:6;:19;;;31581:6;:21;;;:33;;:54;;;;:::i;:::-;31435:200;;;;;31645:140;31700:6;:19;;;31733:10;31645:140;;31757:6;:18;;;31645:41;:140::i;:::-;31795:159;31855:6;:19;;;31888:16;31918:6;:26;;;31795:46;:159::i;:::-;31970:38;31996:10;31970:38;;;;;;:::i;:::-;;;;;;;;22154:9861;;;;;;;;;;:::o;12369:248:79:-;12487:50;12518:6;12526:10;12487:30;:50::i;:::-;12566:44;12599:10;12566:32;:44::i;:::-;12547:63;;;-1:-1:-1;12369:248:79:o;330:193:76:-;398:7;2617:9:58;425:30:76;;;417:39;;;;;;2617:9:58;486::76;:29;;473:9;:43;466:50;;330:193;;;;:::o;2682:175:6:-;2740:7;2771:5;;;2794:6;;;;2786:46;;;;;-1:-1:-1;;;2786:46:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;2849:1;-1:-1:-1;2682:175:6;;;;;:::o;8179:2829:31:-;8369:27;8408:20;8431:85;8467:6;:19;;;8488:6;:16;;;:27;;;8431:85;;:35;:85::i;:::-;8791:17;;;;8914:22;;8408:108;;-1:-1:-1;5922:1:58;8791:52:31;4169:16:58;8777:97:31;;8738:24;;8914:27;:74;;8956:32;:9;2617::58;8956:13:31;:32::i;:::-;8914:74;;;8944:9;8914:74;8884:104;;8999:14;9016:28;:12;:26;:28::i;:::-;8999:45;;9054:1860;9061:11;;9054:1860;;9172:16;9191:66;9222:6;:26;;;9250:6;9191:30;:66::i;:::-;9172:85;;9456:15;:22;9482:1;9456:27;:209;;;;-1:-1:-1;9555:16:31;;:31;;;9503:162;;9608:8;9638:9;9503:30;:162::i;:::-;9435:470;;;9775:34;:12;9795:6;9803:5;9775:19;:34::i;:::-;9760:49;;9836:28;:12;:26;:28::i;:::-;9827:37;;9882:8;;;9435:470;10012:19;;;;10053:16;;:27;9919:15;;9953:175;;;;10102:8;9953:37;:175::i;:::-;9919:209;;10225:1;10214:8;:12;10210:521;;;10267:16;;10246:18;;10267:67;;10304:8;10314:19;10267:36;:67::i;:::-;10246:88;;10376:10;10357:16;:29;10353:182;;;-1:-1:-1;10423:1:31;10353:182;;;10484:32;:10;10499:16;10484:14;:32::i;:::-;10471:45;;10353:182;10576:140;10622:76;10656:8;10666;10676:9;10687:10;10622:33;:76::i;:::-;10576:20;;:24;:140::i;:::-;10553:163;;10210:521;;10818:34;:12;10838:6;10846:5;10818:19;:34::i;:::-;10803:49;;10875:28;:12;:26;:28::i;:::-;10866:37;;9054:1860;;;;;10931:16;;:26;;;:70;;10980:20;10931:48;:70::i;:::-;10924:77;;;;;;8179:2829;;;;;;:::o;1773:176:92:-;1834:8;1858:9;1862:1;1865;1858:3;:9::i;:::-;1854:13;;1890:1;1885;:6;;1877:15;;;;;17556:293:65;17727:1;17712:11;:16;;17704:25;;;;;;17775:67;17794:13;17809:10;17821:11;17834:1;17837;17840;17775:18;:67::i;:::-;17556:293;;;:::o;11014:1388:31:-;11249:6;11267:28;11305:27;11347:11;11343:452;;;11410:31;11431:9;11410:20;:31::i;:::-;11374:68;;:26;;;:68;11343:452;;;11473:41;11496:6;11504:9;11473:22;:41::i;:::-;11528:67;11548:10;11560:9;11571:6;11579:15;11528:19;:67::i;:::-;11632:152;11676:6;11700:15;11733:10;11761:9;11632:26;:152::i;:::-;11609:175;;11343:452;11946:18;;;;:49;;11974:20;11946:27;:49::i;:::-;12050:18;;;:41;;;11922:73;-1:-1:-1;5625:3:58;12246:63:31;;12225:131;;;;-1:-1:-1;;;12225:131:31;;;;;;;:::i;:::-;-1:-1:-1;12374:21:31;-1:-1:-1;11014:1388:31;;;;;;;;:::o;2216:557::-;2340:27;;:::i;:::-;2383:34;;:::i;:::-;2479:96;2527:10;2551:14;2479:34;:96::i;:::-;2450:25;;;2427:148;;;2639:103;2694:10;2718:14;2639:41;:103::i;:::-;2617:18;;;2586:156;2587:28;;;2586:156;2617:18;2216:557;-1:-1:-1;;;2216:557:31:o;928:470:76:-;991:7;1014:5;1023:1;1014:10;1010:40;;;-1:-1:-1;2617:9:58;1026:24:76;;1010:40;1064:5;1073:1;1064:10;1060:44;;;-1:-1:-1;1083:21:76;1076:28;;1060:44;1118:5;1127:1;1118:10;1114:37;;;-1:-1:-1;2665:11:58;1130:21:76;;1114:37;1165:5;1174:1;1165:10;1161:41;;;-1:-1:-1;1184:18:76;1177:25;;1161:41;1216:5;1225:1;1216:10;1212:41;;;-1:-1:-1;1235:18:76;1228:25;;1212:41;1267:5;1276:1;1267:10;1263:42;;;-1:-1:-1;1286:19:76;1279:26;;1263:42;1319:5;1328:1;1319:10;1315:42;;;-1:-1:-1;1338:19:76;1331:26;;1315:42;1368:23;;-1:-1:-1;;;1368:23:76;;;;;;;:::i;18199:1007:31:-;18432:6;;18573:76;5625:3:58;18573:39:31;:21;18599:12;18573:25;:39::i;:::-;:43;;:76::i;:::-;18659:24;;;:44;;;18713:24;;;:44;;;18890:16;;:27;18931:18;;;;;18846:21;;;;18534:115;;-1:-1:-1;18846:205:31;;:21;:205;;;18963:9;18534:115;18846:30;:205::i;:::-;19134:16;;:26;;;:65;;19181:17;19134:46;:65::i;:::-;19127:72;18199:1007;-1:-1:-1;;;;;;;18199:1007:31:o;3128:155:6:-;3186:7;3218:1;3213;:6;;3205:49;;;;;-1:-1:-1;;;3205:49:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3271:5:6;;;3128:155::o;2655:782:75:-;2814:6;2845:11;2840:1;:16;;:59;;;;;2875:9;:24;;;2860:11;:39;;2840:59;2832:68;;;;;;3039:14;;;;2333:32;2971:1;-1:-1:-1;;2976:15:75;;2971:21;2957:35;;3018:48;3039:24;;;3018:48;3650:3:58;3018:75:75;2940:14;3135:85;3187:32;3204:14;3187:16;:32::i;:::-;3135:47;:6;3523:9:58;3135:10:75;:47::i;:85::-;3103:117;;3371:1;3358:10;:14;3350:23;;;;;;3420:10;2655:782;-1:-1:-1;;;;;;2655:782:75:o;19646:281:31:-;19785:6;19810:110;19879:40;3650:3:58;19908:10:31;19879:28;:40::i;:::-;19810:51;:22;19850:10;19810:39;:51::i;15752:571::-;15975:7;15994:17;16014:75;16052:20;16074:14;16014:37;:75::i;:::-;15994:95;;16099:18;16120:168;16155:11;16180:22;16216:10;16240;16264:14;16120:21;:168::i;:::-;16099:189;15752:571;-1:-1:-1;;;;;;;;15752:571:31:o;12676:676::-;12819:7;12941:1;12915:15;:22;:27;;12907:59;;;;-1:-1:-1;;;12907:59:31;;;;;;;:::i;:::-;12996:349;13045:15;13061:1;13045:18;;;;;;;;;;;;;;:27;;;13090:15;13106:1;13090:18;;;;;;;;;;;;;;:27;;;13135:15;13151:1;13135:18;;;;;;;;;;;;;;:29;;;13182:15;13198:1;13182:18;;;;;;;;;;;;;;;;;;:29;;;13310:21;13294:37;;12996:31;:349::i;16630:1518::-;16834:19;;;;16882:21;;;;16792:7;;16834:19;2617:9:58;16996:39:31;;17053:28;;;17045:64;;;;-1:-1:-1;;;17045:64:31;;;;;;;:::i;:::-;17302:9;17290:8;:21;17286:856;;17350:219;17559:9;17350:183;17504:28;;;17350:76;17351:20;;;17398:27;;;17350:47;:76::i;:::-;:153;;:183::i;:219::-;17327:242;;;;;;;17286:856;17760:12;17791:183;17945:28;;;17791:76;17792:20;;;17839:27;;;17791:47;:76::i;:183::-;17760:214;;18104:4;18092:9;:16;:39;;18130:1;18092:39;;;18123:4;18111:9;:16;18092:39;18085:46;;;;;;;;14014:1268;14205:6;14223:17;14243:75;14281:20;14303:14;14243:37;:75::i;:::-;14223:95;;14436:19;14458:65;14496:10;14508:14;14458:37;:65::i;:::-;14436:87;-1:-1:-1;14534:15:31;14552:162;14643:61;14693:10;14644:28;14436:87;14661:10;14644:16;:28::i;:::-;14643:49;;:61::i;:::-;14552:21;:162::i;:::-;14534:180;;14783:59;14801:8;-1:-1:-1;;;14783:17:31;:59::i;:::-;14772:70;;14892:27;14910:8;14892:17;:27::i;:::-;14881:38;;15014:17;15034:63;15052:8;15062:34;15080:8;-1:-1:-1;;;15062:17:31;:34::i;:::-;15034:17;:63::i;:::-;15014:83;;15165:61;15183:10;-1:-1:-1;;;15165:17:31;:61::i;:::-;15152:74;;15244:31;15264:10;15244:19;:31::i;:::-;15237:38;;;;;;;;14014:1268;;;;;;;:::o;32021:598::-;32233:22;2617:9:58;32258:42:31;32284:15;32258:25;:42::i;:::-;:62;;-1:-1:-1;32330:64:31;:6;32367:10;32258:62;32330:36;:64::i;:::-;32405:207;32453:6;:19;;;32486:10;32510:6;:15;;;32539:6;:26;;;32579:23;:6;:17;;;:21;:23::i;:::-;32405:34;:207::i;:::-;;32021:598;;;;:::o;6422:4123:82:-;6545:4;;;;;;;;7157:574;7181:27;;:34;7177:38;;7157:574;;;7236:27;7266:14;:27;;;7294:1;7266:30;;;;;;;;;;;;;;7236:60;;7479:32;7457:54;;;;;;;;:5;:18;;;:54;;;;;;;;;;7449:63;;;;;;7609:24;7587:5;:18;;;:46;;;;;;;;;;:69;;;;-1:-1:-1;7637:14:82;;;;:19;7587:69;7583:138;;;7676:30;7688:14;7704:1;7676:11;:30::i;:::-;-1:-1:-1;7217:3:82;;7157:574;;;;7830:9;7825:1217;7849:27;;:34;7845:38;;7825:1217;;;7904:27;7934:14;:27;;;7962:1;7934:30;;;;;;;;;;;;;;7904:60;;8005:24;7983:46;;;;;;;;:5;:18;;;:46;;;;;;;;;7979:1053;;;8116:17;;;;8094:19;8182:25;;8160:65;;;8289:24;8267:5;:18;;;:46;;;;;;;;;8263:361;;;8423:17;;;;;8573:32;8423:5;:17;8573:11;:32::i;:::-;8263:361;;;8837:180;8882:5;8909:7;8938:25;8985:14;8837:23;:180::i;:::-;8782:235;;-1:-1:-1;8782:235:82;-1:-1:-1;8782:235:82;-1:-1:-1;7979:1053:82;-1:-1:-1;7885:3:82;;7825:1217;;;-1:-1:-1;9107:32:82;;;;9078:26;9242:37;:35;:37::i;:::-;-1:-1:-1;;;;;9356:14:82;;9289:64;9356:14;;;;;;;;;;9149:130;;-1:-1:-1;9380:735:82;9404:14;:24;;;:31;9400:1;:35;9380:735;;;9456:27;9486:14;:24;;;9511:1;9486:27;;;;;;;;;;;;;;9456:57;;9531:5;:14;;;9549:1;9531:19;9527:33;;;9552:8;;;9527:33;9621:24;9599:5;:18;;;:46;;;;;;;;;;:120;;;;-1:-1:-1;9687:32:82;9665:5;:18;;;:54;;;;;;;;;;9599:120;9574:159;;;;;;9840:160;9881:5;9904:7;9929:25;9972:14;9840:23;:160::i;:::-;9785:215;;-1:-1:-1;9785:215:82;-1:-1:-1;9785:215:82;-1:-1:-1;10015:52:82;10027:5;10034:12;10047:18;10034:32;;;;;;;;10015:11;:52::i;:::-;10103:1;10081:23;;;;9380:735;;9437:3;;9380:735;;;;10295:2;10273:18;:24;;:62;;;;-1:-1:-1;10319:16:82;10301:34;;;10273:62;10265:71;;;;;;-1:-1:-1;10407:7:82;;10428:25;;-1:-1:-1;10428:25:82;-1:-1:-1;10473:18:82;-1:-1:-1;6422:4123:82;-1:-1:-1;;;;6422:4123:82:o;5588:558:79:-;5816:16;5785:47;;5749:84;;;;;;5877:47;5927:36;:34;:36::i;:::-;-1:-1:-1;;;;;6005:19:79;;;5973:29;6005:19;;;;;;;;-1:-1:-1;6005:19:79;;;;6034:57;;6101:38;;;;-1:-1:-1;;;6101:38:79;-1:-1:-1;;;;6034:57:79;;;;-1:-1:-1;;;6034:57:79;-1:-1:-1;;6034:57:79;;;;;;;6101:38;;;;;;;5588:558::o;11079:1240::-;11235:25;11249:10;11235:25;;:13;:25::i;:::-;-1:-1:-1;;;;;11213:47:79;:19;;;:47;;;11374:27;;;;;;11481:37;;:16;:37::i;:::-;11297:221;;;;;;;;11570:19;11685:62;11727:6;:19;;;11685:41;:62::i;:::-;-1:-1:-1;;11758:26:79;;;:48;;;11816:18;;;:40;;;-1:-1:-1;;;;;;11866:30:79;;:17;;;:30;11981:19;;;;11556:191;;-1:-1:-1;11931:124:79;;12014:16;-1:-1:-1;11931:36:79;:124::i;:::-;11907:21;;;:148;12280:19;;;;12247:65;;;;;:32;:65::i;:::-;-1:-1:-1;;;12107:18:79;;;;12093:219;;;;-1:-1:-1;;;;;11079:1240:79:o;17649:272:75:-;17734:26;;:::i;:::-;17776:36;17815:44;17848:10;17815:44;;:32;:44::i;:::-;17776:83;;17876:38;17892:10;17904:9;17876:15;:38::i;656:266:81:-;741:20;773:61;837:35;:33;:35::i;:::-;-1:-1:-1;;;;;889:14:81;;;;;;;;;;;;;;:26;;;;;;;;;-1:-1:-1;;656:266:81;;;;:::o;3211:233:90:-;3273:14;3362;3358:28;;-1:-1:-1;3385:1:90;3378:8;;3358:28;3410:23;3425:6;3410;:23::i;:::-;3404:3;:29;3436:1;3404:33;3397:40;;3211:233;;;:::o;6878:1476:76:-;6991:7;7022:11;7014:20;;;;;;7115:3;7105:6;:13;;7097:22;;;;;;7183:21;7207:22;7219:9;7207:11;:22::i;:::-;7183:46;;7239:16;3257:2:58;7270:6:76;:35;7266:1082;;-1:-1:-1;2399:5:58;7344:22:76;;7328:38;;-1:-1:-1;7321:45:76;;7266:1082;3310:3:58;7387:6:76;:36;7383:965;;-1:-1:-1;;;7694:34:76;;2520:7:58;7693:53:76;;;7630:30;;;7466:195;;;7682:64;7498:40;7682:64;;-1:-1:-1;7675:71:76;;7383:965;3366:3:58;7767:6:76;:38;7763:585;;-1:-1:-1;;;8006:35:76;;2567:8:58;8005:55:76;;;7941:31;;;7848:125;;;7994:66;7880:41;7994:66;;-1:-1:-1;7987:73:76;;7763:585;-1:-1:-1;;;8279:37:76;;2617:9:58;8278:59:76;;;8212:33;;;8118:128;;;8267:70;8150:42;8267:70;;-1:-1:-1;8260:77:76;;1496:609;1641:4;1682:1;1665:14;:18;1657:52;;;;-1:-1:-1;;;1657:52:76;;;;;;;:::i;:::-;2023:1:58;1727:14:76;:51;;1719:86;;;;-1:-1:-1;;;1719:86:76;;;;;;;:::i;:::-;2617:9:58;1820:8:76;:28;:33;1816:51;;-1:-1:-1;1862:5:76;1855:12;;1816:51;1877:12;1892:36;1918:9;1892:25;:36::i;:::-;1877:51;-1:-1:-1;1956:1:76;1939:137;1964:14;1959:1;:19;1939:137;;2015:37;2024:27;2049:1;2024:24;:27::i;:::-;2015:4;;:8;:37::i;:::-;2003:8;:49;1999:66;;;2061:4;2054:11;;;;;;1999:66;1980:3;;1939:137;;;-1:-1:-1;2093:5:76;;1496:609;-1:-1:-1;;;;;1496:609:76:o;316:372:90:-;428:7;464:1;455:5;:10;;:26;;;;;478:3;469:5;:12;;455:26;447:35;;;;;;526:5;522:160;;;-1:-1:-1;;;;;;582:9:90;;564:28;554:39;;547:46;;522:160;-1:-1:-1;;;;;;660:9:90;;642:28;640:31;631:40;;624:47;;1320:368:81;1455:15;1482:99;1584:35;:33;:35::i;:::-;-1:-1:-1;;;;;1636:14:81;;;;;;;;;;;;;;:26;;;;;;;;:36;;;;;;;:45;;;;;1629:52;;;-1:-1:-1;;1320:368:81;;;;;:::o;9545:1720:75:-;9702:7;9722:19;9743:18;9777:70;9801:9;:24;;;9827:8;9837:9;9777:23;:70::i;:::-;9721:126;;;;9857:18;9878:34;9902:9;9878:23;:34::i;:::-;9857:55;;9928:13;9923:1336;;9985:20;;9964:75;;;;10007:8;10017:10;10029:9;9964:20;:75::i;9923:1336::-;10070:21;10094:36;10120:9;10094:25;:36::i;:::-;10070:60;;10245:20;10268:56;10286:37;10311:11;10286:24;:37::i;10268:56::-;10245:79;;10338:16;10373:79;10394:9;:20;;;10373:79;;10416:12;10430:10;10442:9;10373:20;:79::i;:::-;10338:114;;10467:21;10502:17;10537:11;10552:1;10537:16;10533:613;;;10674:9;10658:25;;10713:35;:9;:19;;;:33;:35::i;:::-;10701:47;;10533:613;;;10862:60;10880:41;10919:1;10905:11;:15;10880:24;:41::i;:::-;10862:13;;:17;:60::i;:::-;10846:76;;10953:178;10995:9;:20;;;10953:178;;11037:13;11072:10;11104:9;10953:20;:178::i;:::-;10941:190;;10533:613;11167:81;11189:13;11204:12;11218:9;11229:8;11239;11167:21;:81::i;:::-;11160:88;;;;;;;;;;;;2563:669:86;2728:6;2750:13;2746:27;;-1:-1:-1;2772:1:86;2765:8;;2746:27;2926:22;2951:23;:8;2964:9;2951:12;:23::i;:::-;2926:48;;2984:21;3008:45;3026:14;3042:10;3008:17;:45::i;:::-;2984:69;;3650:3:58;3072:14:86;:42;;3064:51;;;;;;3182:43;:8;3210:14;3182:27;:43::i;1267:154:92:-;1390:5;;;1385:16;;;;1323:8;1406:6;;;1385:28;1377:37;;;;;1613:470:74;1748:6;1893:19;1915:131;2038:2;:7;;;1915:105;1998:2;:21;;;1915:65;658:4;1915:17;:34;;:65;;;;:::i;:::-;:82;;:105::i;19217:1427:65:-;19452:68;19523:30;:28;:30::i;:::-;-1:-1:-1;;;;;19603:14:65;;19563:37;19603:14;;;;;;;;;;;:26;;;;;;;;19452:101;;-1:-1:-1;;;;;;;19648:30:65;;;;;:64;;-1:-1:-1;;;;;;19682:30:65;;;19648:64;19640:73;;;;;;19869:1;19852:13;:18;;:55;;;;-1:-1:-1;;;;;;19874:33:65;;;19852:55;19844:64;;;;;;20045:18;;20037:27;;;;;;20306:16;20279:43;;;20271:52;;;;;;20378;;20559:78;;;;-1:-1:-1;;;20559:78:65;-1:-1:-1;;;;20440:28:65;20502:47;;;;;;-1:-1:-1;;;20502:47:65;-1:-1:-1;;;;;20440:52:65;;;;-1:-1:-1;;;20440:52:65;-1:-1:-1;;;;;;;;;20378:52:65;;;-1:-1:-1;;20378:52:65;;;;;;;20440;;;;;;;;20502:47;;;;;;;;20559:78;;;;;;;;;;;-1:-1:-1;;;19217:1427:65:o;583:160:76:-;641:7;2399:5:58;668:4:76;:21;;660:30;;;;;;2399:5:58;715:4:76;:20;;2779:1921:31;3651:21;3675:36;3701:9;3675:25;:36::i;:::-;3651:60;;3758:13;3729:6;:26;;;:42;3721:71;;;;-1:-1:-1;;;3721:71:31;;;;;;;:::i;:::-;3920:34;3973:71;4011:6;:21;;;4034:9;3973:37;:71::i;:::-;3920:124;;4079:53;4102:12;4115:1;4102:15;;;;;;;;;;;;;;:29;;;4079:6;:18;;;:22;;:53;;;;:::i;:::-;4058:18;;;:74;-1:-1:-1;4277:19:31;;;;4314:16;;:27;4359:26;;;;4154:23;;;;4216:210;;;;;;;4403:9;4216:43;:210::i;:::-;4457:18;;;;4153:273;;-1:-1:-1;4153:273:31;-1:-1:-1;4457:40:31;;4153:273;4457:22;:40::i;:::-;4436:18;;;:61;4616:16;4599:33;;;4591:42;;;;;;4643:50;;:26;;;;:50;;;;-1:-1:-1;;;2779:1921:31:o;4832:1526::-;5035:28;5066:42;:6;:16;;;:40;:42::i;:::-;5035:73;;5206:22;5231:36;5257:9;5231:25;:36::i;:::-;5206:61;-1:-1:-1;5857:1:31;5840:512;5864:21;;;;:34;:41;5860:45;;5840:512;;;5926:415;5991:10;6096:6;:21;;;:34;;;6131:1;6096:37;;;;;;;;;;;;;;:46;;;6160:9;6252:5;6275:20;6313:14;5926:15;5942:1;5926:18;;;;;;;;;;;;;;:47;;:415;;;;;;;;;:::i;:::-;5907:3;;5840:512;;;;4832:1526;;;;;;:::o;6549:1376::-;6753:6;6992:1;6975:766;6999:21;;;;:34;:41;6995:45;;6975:766;;;7061:27;7091:6;:21;;;:34;;;7126:1;7091:37;;;;;;;;;;;;;;7061:67;;4700:1:58;7333:45:31;;:5;:15;;;:45;7325:54;;;;;;7394:221;7446:6;:19;;;7483:10;7511:5;:14;;;7543:6;:26;;;7587:5;:14;;;7394:34;:221::i;:::-;-1:-1:-1;7694:21:31;;;;:36;;7728:1;7694:33;:36::i;:::-;-1:-1:-1;7042:3:31;;6975:766;;;;7848:70;7883:6;7891:15;7908:9;7848:34;:70::i;6240:508:79:-;6361:29;6392:34;6442:67;6512:36;:34;:36::i;:::-;6558:59;6620:17;;;;;;;;;;6442:106;;-1:-1:-1;6685:56:79;;6620:17;;6719:14;;6685;:56::i;:::-;6647:94;;;;-1:-1:-1;6240:508:79;-1:-1:-1;;;;;6240:508:79:o;9488:507::-;9616:37;9655:27;9698:67;9768:33;:31;:33::i;:::-;9811:56;9870:17;;;;;;;;;;9698:103;;-1:-1:-1;9936:52:79;9870:17;9967:14;9983:4;9936:14;:52::i;398:190:92:-;478:5;;;-1:-1:-1;;497:7:92;;493:88;;;515:6;;;:20;;;534:1;529;525;:5;;;;;;:10;515:20;506:30;;;;;;493:88;;;560:6;;;:20;;;579:1;574;570;:5;;;;;;:10;560:20;551:30;;;;;1022:239;1078:8;1108:1;-1:-1:-1;;1108:7:92;:27;;;;;-1:-1:-1;;;1119:1:92;:16;1108:27;1106:30;1098:39;;;;;;1253:1;1249;:5;;;;;;;1022:239;-1:-1:-1;;;1022:239:92:o;2933:2071:82:-;3230:27;;3192:186;;3275:10;3303:8;3329:9;3356:8;3192:20;:186::i;:::-;3133:263;;;3389:7;;3133:263;3410:32;;;;:36;3406:296;;3462:11;3476:183;3514:14;:24;;;3556:10;3584:8;3610:9;3637:8;3476:20;:183::i;:::-;3462:197;;3677:6;3673:19;;;3685:7;;;3673:19;3406:296;;3866:40;3896:9;3866:29;:40::i;:::-;3862:152;;;3942:1;3930:8;:13;;3922:22;;;;;;-1:-1:-1;;;;;;4031:27:82;;;;;:58;;-1:-1:-1;;;;;;4062:27:82;;;4031:58;4023:67;;;;;;4240:14;:24;;;:31;4204:14;:32;;;:67;4200:171;;;4314:46;4335:14;:24;;;4314:20;:46::i;:::-;4287:24;;;:73;4200:171;4641:30;4674:14;:24;;;4699:14;:32;;;4674:58;;;;;;;;;;;;;;;;;;;4742:32;;;4784:17;;:28;;;;4822:18;;;;:30;;;;4862:17;;;:28;-1:-1:-1;4900:21:82;;;;:50;;;;-1:-1:-1;4960:32:82;:37;;4996:1;4960:37;;;2933:2071::o;882:468:74:-;1010:6;1155:24;1182:126;1286:2;:21;;;1182:86;658:4;1182:38;1207:12;1182:2;:7;;;:24;;:38;;;;:::i;2520:163:92:-;2569:6;-1:-1:-1;;;;;2596:1:92;:30;;2587:40;;;;;;-1:-1:-1;2674:1:92;2520:163::o;17939:613:77:-;18071:6;;18123:118;18163:64;3523:9:58;18163:31:77;:11;18179:14;18163:15;:31::i;:64::-;18123:22;:118::i;:::-;18093:148;;18251:21;18275:59;18293:8;-1:-1:-1;;;18275:17:77;:59::i;:::-;18251:83;;18344:16;18363:33;18381:14;18363:17;:33::i;:::-;18344:52;;18406:22;18431:60;18449:9;-1:-1:-1;;;18431:17:77;:60::i;:::-;18406:85;;18509:36;18529:15;18509:19;:36::i;:::-;18502:43;;;17939:613;-1:-1:-1;;;;;;;17939:613:77:o;16345:1469::-;16547:7;16640:19;16661:12;16689:76;16706:10;16718:19;16739:10;16751;16763:1;16689:16;:76::i;:::-;16639:126;;;;16780:7;16775:22;;16796:1;16789:8;;;;;;16775:22;16953:11;16967:35;16989:12;16967:21;:35::i;:::-;16953:49;;17062:17;17082:55;17100:4;-1:-1:-1;;;17082:17:77;:55::i;:::-;17062:75;;17291:19;17313:28;17330:10;17313:16;:28::i;:::-;17291:50;;17389:14;17418:85;17439:63;17457:12;-1:-1:-1;;;17439:17:77;:63::i;:::-;17418:20;:85::i;:::-;17389:114;;;-1:-1:-1;17558:19:77;17580:59;17624:14;17580:39;17389:114;3523:9:58;17580:10:77;:39::i;:59::-;17558:81;-1:-1:-1;17752:16:77;17738:30;;17734:44;;;17777:1;17770:8;;;;;;;;;;;17734:44;17796:11;16345:1469;-1:-1:-1;;;;;;;;;;;;16345:1469:77:o;7904:1576:75:-;8109:7;8152:13;8136;:29;8128:38;;;;;;8255:12;8239:13;:28;8231:37;;;;;;8515:9;8503:8;:21;8499:975;;8563:221;8774:9;8563:185;8719:28;;;8563:78;8564:20;;;8611:29;;;8563:47;:78::i;:221::-;8540:244;;;;8499:975;9150:313;9248:197;9416:28;;;9248:82;9249:20;;;9300:29;;;9248:51;:82::i;:197::-;9150:9;;:13;:313::i;3530:215:6:-;3588:7;3611:6;3607:20;;-1:-1:-1;3626:1:6;3619:8;;3607:20;3649:5;;;3653:1;3649;:5;:1;3672:5;;;;;:10;3664:56;;;;-1:-1:-1;;;3664:56:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4209:150;4267:7;4298:1;4294;:5;4286:44;;;;;-1:-1:-1;;;4286:44:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;4351:1;4347;:5;;;;;;;4209:150;-1:-1:-1;;;4209:150:6:o;2248:143:92:-;2319:6;2344:40;2348:9;2352:1;2355;2348:3;:9::i;:::-;3650:3:58;2344::92;:40::i;1240:160:89:-;1291:6;-1:-1:-1;;1314:1:89;:24;;:51;;;;;1347:18;1342:1;:23;;1314:51;1305:61;;;;;;-1:-1:-1;1392:2:89;1387:7;;1240:160::o;6673:222::-;6730:6;6753:1;:6;;6758:1;6753:6;;6744:16;;;;;;6766:13;6803:1;6782:22;;6797:2;6791:1;6783:10;;:16;;6782:22;;;;;;;-1:-1:-1;;;;;;;6819:19:89;;;;;:42;;-1:-1:-1;;;;;;6842:19:89;;;6819:42;6810:52;;;;;21341:266;21388:6;-1:-1:-1;;;21411:1:89;:24;;;21402:34;;;;;;-1:-1:-1;;21459:1:89;:25;;;21455:39;;;-1:-1:-1;21493:1:89;21486:8;;21455:39;21521:81;21597:3;21553:1;21545:10;;21558:35;21545:48;:55;;21521:5;:81::i;3366:191::-;3423:6;3453:13;:9;;;:13;;;;;-1:-1:-1;;;;;;3481:19:89;;;;;:42;;-1:-1:-1;;;;;;3504:19:89;;;3472:52;;;;;4188:197;4245:6;4275:13;:9;;;:13;;;;;4292:2;4275:19;-1:-1:-1;;;;;;4309:19:89;;;;;:42;;-1:-1:-1;;;;;;4332:19:89;;;4300:52;;;;;1612:89;1688:7;;1693:2;1688:7;;1612:89::o;27867:796:77:-;28123:100;28226:29;:27;:29::i;:::-;28265:35;28303:17;;;;;;;;;;;28321:15;;;;28303:34;;;;;;;:50;;;;;;;;;;28422:17;;;;28453:21;;;;28488:22;;;;28524:17;;;;28555:24;;;;28123:132;;-1:-1:-1;28303:50:77;;28364:225;;28303:50;;28422:17;28453:21;28488:22;28364:17;:225::i;:::-;28600:56;28619:13;28634:6;:21;;;28600:18;:56::i;1553:90:92:-;1599:8;1626:10;-1:-1:-1;;1634:1:92;1626:3;:10::i;3016:1782:81:-;3200:6;3218:20;3241:36;3257:7;3266:10;3241:15;:36::i;:::-;3218:59;;3287:99;3389:35;:33;:35::i;:::-;-1:-1:-1;;;;;3468:14:81;;3434:31;3468:14;;;;;;;;;;;:26;;;;;;;;:36;;;;;;;;3287:137;;-1:-1:-1;3434:31:81;3547:56;3578:14;3495:8;3547:30;:56::i;:::-;3514:89;;;;3621:7;3613:16;;;;;;3689:29;:12;3711:6;3689:21;:29::i;:::-;3685:649;;;3838:18;;3802:20;;3825:32;;:8;;3838:18;;;;3825:32;;:12;:32::i;:::-;3802:55;-1:-1:-1;;;;;;;3879:33:81;-1:-1:-1;3879:33:81;;;:70;;-1:-1:-1;;;;;;3916:33:81;;;3879:70;3871:79;;;;;;3997:42;;-1:-1:-1;;;;;;3997:42:81;-1:-1:-1;;;;;3997:42:81;;;;;;;;;4119:106;;4176:34;:12;4196:6;4204:5;4176:19;:34::i;:::-;4161:49;;4119:106;4239:50;4255:7;4264:10;4276:12;4239:15;:50::i;:::-;4310:13;-1:-1:-1;4303:20:81;;-1:-1:-1;;;;;4303:20:81;3685:649;4348:13;;4344:422;;-1:-1:-1;;;;;;4483:28:81;-1:-1:-1;4483:28:81;;;:60;;-1:-1:-1;;;;;;4515:28:81;;;4483:60;4475:69;;;;;;4591:37;;-1:-1:-1;;;;;;4591:37:81;-1:-1:-1;;;;;4591:37:81;;;;;;;;4658:33;:12;4678:6;-1:-1:-1;4658:19:81;:33::i;:::-;4643:48;;4705:50;4721:7;4730:10;4742:12;4705:15;:50::i;:::-;-1:-1:-1;4783:8:81;;3016:1782;-1:-1:-1;;;;;;;;;3016:1782:81:o;12651:2038:82:-;12765:27;;:34;12757:42;;12749:51;;;;;;12882:1;12847:14;:32;;;:36;12839:45;;;;;;12931:35;12969:14;:27;;;12997:5;12969:34;;;;;;;;;;;;;;12931:72;;13064:24;13034:54;;;;;;;;:13;:26;;;:54;;;;;;;;;;:132;;;;-1:-1:-1;13134:32:82;13104:13;:26;;;:62;;;;;;;;;;13034:132;13013:163;;;;;;13215:32;;;:37;;-1:-1:-1;;13215:37:82;;;-1:-1:-1;;;13493:338:82;13513:27;;:34;13509:38;;13493:338;;;13568:23;13594:14;:27;;;13622:1;13594:30;;;;;;;;;;;;;;13568:56;;13658:13;13642:1;:13;;;:29;:75;;;;-1:-1:-1;13693:24:82;13675:1;:14;;;:42;;;;;;;;;;13642:75;13638:183;;;13753:1;:13;;;13737:29;;13805:1;13784:22;;13638:183;-1:-1:-1;13549:3:82;;13493:338;;;;13854:18;13845:5;:27;13841:236;;;-1:-1:-1;;14022:24:82;13993:26;;;;;:53;14060:7;;13841:236;14290:33;14326:14;:27;;;14354:18;14326:47;;;;;;;;;;;;;;;;;;14486:25;;;;;;14525:23;;;;;14383:175;;;;14595:24;14568;;;;:51;14658:24;14629:26;;:53;;;;-1:-1:-1;;;12651:2038:82;;;:::o;11554:862::-;11701:16;;11697:20;;;;:68;;-1:-1:-1;11721:16:82;;5408:6:58;-1:-1:-1;11721:44:82;11697:68;11689:77;;;;;;11830:5;:14;;;11826:1;:18;:56;;;;-1:-1:-1;11848:14:82;;;;11866:16;-1:-1:-1;11848:34:82;11826:56;11818:65;;;;;;11944:5;:15;;;11940:1;:19;:77;;;;-1:-1:-1;11963:15:82;;;;4906:1:58;-1:-1:-1;11963:54:82;11940:77;11932:86;;;;;;12089:14;;;;-1:-1:-1;;;;;;12070:33:82;;;;:70;;-1:-1:-1;12107:14:82;;;;-1:-1:-1;;;;;;12107:33:82;12070:70;12062:79;;;;;;12224:16;;12191:50;;12282:14;;;;12338:15;;;;12394:14;;;;;12364:45;;;;-1:-1:-1;;;12364:45:82;-1:-1:-1;;12307:47:82;;;;-1:-1:-1;;;12307:47:82;-1:-1:-1;;12251:46:82;;;;;;-1:-1:-1;;12191:50:82;;;;-1:-1:-1;;12191:50:82;;;;;;;12251:46;;;;;;;;12307:47;;;;;12364:45;;;;;;;;;;11554:862::o;10626:882::-;10858:4;10876:7;10897;10929:22;10954:25;:5;:23;:25::i;:::-;10929:50;-1:-1:-1;11051:19:82;;;:54;;;11091:14;11074;:31;11051:54;11047:116;;;11138:14;11121:31;;11047:116;11182:7;:29;;;;11210:1;11193:5;:14;;;:18;11182:29;11172:39;-1:-1:-1;11230:47:82;;;;11222:56;;;;;;-1:-1:-1;;11406:16:82;;11450:7;;11391:2;11362:31;;;;11427:3;11398:32;;;;11361:70;;;;;-1:-1:-1;11486:14:82;-1:-1:-1;10626:882:82:o;5950:263:60:-;6017:77;6110:12;6125:41;6141:24;6125:15;:41::i;2105:232::-;2171:47;2235:12;2250:40;2266:23;2250:15;:40::i;1541:219:79:-;1607:20;1639:41;1683:36;:34;:36::i;:::-;1736:17;;;;;;-1:-1:-1;;1736:17:79;;;;-1:-1:-1;;;;;1736:17:79;;1541:219::o;728:737::-;836:17;867:35;916:27;957:22;993:17;1035:47;1085:36;:34;:36::i;:::-;-1:-1:-1;;;;;1163:19:79;;;1131:29;1163:19;;;;;;;;-1:-1:-1;;1163:19:79;;;;1206:18;;;;;1264:35;;;;;;;-1:-1:-1;;;;1331:27:79;;;;-1:-1:-1;1387:24:79;-1:-1:-1;;;1387:24:79;;;;-1:-1:-1;;;;1434:24:79;;;;;;-1:-1:-1;728:737:79:o;526:829:80:-;646:19;679:32;725:27;777:58;838:40;:38;:40::i;:::-;-1:-1:-1;;;;;937:19:80;;;;888:46;937:19;;;;;;;;-1:-1:-1;;937:19:80;;;;980:25;;;;;-1:-1:-1;;;1245:38:80;;-1:-1:-1;;;;;1245:38:80;;-1:-1:-1;;;;1315:33:80;;;;;;-1:-1:-1;526:829:80:o;15400:477:82:-;15546:21;;:::i;:::-;15579:27;;:::i;:::-;15620:21;;;15616:39;;15650:5;-1:-1:-1;15643:12:82;;15616:39;15687:45;15706:7;15715:16;15687:18;:45::i;:::-;15666:66;;15742:42;;;:23;;;:42;15833:13;15812:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;15794:15:82;;;:53;:15;15400:477;-1:-1:-1;;;;15400:477:82:o;20740:979:65:-;20864:18;20896:20;20930:21;20965:31;21021:68;21092:30;:28;:30::i;:::-;-1:-1:-1;;;;;21172:14:65;;21132:37;21172:14;;;;;;;;;;;:26;;;;;;;;21225:28;;-1:-1:-1;;;;;21225:28:65;;;-1:-1:-1;;;;21279:28:65;;;;;-1:-1:-1;21172:14:65;;-1:-1:-1;21321:17:65;;21317:346;;21506:44;;21473:78;;-1:-1:-1;;;21506:44:65;;;;21473:32;:78::i;:::-;21447:104;;21317:346;;;21608:44;;-1:-1:-1;;;21608:44:65;;;;;-1:-1:-1;21317:346:65;21686:26;-1:-1:-1;;;21686:26:65;;;;;;21672:40;;;20740:979;;-1:-1:-1;20740:979:65;;-1:-1:-1;20740:979:65;-1:-1:-1;;20740:979:65:o;5904:516:74:-;5990:26;;:::i;:::-;6033:11;6046:27;6075:29;6120:33;6142:10;6120:21;:33::i;:::-;6183:230;;;;;;;;-1:-1:-1;;;;;6183:230:74;;;;;;;;;;;;6370:27;;:2;:27;6183:230;;;;;;;;-1:-1:-1;;;;5904:516:74;;;:::o;16694:512:75:-;16822:26;;:::i;:::-;16864:12;16879:37;16905:10;16879:37;;:25;:37::i;:::-;17010:189;;;;;;;;;;;;;;;16957:22;;;17010:189;;;;;;;;;;-1:-1:-1;;17010:189:75;;;;;16694:512::o;5245:243:60:-;5310:61;5387:12;5402:39;5418:22;5402:15;:39::i;1940:1056:90:-;1990:11;2280:6;2272:15;;;;;;-1:-1:-1;;;2328:1:90;:40;2324:104;;2390:3;2384:9;;;;2407:10;2324:104;-1:-1:-1;;;2441:1:90;:24;2437:86;;2487:2;2481:8;;;;2503:9;2437:86;2541:11;2536:1;:16;2532:78;;2574:2;2568:8;;;;2590:9;2532:78;2628:7;2623:1;:12;2619:74;;2657:2;2651:8;;;;2673:9;2619:74;2711:5;2706:1;:10;2702:70;;2738:1;2732:7;;;;2753:8;2702:70;2790:4;2785:1;:9;2781:69;;2816:1;2810:7;;;;2831:8;2781:69;2868:3;2863:1;:8;2859:68;;2893:1;2887:7;;;;2908:8;2859:68;2945:3;2940:1;:8;2936:22;;2957:1;2950:8;1940:1056;;;:::o;5595:269:60:-;5660:87;5763:12;5778:39;5794:22;5778:15;:39::i;2984:825:76:-;3122:7;3131:4;3172:1;3155:14;:18;3147:52;;;;-1:-1:-1;;;3147:52:76;;;;;;;:::i;:::-;2023:1:58;3217:14:76;:51;;3209:86;;;;-1:-1:-1;;;3209:86:76;;;;;;;:::i;:::-;3305:12;3320:36;3346:9;3320:25;:36::i;:::-;3305:51;-1:-1:-1;3384:1:76;3367:396;3392:14;3387:1;:19;3367:396;;3427:22;3452:37;3461:27;3486:1;3461:24;:27::i;:::-;3452:4;;:8;:37::i;:::-;3427:62;;3584:8;3566:14;:26;3562:49;;;-1:-1:-1;3602:1:76;-1:-1:-1;3605:5:76;;-1:-1:-1;3594:17:76;;-1:-1:-1;3594:17:76;3562:49;3726:8;3709:14;:25;3705:47;;;-1:-1:-1;3744:1:76;-1:-1:-1;3747:4:76;;-1:-1:-1;3736:16:76;;-1:-1:-1;3736:16:76;3705:47;-1:-1:-1;3408:3:76;;3367:396;;;;3773:29;;-1:-1:-1;;;3773:29:76;;;;;;;:::i;2984:825::-;;;;;;;:::o;5507:311:75:-;5742:14;;;2264:3:58;1611:1:75;5742:41;;;;5720:66;;:91;;5507:311::o;24295:1374:77:-;24466:7;24485:100;24588:29;:27;:29::i;:::-;24485:132;-1:-1:-1;24627:22:77;2617:9:58;24652:36:77;24678:9;24652:25;:36::i;:::-;24718:35;24756:17;;;;;;;;;;;:27;;;;;;;;24652:56;;;;24756:43;;;;;;;24836:29;;24652:56;;-1:-1:-1;24756:43:77;24836:29;-1:-1:-1;;;24836:29:77;;;;;-1:-1:-1;;;24896:24:77;;;;;-1:-1:-1;;;24958:31:77;;;;25399:14;25391:49;;;;-1:-1:-1;;;25391:49:77;;;;;;;:::i;:::-;25470:192;25505:17;25540:15;25573:10;25601:20;25639:9;25470:17;:192::i;:::-;25451:211;24295:1374;-1:-1:-1;;;;;;;;;;;24295:1374:77:o;2269:557:74:-;2485:13;;2346:7;;-1:-1:-1;;;;;2477:36:74;2473:50;;-1:-1:-1;2522:1:74;2515:8;;2473:50;2534:12;2549:2;:13;;;-1:-1:-1;;;;;2549:37:74;;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1893:586:86:-;2011:6;;2063:87;2086:63;3523:9:58;2086:30:86;:10;2101:14;2086;:30::i;2063:87::-;2033:117;;2171:59;2189:8;-1:-1:-1;;;2171:17:86;:59::i;:::-;2160:70;;2251:46;2269:27;2287:8;2269:17;:27::i;:::-;2251:17;:46::i;:::-;2240:57;;2318:59;2336:8;-1:-1:-1;;;2318:17:86;:59::i;:::-;2307:70;;2387:21;2411:29;2431:8;2411:19;:29::i;:::-;2387:53;;;1893:586;-1:-1:-1;;;;;1893:586:86:o;3568:240:60:-;3628:68;3712:12;3727:34;3743:17;3727:15;:34::i;2159:2914:85:-;2275:21;2312:41;;:::i;:::-;2363:35;2401:48;2423:14;2439:9;2401:21;:48::i;:::-;2363:86;;2459:30;;:::i;:::-;2503:20;;2499:51;;-1:-1:-1;2537:13:85;-1:-1:-1;2530:20:85;;-1:-1:-1;2530:20:85;2499:51;2560:25;2601:9;2596:2440;2616:27;;:34;2612:38;;2596:2440;;;2671:27;2701:14;:27;;;2729:1;2701:30;;;;;;;;;;;;;;2671:60;;2745:18;2766:25;:5;:23;:25::i;:::-;2745:46;;2878:9;2865:10;:22;2861:36;;;2889:8;;;;2861:36;3031:5;:16;;;2984:13;2998:17;2984:32;;;;;;;;;;;;;;:43;;;:63;2980:253;;3137:1;3116:22;;;;3202:5;:16;;;3156:13;3170:17;3156:32;;;;;;;;;;;;;;;;;;:62;2980:253;3281:15;;;;3247:16;;4700:1:58;3281:45:85;3277:1591;;;3451:160;3510:5;:16;;;3548:5;:14;;;3584:9;3451:37;:160::i;:::-;3434:177;;3642:52;3679:5;:14;;;3642;:36;;:52;;;;:::i;:::-;3630:64;-1:-1:-1;3712:29:85;:14;3739:1;3712:26;:29::i;:::-;3277:1591;;;3766:46;3796:5;:15;;;3766:29;:46::i;:::-;3762:1106;;;3832:81;3860:6;3868:5;:16;;;3886:5;:14;;;3902:10;3832:27;:81::i;:::-;3931:12;3982:38;4005:5;:14;;;3982:6;:22;;:38;;;;:::i;:::-;4098:14;;;;3961:59;;-1:-1:-1;3961:59:85;-1:-1:-1;4098:26:85;-1:-1:-1;4094:760:85;;;4229:54;4258:14;4274:1;4277:5;4229:28;:54::i;:::-;4094:760;;;4439:176;4502:5;:16;;;4544:5;:14;;;4584:9;4439:37;:176::i;:::-;4422:193;-1:-1:-1;4726:58:85;4740:43;4422:193;4777:5;4740:36;:43::i;:::-;4726:9;;:13;:58::i;:::-;4714:70;-1:-1:-1;4806:29:85;:14;4833:1;4806:26;:29::i;:::-;3762:1106;;4930:95;5015:9;4930:13;4944:17;4930:32;;;;;;;;;;;;;;:63;;;:84;;:95;;;;:::i;:::-;4881:13;4895:17;4881:32;;;;;;;;;;;;;;:46;;:144;;;;;2596:2440;;;;2652:3;;2596:2440;;;-1:-1:-1;5053:13:85;;2159:2914;-1:-1:-1;;;;;;2159:2914:85:o;1427:120:92:-;1516:5;;;1511:16;;;;1483:8;1532:6;;;1511:28;1503:37;;;;;1271:2412:84;1440:21;1463;1496:14;1513:56;1549:7;1558:10;1513:35;:56::i;:::-;1496:73;;1922:31;1943:9;1922:20;:31::i;:::-;1906:47;;2060:13;2043;:30;;2035:39;;;;;;2303:21;2343:60;2374:13;2389;2343:30;:60::i;:::-;-1:-1:-1;2302:101:84;-1:-1:-1;2417:18:84;2413:62;;2437:38;;;;2413:62;2544:18;2565:22;:6;:20;:22::i;:::-;2544:43;;2597:456;2604:15;;;;;:46;;;2637:13;2623:10;:27;;2604:46;2597:456;;;2666:16;2685:57;2716:13;2731:10;2685:30;:57::i;:::-;2666:76;;2773:109;2809:59;2827:7;2836:10;2848:8;2858:9;2809:17;:59::i;:::-;2773:14;;:18;:109::i;:::-;2756:126;-1:-1:-1;2961:32:84;:6;2975:10;2987:5;2961:13;:32::i;:::-;2952:41;;3020:22;:6;:20;:22::i;:::-;3007:35;;2597:456;;;;3063:17;3090:509;3097:15;;3090:509;;3128:16;3147:57;3178:13;3193:10;3147:30;:57::i;:::-;3128:76;;3219:17;3238:12;3254:55;3285:13;3300:8;3254:30;:55::i;:::-;3218:91;;;;3331:7;3323:16;;;;;;3394:33;:9;3411;3422:4;3394:16;:33::i;:::-;3382:45;-1:-1:-1;3507:32:84;:6;3521:10;3533:5;3507:13;:32::i;:::-;3498:41;;3566:22;:6;:20;:22::i;:::-;3553:35;;3090:509;;;;;;3609:67;3645:7;3654:10;3666:9;3609:35;:67::i;:::-;1271:2412;;;;;;;;;;;;:::o;31021:595:77:-;31309:80;31328:6;31336:10;31348:8;31358:14;31374;31309:18;:80::i;:::-;31420:189;31451:6;:24;;;31489:6;:22;;;31525:6;:17;;;31556:20;31590:9;31420:17;:189::i;:::-;31400:17;;;;:209;;;;-1:-1:-1;;;;;;31021:595:77:o;2829:251:60:-;2895:67;2978:12;2993:40;3009:23;2993:15;:40::i;10001:689:79:-;10163:15;10180;10207:13;10234:22;10272:14;10259:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10259:28:79;;10234:53;;10297:22;10335:14;10322:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10322:28:79;;10297:53;;10365:9;10360:290;10380:14;10376:1;:18;10360:290;;;10427:4;10432:5;10427:11;;;;;;;;;;;;;;;;;;;;;;;;;;;10415:23;;:6;10422:1;10415:9;;;;;;;;;;;;;;;;;:23;10452:7;;;;;10485:4;10452:7;10485:11;;;;;;;;;;;;;;;;;;;;;;;;;;;10473:23;;:6;10480:1;10473:9;;;;;;;;;;;;;;;;;:23;10510:7;;;;;10532:108;;;;10583:1;10571:6;10578:1;10571:9;;;;;;;;;;;;;;:13;:30;;;;;10600:1;10588:6;10595:1;10588:9;;;;;;;;;;;;;;:13;10571:30;10563:62;;;;-1:-1:-1;;;10563:62:79;;;;;;;:::i;:::-;10396:3;;10360:290;;;-1:-1:-1;10668:6:79;;;;-1:-1:-1;10001:689:79;-1:-1:-1;;;;;10001:689:79:o;3217:255:60:-;3280:67;3363:12;3378:47;3394:30;3378:15;:47::i;1128:1465:82:-;1336:4;;1352:1212;1376:10;:17;1372:1;:21;1352:1212;;;1414:27;1444:10;1455:1;1444:13;;;;;;;;;;;;;;1414:43;;1511:9;1492:5;:15;;;:28;;:78;;;-1:-1:-1;1540:16:82;;:30;;;1492:78;:124;;;;1608:8;1590:5;:14;;;:26;;1492:124;1471:168;;;1631:8;;;1471:168;1837:24;1815:5;:18;;;:46;;;;;;;;;;:120;;;;-1:-1:-1;1903:32:82;1881:5;:18;;;:54;;;;;;;;;;1815:120;1790:159;;;;;;2027:14;;;;2006:18;;2027:28;;2046:8;2027:18;:28::i;:::-;2006:49;;2135:40;2165:9;2135:29;:40::i;:::-;2131:163;;;2218:1;2203:11;:16;;2195:25;;;;;;-1:-1:-1;;;;;;2316:30:82;;;;;:64;;-1:-1:-1;;;;;;2350:30:82;;;2316:64;2308:73;;;;;;2440:14;;;:28;2503:24;2482:18;;;;:45;;;2503:24;-1:-1:-1;2542:11:82;;-1:-1:-1;2542:11:82;1352:1212;1395:3;;1352:1212;;;-1:-1:-1;2581:5:82;;1128:1465;-1:-1:-1;;;;;;1128:1465:82:o;581:222:86:-;649:4;4847:1:58;684:48:86;;;;;:112;;-1:-1:-1;;4906:1:58;-1:-1:-1;748:48:86;;581:222::o;5145:648:82:-;5256:23;5494:17;5514:9;:16;5534:1;5514:21;:48;;5542:9;:16;5561:1;5542:20;5514:48;;;5538:1;5514:48;5494:68;;5572:37;5633:9;5612:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;5572:71;;5658:9;5653:103;5677:9;:16;5673:1;:20;5653:103;;;5733:9;5743:1;5733:12;;;;;;;;;;;;;;5714:13;5728:1;5714:16;;;;;;;;;;;;;;;;;:31;5695:3;;5653:103;;;-1:-1:-1;5773:13:82;5145:648;-1:-1:-1;;;5145:648:82:o;1930:134:89:-;1983:6;2011:18;2006:1;:23;;1997:33;;;;;18946:1650:77;19149:6;;;19192:35;:10;19212:14;19192:19;:35::i;:::-;19173:54;-1:-1:-1;19376:17:77;19408:65;19437:35;:10;19452:19;19437:14;:35::i;:::-;19408:9;;:28;:65::i;:::-;19376:97;-1:-1:-1;4625:25:58;20081:44:77;;20077:67;;;20135:1;20138:5;20127:17;;;;;;;;20077:67;20156:19;20177:12;20193:26;20208:10;20193:14;:26::i;:::-;20155:64;;;;20234:7;20229:31;;20251:1;20254:5;20243:17;;;;;;;;;;20229:31;20321:11;20335:59;20383:10;20335:43;:12;20367:10;20335:31;:43::i;:::-;:47;;:59::i;:::-;20321:73;;3650:3:58;20465:4:77;:31;20461:129;;;20520:1;20523:5;20512:17;;;;;;;;;;;20461:129;20568:4;-1:-1:-1;20574:4:77;;-1:-1:-1;20560:19:77;;-1:-1:-1;;;;20560:19:77;18946:1650;;;;;;;;;:::o;14285:175:89:-;14331:6;14358:1;14354;:5;;;14345:15;;;;;;14451:3;14400:9;14407:1;14400:5;:9::i;:::-;14391:19;;14413:34;14391:56;:63;;14367:88;;14285:175;;;:::o;2302:114::-;2352:6;2380:1;2375;:6;;;;2366:16;;;;;;-1:-1:-1;2403:7:89;;2408:2;2403:7;;2302:114::o;14638:6524::-;14687:6;-1:-1:-1;;;14710:1:89;:24;;;14701:34;;;;;;-1:-1:-1;;14758:1:89;:25;;;14754:39;;;-1:-1:-1;14792:1:89;14785:8;;14754:39;-1:-1:-1;;;14813:14:89;-1:-1:-1;;;14875:22:89;;:26;;;14871:98;;;14927:35;14918:44;14966:3;14918:51;14871:98;15004:1;14979;14983:18;14979:22;:26;;;14975:98;;;15031:35;15022:44;15070:3;15022:51;14975:98;15108:1;15083;15087:18;15083:22;:26;;;15079:98;;;15135:35;15126:44;15174:3;15126:51;15079:98;15212:1;15187;15191:18;15187:22;:26;;;15183:98;;;15239:35;15230:44;15278:3;15230:51;15183:98;15315:1;15291;15295:17;15291:21;:25;;;15287:97;;;15342:35;15333:44;15381:3;15333:51;15287:97;15418:1;15394;15398:17;15394:21;:25;;;15390:97;;;15445:35;15436:44;15484:3;15436:51;15390:97;15521:1;15497;15501:17;15497:21;:25;;;15493:97;;;15548:35;15539:44;15587:3;15539:51;15493:97;15624:1;15600;-1:-1:-1;;;15600:21:89;:25;;;15596:97;;;15651:35;15642:44;15690:3;15642:51;15596:97;15726:1;15703;15707:16;15703:20;:24;;;15699:96;;;15753:35;15744:44;15792:3;15744:51;15699:96;15828:1;15805;15809:16;15805:20;:24;;;15801:96;;;15855:35;15846:44;15894:3;15846:51;15801:96;15930:1;15907;15911:16;15907:20;:24;;;15903:96;;;15957:35;15948:44;15996:3;15948:51;15903:96;16032:1;16009;16013:16;16009:20;:24;;;16005:96;;;16059:35;16050:44;16098:3;16050:51;16005:96;16133:1;16111;16115:15;16111:19;:23;;;16107:95;;;16160:35;16151:44;16199:3;16151:51;16107:95;16234:1;16212;16216:15;16212:19;:23;;;16208:95;;;16261:35;16252:44;16300:3;16252:51;16208:95;16335:1;16313;16317:15;16313:19;:23;;;16309:95;;;16362:35;16353:44;16401:3;16353:51;16309:95;16436:1;16414;-1:-1:-1;;;16414:19:89;:23;;;16410:95;;;16463:35;16454:44;16502:3;16454:51;16410:95;16536:1;16515;16519:14;16515:18;:22;;;16511:94;;;16563:35;16554:44;16602:3;16554:51;16511:94;16636:1;16615;16619:14;16615:18;:22;;;16611:94;;;16663:35;16654:44;16702:3;16654:51;16611:94;16736:1;16715;16719:14;16715:18;:22;;;16711:94;;;16763:35;16754:44;16802:3;16754:51;16711:94;16836:1;16815;16819:14;16815:18;:22;;;16811:94;;;16863:35;16854:44;16902:3;16854:51;16811:94;16935:1;16915;16919:13;16915:17;:21;;;16911:93;;;16962:35;16953:44;17001:3;16953:51;16911:93;17034:1;17014;17018:13;17014:17;:21;;;17010:93;;;17061:35;17052:44;17100:3;17052:51;17010:93;17133:1;17113;17117:13;17113:17;:21;;;17109:93;;;17160:35;17151:44;17199:3;17151:51;17109:93;17232:1;17212;17216:13;17212:17;:21;;;17208:93;;;17259:35;17250:44;17298:3;17250:51;17208:93;17330:1;17311;17315:12;17311:16;:20;;;17307:92;;;17357:35;17348:44;17396:3;17348:51;17307:92;17428:1;17409;17413:12;17409:16;:20;;;17405:92;;;17455:35;17446:44;17494:3;17446:51;17405:92;17526:1;17507;17511:12;17507:16;:20;;;17503:92;;;17553:35;17544:44;17592:3;17544:51;17503:92;17624:1;17605;17609:12;17605:16;:20;;;17601:92;;;17651:35;17642:44;17690:3;17642:51;17601:92;17721:1;17703;17707:11;17703:15;:19;;;17699:91;;;17748:35;17739:44;17787:3;17739:51;17699:91;17818:1;17800;17804:11;17800:15;:19;;;17796:91;;;17845:35;17836:44;17884:3;17836:51;17796:91;17915:1;17897;17901:11;17897:15;:19;;;17893:91;;;17942:35;17933:44;17981:3;17933:51;17893:91;18012:1;17994;17998:11;17994:15;:19;;;17990:91;;;18039:35;18030:44;18078:3;18030:51;17990:91;18108:1;18091;18095:10;18091:14;:18;;;18087:90;;;18135:35;18126:44;18174:3;18126:51;18087:90;18204:1;18187;18191:10;18187:14;:18;;;18183:90;;;18231:35;18222:44;18270:3;18222:51;18183:90;18300:1;18283;18287:10;18283:14;:18;;;18279:90;;;18327:35;18318:44;18366:3;18318:51;18279:90;18396:1;18379;18383:10;18379:14;:18;;;18375:90;;;18423:35;18414:44;18462:3;18414:51;18375:90;18491:1;18475;18479:9;18475:13;:17;;;18471:89;;;18518:35;18509:44;18557:3;18509:51;18471:89;18586:1;18570;18574:9;18570:13;:17;;;18566:89;;;18613:35;18604:44;18652:3;18604:51;18566:89;18681:1;18665;18669:9;18665:13;:17;;;18661:89;;;18708:35;18699:44;18747:3;18699:51;18661:89;18776:1;18760;18764:9;18760:13;:17;;;18756:89;;;18803:35;18794:44;18842:3;18794:51;18756:89;18870:1;18855;18859:8;18855:12;:16;;;18851:88;;;18897:35;18888:44;18936:3;18888:51;18851:88;18964:1;18949;18953:8;18949:12;:16;;;18945:88;;;18991:35;18982:44;19030:3;18982:51;18945:88;19058:1;19043;19047:8;19043:12;:16;;;19039:88;;;19085:35;19076:44;19124:3;19076:51;19039:88;19152:1;19137;19141:8;19137:12;:16;;;19133:88;;;19179:35;19170:44;19218:3;19170:51;19133:88;19245:1;19231;19235:7;19231:11;:15;;;19227:87;;;19272:35;19263:44;19311:3;19263:51;19227:87;19338:1;19324;19328:7;19324:11;:15;;;19320:87;;;19365:35;19356:44;19404:3;19356:51;19320:87;19431:1;19417;19421:7;19417:11;:15;;;19413:87;;;19458:35;19449:44;19497:3;19449:51;19413:87;19524:1;19510;19514:7;19510:11;:15;;;19506:87;;;19551:35;19542:44;19590:3;19542:51;19506:87;19616:1;19603;19607:6;19603:10;:14;;;19599:86;;;19643:35;19634:44;19682:3;19634:51;19599:86;19708:1;19695;19699:6;19695:10;:14;;;19691:86;;;19735:35;19726:44;19774:3;19726:51;19691:86;19800:1;19787;19791:6;19787:10;:14;;;19783:86;;;19827:35;19818:44;19866:3;19818:51;19783:86;19892:1;19879;19883:6;19879:10;:14;;;19875:86;;;19919:35;19910:44;19958:3;19910:51;19875:86;19983:1;19971;19975:5;19971:9;:13;;;19967:85;;;20010:35;20001:44;20049:3;20001:51;19967:85;20074:1;20062;20066:5;20062:9;:13;;;20058:85;;;20101:35;20092:44;20140:3;20092:51;20058:85;20165:1;20153;20157:5;20153:9;:13;;;20149:85;;;20192:35;20183:44;20231:3;20183:51;20149:85;20256:1;20244;20248:5;20244:9;:13;;;20240:85;;;20283:35;20274:44;20322:3;20274:51;20240:85;20346:1;20335;20339:4;20335:8;:12;;;20331:84;;;20373:35;20364:44;20412:3;20364:51;20331:84;20436:1;20425;20429:4;20425:8;:12;;;20421:84;;;20463:35;20454:44;20502:3;20454:51;20421:84;20526:1;20515;20519:4;20515:8;:12;;;20511:84;;;20553:35;20544:44;20592:3;20544:51;20511:84;20616:1;20605;20609:4;20605:8;:12;;;20601:84;;;20643:35;20634:44;20682:3;20634:51;20601:84;20705:1;20695;20699:3;20695:7;:11;;;20691:83;;;20732:35;20723:44;20771:3;20723:51;20691:83;20794:1;20784;20788:3;20784:7;:11;;;20780:83;;;20821:35;20812:44;20860:3;20812:51;20780:83;20883:1;20873;20877:3;20873:7;:11;;;20869:83;;;20910:35;20901:44;20949:3;20901:51;20869:83;20972:1;20962;20966:3;20962:7;:11;;;20958:83;;;20999:35;20990:44;21038:3;20990:51;20958:83;21074:7;;;;21079:2;21074:7;21068:2;:14;21059:24;;21048:35;-1:-1:-1;;;;;21098:29:89;;;21089:39;;;;;4912:257:60;4971:87;5074:12;5089:33;5105:16;5089:15;:33::i;28987:1123:77:-;29259:1;29245:10;:15;;:49;;;;-1:-1:-1;;;;;;29264:30:77;;;29245:49;29237:58;;;;;;29367:1;29349:14;:19;;:57;;;;-1:-1:-1;;;;;;29372:34:77;;;29349:57;29341:66;;;;;;29469:15;29465:1;:19;:58;;;;-1:-1:-1;29507:16:77;29488:35;;;29465:58;29457:67;;;;;;29587:10;29583:1;:14;:48;;;;-1:-1:-1;29615:16:77;29601:30;;;29583:48;29575:57;;;;;;29733:16;29712:37;;;29678:72;;;;;;29806:45;;-1:-1:-1;;29806:45:77;-1:-1:-1;;;;;29806:45:77;;;;-1:-1:-1;;;;29861:53:77;-1:-1:-1;;;29861:53:77;;;;;;;;;;;;-1:-1:-1;;;;29924:55:77;-1:-1:-1;;;29924:55:77;;;;;;-1:-1:-1;;;;29989:45:77;-1:-1:-1;;;29989:45:77;;;;;;;;;;;-1:-1:-1;;;;;30044:59:77;-1:-1:-1;;;30044:59:77;;;;;;;;28987:1123::o;28669:312::-;28824:1;28806:14;:19;;:57;;;;-1:-1:-1;;;;;;28829:34:77;;;28806:57;28798:66;;;;;;28921:28;;;;;:53;;-1:-1:-1;;28921:53:77;-1:-1:-1;;;;;28921:53:77;;;;;;;;;28669:312::o;4025:2699:76:-;4140:7;4149:4;4169:21;4193:22;4205:9;4193:11;:22::i;:::-;4169:46;-1:-1:-1;2399:5:58;4283:8:76;:24;:29;4279:52;;4322:1;4325:5;4314:17;;;;;;;4279:52;4404:8;4387:13;:25;4383:48;;4422:1;4425:5;4414:17;;;;;;;4383:48;2399:5:58;4556:24:76;;;4555:42;2984:2:58;4680:38:76;;4676:1887;;4742:10;-1:-1:-1;4754:4:76;;-1:-1:-1;4734:25:76;;-1:-1:-1;4734:25:76;4676:1887;3036:3:58;4780:10:76;:39;4776:1787;;5092:20;2399:5:58;2520:7;5212:30:76;;5211:68;5131:148;;-1:-1:-1;;5131:148:76;;-1:-1:-1;2776:1:58;5131:148:76;5528:37;3257:2:58;5500:65:76;2776:1:58;5584:12:76;:37;;;;;;5626:1;5583:44;5306:335;;;;;;;;;4776:1787;3090:4:58;5662:10:76;:40;5658:905;;5718:20;2399:5:58;2567:8;5839:31:76;;5838:69;5757:150;;-1:-1:-1;;5757:150:76;;-1:-1:-1;2825:2:58;5757:150:76;5976:38;3310:3:58;5947:67:76;2825:2:58;6033:12:76;:38;;;;5658:905;3147:4:58;6112:10:76;:42;6108:455;;6170:20;2399:5:58;2617:9;6292:33:76;;6291:71;6209:153;;-1:-1:-1;;6209:153:76;;-1:-1:-1;2877:2:58;6209:153:76;6433:40;3366:3:58;6402:71:76;2877:2:58;6492:12:76;:40;;;;6108:455;6706:3;6711:5;6698:19;;;;;;4025:2699;;;;;;:::o;732:234:90:-;804:4;837:1;828:5;:10;;:26;;;;;851:3;842:5;:12;;828:26;820:35;;;;;;-1:-1:-1;;;914:9:90;903:21;-1:-1:-1;;;902:39:90;;;901:58;;732:234::o;928:386:81:-;2215:2:58;1069:27:81;:12;:25;:27::i;:::-;:58;;1061:86;;;;-1:-1:-1;;;1061:86:81;;;;;;;:::i;:::-;1157:61;1221:35;:33;:35::i;:::-;-1:-1:-1;;;;;1266:14:81;;;;;;;;;;;;;;;:26;;;;;;;-1:-1:-1;1266:26:81;;:41;928:386::o;972:752:86:-;1051:7;1096:1;1078:5;:15;;;:19;:77;;;;-1:-1:-1;1101:15:86;;;;4906:1:58;-1:-1:-1;1101:54:86;1078:77;1070:86;;;;;;1275:15;;;;4847:1:58;-1:-1:-1;1271:81:86;;-1:-1:-1;1338:14:86;;;;1331:21;;1271:81;1363:20;1386:45;1429:1;1411:5;:15;;;:19;1386:24;:45::i;:::-;1662:14;;;;1363:68;;-1:-1:-1;1662:55:86;;2617:9:58;;1662:32:86;;1363:68;1662:18;:32::i;8128:329:60:-;8220:12;445:7;8420:9;8412:18;;;;;;;;:38;;8128:329;-1:-1:-1;;8128:329:60:o;2398:225::-;2464:41;2521:12;2536:40;2552:23;2536:15;:40::i;6575:250::-;6645:58;6719:12;6734:44;6750:27;6734:15;:44::i;14753:385:82:-;14869:23;14908:30;14941:42;14957:7;14966:16;14941:15;:42::i;:::-;14908:75;;15061:1;15044:6;:13;:18;15040:37;;15071:6;-1:-1:-1;15064:13:82;;15040:37;15088:20;15101:6;15088:12;:20::i;1180:245:91:-;1403:1;1394:10;;;1354:21;;;;1393:24;;1180:245::o;4424:809:74:-;4521:6;4541:16;4571:5;4602:27;4631:29;4664:32;4685:10;4664:20;:32::i;:::-;4601:95;;-1:-1:-1;4601:95:74;-1:-1:-1;4707:11:74;-1:-1:-1;;;;;4732:33:74;;4728:438;;-1:-1:-1;5019:1:74;;-1:-1:-1;658:4:74;4728:438;;;5058:10;-1:-1:-1;;;;;5058:34:74;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5051:43;;5123:1;5116:4;:8;5108:17;;;;;;5184:4;5190:10;;-1:-1:-1;5190:10:74;-1:-1:-1;4424:809:74;-1:-1:-1;;4424:809:74:o;11271:218:75:-;11348:12;11372:41;11416:32;:30;:32::i;:::-;11465:17;;;;;;-1:-1:-1;;11465:17:75;;;;;11271:218::o;23057:1232:77:-;23273:7;23323:1;23300:20;:24;23292:33;;;;;;23492:9;23472:17;:29;23468:57;;;-1:-1:-1;23510:15:77;23503:22;;23468:57;23536:16;23555:32;:9;23569:17;23555:13;:32::i;:::-;23536:51;;23612:20;23601:8;:31;23597:155;;;23726:15;23719:22;;;;;23597:155;23811:23;23849:73;23901:20;23849:47;:8;3650:3:58;23849:12:77;:47::i;:73::-;23811:111;-1:-1:-1;23986:20:77;24009:54;3650:3:58;23811:111:77;24009:37;:54::i;:::-;23986:77;-1:-1:-1;24074:21:77;24110:141;3650:3:58;24111:70:77;24152:28;:10;23986:77;24152:14;:28::i;:::-;24111:36;:15;24131;24111:19;:36::i;24110:141::-;24074:177;23057:1232;-1:-1:-1;;;;;;;;;;23057:1232:77:o;8599:105:89:-;8646:6;8669:14;;;;-1:-1:-1;;;;;;8669:14:89;;8660:24;;;;;;-1:-1:-1;8697:2:89;;;8599:105::o;666:1445:85:-;912:27;;:34;800:21;;837:25;;;;908:73;;960:21;;;979:1;960:21;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;953:28;;;;;;908:73;1261:27;;:34;1244:570;-1:-1:-1;;1298:3:85;;;1297:9;1244:570;;1323:27;1353:14;:27;;;1381:1;1353:30;;;;;;;;;;;;;;1323:60;;1479:9;1451:25;:5;:23;:25::i;:::-;:37;1447:51;;;1490:8;;;1447:51;1683:16;;1665:34;;1661:143;;1736:16;;1770:19;;;;;1736:16;-1:-1:-1;1661:143:85;1244:570;;;;;;1918:35;1975:17;1956:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;1918:75:85;-1:-1:-1;2007:21:85;;2003:71;;2060:14;2030:13;2044:1;2030:16;;;;;;;;;;;;;;;;;;:44;2091:13;666:1445;-1:-1:-1;;;;;666:1445:85:o;8106:2091:74:-;8248:26;;:::i;:::-;8287:21;8310:29;8355:47;8381:10;8393:8;8355:25;:47::i;:::-;8286:116;;;;8417:14;8435:1;8417:19;8413:1562;;;8527:27;8803:33;8825:10;8803:21;:33::i;:::-;8685:151;;-1:-1:-1;8685:151:74;;-1:-1:-1;8685:151:74;-1:-1:-1;;;;;;8855:33:74;;;8851:1114;;8908:75;8986:37;:35;:37::i;:::-;8908:115;;9337:9;9333:1;:13;:38;;;;;9362:9;9350:8;:21;;9333:38;:71;;;;-1:-1:-1;9388:16:74;9375:29;;;9333:71;9325:80;;;;;;9478:14;9474:1;:18;:57;;;;-1:-1:-1;;;;;;9496:35:74;;;9474:57;9466:66;;;;;;9584:41;9628:17;;;;;;;;;;;:27;;;;;;;;;;9673:41;;-1:-1:-1;;9673:41:74;;;;;-1:-1:-1;;9732:52:74;;-1:-1:-1;;;;;9732:52:74;;;;-1:-1:-1;;;;9802:61:74;-1:-1:-1;;;9802:61:74;;;;;;;9886:64;;9628:27;;:17;;9886:64;;;;9732:52;;9886:64;:::i;:::-;;;;;;;;8851:1114;;;8413:1562;;9992:198;;;;;;;;-1:-1:-1;9992:198:74;;;;;;;;;10152:27;;;;:2;:27;9992:198;;;;;-1:-1:-1;8106:2091:74;;;;;:::o;31622:263:77:-;31808:70;31827:6;31835:10;31847:8;31857:4;31863:14;31808:18;:70::i;:::-;31622:263;;;;:::o;2037:716::-;2151:16;;2201:19;2197:38;;-1:-1:-1;2230:1:77;;-1:-1:-1;2230:1:77;2222:13;;2197:38;2270:1;2253:14;:18;2245:27;;;;;;2329:68;2375:6;:21;;;2329:41;2355:14;2329:6;:21;;;:25;;:41;;;;:::i;:68::-;2317:80;;2415:64;2457:6;:21;;;2415:37;2437:14;2415:6;:17;;;:21;;:37;;;;:::i;:64::-;2514:21;;;;2407:72;;-1:-1:-1;2514:46:77;;2545:14;2514:30;:46::i;:::-;2490:21;;;:70;2590:17;;;;:33;;2617:5;2590:26;:33::i;:::-;2570:17;;;:53;2657:21;;;;:41;;2688:9;2657:30;:41::i;:::-;2633:21;;;:65;2709:37;2633:6;2709:29;:37::i;5198:1443:85:-;5356:36;5395:14;:27;;;5423:5;5395:34;;;;;;;;;;;;;;5356:73;;5609:5;5618:1;5609:10;5605:779;;5780:32;5815:14;:27;;;5851:1;5843:5;:9;5815:38;;;;;;;;;;;;;;5780:73;;5914:14;:25;;;5889:10;:21;;;:50;:116;;;;;5982:14;:23;;;5959:10;:19;;;:46;5889:116;:186;;;;-1:-1:-1;6025:20:85;;;;4700:1:58;6025:50:85;5889:186;5868:506;;;6210:19;;;;:30;;6234:5;6210:23;:30::i;:::-;6188:19;;;:52;6284:24;6258:23;;;:50;6326:33;:14;6353:5;6326:26;:33::i;:::-;5605:779;;4700:1:58;6476:24:85;;;:53;;;6539:23;;;:31;;;;6580:27;;:54;-1:-1:-1;;5198:1443:85:o;3821:792:84:-;3977:16;4005:99;4107:35;:33;:35::i;:::-;-1:-1:-1;;;;;4170:14:84;;4152:15;4170:14;;;;;;;;;;;:26;;;;;;;;:36;;;;;;;;:45;4005:137;;-1:-1:-1;4170:45:84;;;;4152:63;;;;4397:70;4185:10;4197:8;4457:9;4397:37;:70::i;:::-;4351:116;-1:-1:-1;4489:36:84;4351:116;4516:8;4489:26;:36::i;:::-;-1:-1:-1;;;;;4543:14:84;;;;;;;;;;;;;;;;:26;;;;;;;;;:36;;;;;;;-1:-1:-1;;;4543:36:84;;;4536:43;;-1:-1:-1;;;;;;4536:43:84;;;-1:-1:-1;4543:36:84;3821:792::o;25850:1161:77:-;26154:100;26257:29;:27;:29::i;:::-;26296:35;26334:17;;;;;;;;;;;:27;;;;;;;;:43;;;;;;;;;26478:25;;;26513:15;;;:26;;;26569:24;;-1:-1:-1;;;;;26569:24:77;;;26549:17;;;:44;;;;-1:-1:-1;;;26627:28:77;;;;;26603:21;;;:52;26690:29;-1:-1:-1;;;26690:29:77;;;;26665:22;;;:54;-1:-1:-1;;;26749:24:77;;;;26729:17;;;:44;-1:-1:-1;;;26810:31:77;;;;;;26783:24;;;:58;26154:132;;-1:-1:-1;26334:43:77;26852:153;;;;26910:28;;;;-1:-1:-1;;;;;26910:28:77;26886:21;;;:52;26852:153;;;26993:1;26969:21;;;:25;26852:153;25850:1161;;;;;;;;:::o;2027:143:92:-;2098:6;2123:40;2127:32;2131:1;3650:3:58;2127::92;:32::i;:::-;2161:1;2123:3;:40::i;20852:1240:77:-;20918:6;20926:4;3650:3:58;21007:10:77;:38;21003:61;;;-1:-1:-1;21055:1:77;;-1:-1:-1;21055:1:77;21047:17;;21003:61;21159:13;21175:71;21205:40;3650:3:58;21234:10:77;21205:28;:40::i;:::-;21175:10;;:29;:71::i;:::-;21159:87;;21530:21;21554:29;21576:6;21554:21;:29::i;:::-;21530:53;;21678:1;21660:14;:19;;;21656:42;;21689:1;21692:5;21681:17;;;;;;;;21656:42;21708:13;21736:317;21773:266;21812:157;21855:32;21872:14;21855:16;:32::i;:::-;4455:21:58;21812:17:77;:157::i;:::-;-1:-1:-1;;;21773:17:77;:266::i;:::-;21736:19;:317::i;:::-;21708:345;;;-1:-1:-1;22080:4:77;;-1:-1:-1;;;;20852:1240:77;;;;:::o;13338:769:89:-;13387:6;13414:1;13410;:5;;;13401:15;;;;;;13423:10;13443:13;;;;-1:-1:-1;;;13466:25:89;;13462:56;;13502:2;13506:9;;;;13495;13462:56;13533:11;13527:2;:17;13523:48;;13555:2;13559:9;;;;13548;13523:48;13586:7;13580:2;:13;13576:44;;13604:2;13608:9;;;;13597;13576:44;13635:5;13629:2;:11;13625:40;;13651:1;13654:8;;;;13644;13625:40;13680:4;13674:2;:10;13670:39;;13695:1;13698:8;;;;13688;13670:39;13724:3;13718:2;:9;13714:38;;13738:1;13741:8;;;;13731;13714:38;13767:3;13761:2;:9;13757:23;;13779:1;13772:8;;;;13757:23;-1:-1:-1;;13835:8:89;;13847:2;13835:14;13868:11;;;;13892:3;:9;;;13868:34;-1:-1:-1;;;13908:166:89;13952:1;13946:3;:7;13908:166;;;13974:8;;;14008:3;14002:9;;;14051:16;;;14041:26;;;;;14026:3;:7;14019:14;;13963:1;13955:9;13908:166;;;-1:-1:-1;14095:6:89;;13338:769;-1:-1:-1;;;;;13338:769:89:o;1013:838:90:-;1215:1;1210:6;;;1219:66;1210:75;;;1135:70;;1134:152;1381:1;1376:6;;;1385:66;1376:75;;;1301:70;;1300:152;1547:1;1542:6;;;1471:66;1467:70;;;;1466:83;1644:1;1639:6;;;1648:66;1639:75;;;1564:70;;1563:152;1739:2;1734:7;;;1729:13;1766:2;1761:7;;;1756:13;1794:2;1789:7;;;1783:14;1833:3;1828:8;;;1839:4;1828:15;;;1815:8;;1814:30;;1013:838::o;16718:1107:82:-;16820:23;550:2;16917:6;:30;;;;16909:39;;;;;;16959:90;17052:37;:35;:37::i;:::-;-1:-1:-1;;;;;17166:14:82;;17099:64;17166:14;;;;;;;;;;16959:130;;-1:-1:-1;17223:28:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;17190:61;;17267:9;17262:533;17286:6;17282:10;;:1;:10;17262:533;;;17313:42;17358:12;17371:1;17358:15;;;;;;;;17313:60;;17387:27;17417:6;17424:1;17417:9;;;;;;;;;;;;;;;;;;;17565:23;;;;;17546:42;;17619:21;;;;;17602:14;;;:38;;;;17672:22;-1:-1:-1;;;17672:22:82;;;17654:15;;;:40;-1:-1:-1;;;17725:21:82;;;;;;;17708:38;;:14;;;:38;17760:17;;:24;;;;-1:-1:-1;17565:23:82;17294:3;17262:533;;;-1:-1:-1;17812:6:82;16718:1107;-1:-1:-1;;;;;16718:1107:82:o;15883:829::-;15977:13;;15960:14;15977:13;16023:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16023:21:82;;16000:44;;16059:9;16054:257;16074:6;16070:1;:10;16054:257;;;16101:27;16131:6;16138:1;16131:9;;;;;;;;;;;;;;16101:39;;16221:79;16250:5;:16;;;16268:5;:14;;;16284:5;:15;;;16221:28;:79::i;:::-;16212:3;16216:1;16212:6;;;;;;;;;;;;;;;;;:88;-1:-1:-1;16082:3:82;;16054:257;;;-1:-1:-1;16365:1:82;16376:330;16387:6;16383:1;:10;16376:330;;;16421:1;16436:243;16447:1;16443;:5;:28;;;;;16465:3;16469:1;16465:6;;;;;;;;;;;;;;16452:3;16460:1;16456;:5;16452:10;;;;;;;;;;;;;;:19;16443:28;16436:243;;;16551:3;16555:1;16551:6;;;;;;;;;;;;;;16559:3;16567:1;16563;:5;16559:10;;;;;;;;;;;;;;16528:3;16536:1;16532;:5;16528:10;;;;;;;;;;;;;16540:3;16544:1;16540:6;;;;;;;;;;;;;16527:43;;;;;;;;;;16618:6;16625:1;16618:9;;;;;;;;;;;;;;16629:6;16640:1;16636;:5;16629:13;;;;;;;;;;;;;;16589:6;16600:1;16596;:5;16589:13;;;;;;;;;;;;;16604:6;16611:1;16604:9;;;;;;;;;;;;;;;;;16588:55;;;;;-1:-1:-1;;16661:3:82;16436:243;;;-1:-1:-1;16692:3:82;;16376:330;;2832:435:74;2928:27;2957:29;3002:50;3055:32;:30;:32::i;:::-;3097:27;3127:17;;;;;-1:-1:-1;;3127:17:74;;;;3184:13;-1:-1:-1;;;;;3184:13:74;;;-1:-1:-1;;;3234:26:74;;;;;;-1:-1:-1;2832:435:74:o;4607:217:60:-;4669:41;4726:12;4741:36;4757:19;4741:15;:36::i;6469:548:74:-;6601:21;6636:29;6690:75;6768:37;:35;:37::i;:::-;6815:41;6859:17;;;;;;;;;;;:27;;;;;;-1:-1:-1;;;6859:27:74;;6913:26;;;;-1:-1:-1;;;;;6913:26:74;;-1:-1:-1;;;6975:35:74;;;;;;6469:548::o;4246:261:60:-;4313:75;4404:12;4419:41;4435:24;4419:15;:41::i;27280:581:77:-;27370:35;27408:32;27433:6;27408:24;:32::i;:::-;27370:70;;27502:23;27528:13;:24;;;;;;;;;;;;27502:50;;27563:224;27594:13;27621:6;:17;;;27652:6;:21;;;27687:6;:22;;;27723:16;27563:224;;27753:6;:24;;;27563:17;:224::i;:::-;27798:56;27817:13;27832:6;:21;;;27798:18;:56::i;3770:191:89:-;3827:6;3857:13;;;;:9;;;;:13;-1:-1:-1;;;;;;3885:19:89;;;;;:42;;-1:-1:-1;;;;;;3908:19:89;;;3876:52;;;;;814:554:83;947:7;5408:6:58;974:38:83;;;966:47;;;;;;1043:16;1031:28;;;1023:37;;;;;;4906:1:58;1078:48:83;;;1070:57;;;;;;-1:-1:-1;1183:42:83;1223:2;1183:42;;;;1250:39;1288:1;1250:39;;;;1182:108;1321:25;;;1182:165;814:554;;;;;:::o;7004:226:60:-;7066:50;7132:12;7147:36;7163:19;7147:15;:36::i;27017:257:77:-;27181:18;;27218:50::o;-1:-1:-1:-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;14:161:164:-;83:20;;143:6;132:18;;122:29;;112:2;;165:1;162;155:12;180:193;;302:2;290:9;281:7;277:23;273:32;270:2;;;323:6;315;308:22;270:2;-1:-1:-1;351:16:164;;260:113;-1:-1:-1;260:113:164:o;378:196::-;;489:2;477:9;468:7;464:23;460:32;457:2;;;510:6;502;495:22;457:2;538:30;558:9;538:30;:::i;579:367::-;;;704:2;692:9;683:7;679:23;675:32;672:2;;;725:6;717;710:22;672:2;753:30;773:9;753:30;:::i;:::-;743:40;;833:2;822:9;818:18;805:32;880:5;873:13;866:21;859:5;856:32;846:2;;907:6;899;892:22;846:2;935:5;925:15;;;662:284;;;;;:::o;1150:211::-;-1:-1:-1;;;;;1322:32:164;;;;1304:51;;1292:2;1277:18;;1259:102::o;1366:347::-;1568:2;1550:21;;;1607:2;1587:18;;;1580:30;1646:25;1641:2;1626:18;;1619:53;1704:2;1689:18;;1540:173::o;1718:346::-;1920:2;1902:21;;;1959:2;1939:18;;;1932:30;-1:-1:-1;;;1993:2:164;1978:18;;1971:52;2055:2;2040:18;;1892:172::o;2069:344::-;2271:2;2253:21;;;2310:2;2290:18;;;2283:30;-1:-1:-1;;;2344:2:164;2329:18;;2322:50;2404:2;2389:18;;2243:170::o;2418:347::-;2620:2;2602:21;;;2659:2;2639:18;;;2632:30;2698:25;2693:2;2678:18;;2671:53;2756:2;2741:18;;2592:173::o;2770:345::-;2972:2;2954:21;;;3011:2;2991:18;;;2984:30;-1:-1:-1;;;3045:2:164;3030:18;;3023:51;3106:2;3091:18;;2944:171::o;3120:337::-;3322:2;3304:21;;;3361:2;3341:18;;;3334:30;-1:-1:-1;;;3395:2:164;3380:18;;3373:43;3448:2;3433:18;;3294:163::o;3462:343::-;3664:2;3646:21;;;3703:2;3683:18;;;3676:30;-1:-1:-1;;;3737:2:164;3722:18;;3715:49;3796:2;3781:18;;3636:169::o;3810:340::-;4012:2;3994:21;;;4051:2;4031:18;;;4024:30;-1:-1:-1;;;4085:2:164;4070:18;;4063:46;4141:2;4126:18;;3984:166::o;4155:339::-;4357:2;4339:21;;;4396:2;4376:18;;;4369:30;-1:-1:-1;;;4430:2:164;4415:18;;4408:45;4485:2;4470:18;;4329:165::o;4499:347::-;4701:2;4683:21;;;4740:2;4720:18;;;4713:30;4779:25;4774:2;4759:18;;4752:53;4837:2;4822:18;;4673:173::o;4851:346::-;5053:2;5035:21;;;5092:2;5072:18;;;5065:30;-1:-1:-1;;;5126:2:164;5111:18;;5104:52;5188:2;5173:18;;5025:172::o;5202:345::-;5404:2;5386:21;;;5443:2;5423:18;;;5416:30;-1:-1:-1;;;5477:2:164;5462:18;;5455:51;5538:2;5523:18;;5376:171::o;5552:342::-;5754:2;5736:21;;;5793:2;5773:18;;;5766:30;-1:-1:-1;;;5827:2:164;5812:18;;5805:48;5885:2;5870:18;;5726:168::o;5899:340::-;6101:2;6083:21;;;6140:2;6120:18;;;6113:30;-1:-1:-1;;;6174:2:164;6159:18;;6152:46;6230:2;6215:18;;6073:166::o;6244:343::-;6446:2;6428:21;;;6485:2;6465:18;;;6458:30;-1:-1:-1;;;6519:2:164;6504:18;;6497:49;6578:2;6563:18;;6418:169::o;6592:343::-;6794:2;6776:21;;;6833:2;6813:18;;;6806:30;-1:-1:-1;;;6867:2:164;6852:18;;6845:49;6926:2;6911:18;;6766:169::o;6940:346::-;7142:2;7124:21;;;7181:2;7161:18;;;7154:30;-1:-1:-1;;;7215:2:164;7200:18;;7193:52;7277:2;7262:18;;7114:172::o;7291:347::-;7493:2;7475:21;;;7532:2;7512:18;;;7505:30;7571:25;7566:2;7551:18;;7544:53;7629:2;7614:18;;7465:173::o;7643:218::-;-1:-1:-1;;;;;7807:47:164;;;;7789:66;;7777:2;7762:18;;7744:117::o;7866:188::-;8040:6;8028:19;;;;8010:38;;7998:2;7983:18;;7965:89::o;8059:265::-;8267:6;8255:19;;;;8237:38;;8306:2;8291:18;;8284:34;8225:2;8210:18;;8192:132::o", "language": "Solidity", "natspec": {"methods": {"initializeMarkets(uint16,bool)": {"notice": "Initialize the market for a given currency id, done once a quarter", "details": "emit:MarketsInitializedauth:none", "params": {"currencyId": "currency of markets to initialize", "isFirstInit": "true if this is the first time the markets have been initialized"}}, "sweepCashIntoMarkets(uint16)": {"notice": "Sweeps nToken cash balance into markets after accounting for cash withholding. Can be done after fCash residuals are purchased to ensure that markets have maximum liquidity.", "details": "emit:CashSweepIntoMarketsauth:none", "params": {"currencyId": "currency of markets to initialize"}}, "getLibInfo()": {"notice": "Get a list of deployed library addresses (sorted by library name)"}}, "kind": "dev", "notice": "Initialize markets is called once every quarter to setup the new markets. Only the nToken account can initialize markets, and this method will be called on behalf of that account. In this action the following will occur:  - nToken Liquidity Tokens will be settled  - Any ifCash assets will be settled  - If nToken liquidity tokens are settled with negative net ifCash, enough cash will be withheld at the PV    to purchase offsetting positions  - fCash positions are written to storage  - For each market, calculate the proportion of fCash to cash given:     - previous oracle rates     - rate anchor set by governance     - percent of cash to deposit into the market set by governance  - Set new markets and add liquidity tokens to portfolio", "version": 1}, "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBB6DD58E EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xC4C96DAE EQ PUSH2 0x72 JUMPI DUP1 PUSH4 0xD0E064C0 EQ PUSH2 0x90 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0x6B CALLDATASIZE PUSH1 0x4 PUSH2 0x4F93 JUMP JUMPDEST PUSH2 0xB0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7A PUSH2 0x29D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x87 SWAP2 SWAP1 PUSH2 0x4FE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0xAB CALLDATASIZE PUSH1 0x4 PUSH2 0x4FAD JUMP JUMPDEST PUSH2 0x2B5 JUMP JUMPDEST TIMESTAMP PUSH2 0xB9 PUSH2 0x4DD8 JUMP JUMPDEST PUSH2 0xC3 DUP2 DUP5 PUSH2 0x731 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD MLOAD MLOAD PUSH2 0xEF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x514A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xFA DUP4 PUSH2 0x74A JUMP JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x80 ADD MLOAD LT ISZERO PUSH2 0x120 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x5090 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x0 SWAP2 PUSH2 0x13E SWAP2 SWAP1 PUSH1 0x2 BYTE PUSH2 0xE10 MUL PUSH2 0x76D JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT PUSH2 0x15F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x4FFB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x19D SWAP1 DUP6 SWAP1 DUP4 PUSH2 0x196 JUMP JUMPDEST PUSH2 0x183 PUSH2 0x4E21 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x17B JUMPI SWAP1 POP JUMPDEST POP DUP8 PUSH2 0x7D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B8 DUP3 DUP7 PUSH1 0x60 ADD MLOAD PUSH2 0x930 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC0 DUP7 ADD MLOAD DUP7 MLOAD MLOAD SWAP2 SWAP3 POP PUSH2 0x1D1 SWAP2 PUSH2 0xFFFF AND DUP5 PUSH2 0x94C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x21285613 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x4250AC26 SWAP1 PUSH2 0x20A SWAP1 DUP11 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x536D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x236 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x25A SWAP2 SWAP1 PUSH2 0x4F7B JUMP JUMPDEST POP PUSH32 0x120B36BD1B47AE64F0F3EA6EB0FBFBA209B2C780A31864E382D9957377A9F946 DUP8 DUP3 PUSH1 0x40 MLOAD PUSH2 0x28C SWAP3 SWAP2 SWAP1 PUSH2 0x536D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0x0 SWAP1 JUMP JUMPDEST TIMESTAMP PUSH2 0x2BE PUSH2 0x4DD8 JUMP JUMPDEST PUSH2 0x2C8 DUP2 DUP6 PUSH2 0x731 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x0 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x321 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x30E PUSH2 0x4E21 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x306 JUMPI SWAP1 POP JUMPDEST POP DUP3 MLOAD PUSH1 0x20 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x347 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x52E3 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x371 JUMPI PUSH1 0x20 DUP3 ADD MLOAD MLOAD MLOAD ISZERO PUSH2 0x371 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x5233 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x384 DUP4 DUP4 DUP7 DUP10 PUSH2 0xFFFF AND DUP10 PUSH2 0x96F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x39E DUP8 PUSH2 0xFFFF AND DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0xA01 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A8 PUSH2 0x4E21 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP7 MLOAD PUSH1 0x20 ADD MLOAD DUP2 LT ISZERO PUSH2 0x6A1 JUMPI PUSH2 0x3D7 PUSH2 0x3C8 DUP3 PUSH1 0x1 ADD PUSH2 0xA3D JUMP JUMPDEST PUSH2 0x3D1 DUP11 PUSH2 0x74A JUMP JUMPDEST SWAP1 PUSH2 0x76D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE DUP4 MLOAD DUP1 MLOAD PUSH1 0x0 SWAP2 PUSH2 0x40A SWAP2 DUP9 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x3F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x2 PUSH1 0xFF AND ADD DUP8 DUP13 PUSH2 0xAE1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x425 DUP11 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0xB46 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP10 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x43B SWAP1 PUSH1 0x1 DUP7 ADD DUP5 PUSH2 0xBA3 JUMP JUMPDEST SWAP1 POP DUP12 DUP1 PUSH2 0x455 JUMPI POP DUP4 PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x455 JUMPI POP DUP9 MLOAD PUSH1 0x2 EQ JUMPDEST DUP1 PUSH2 0x466 JUMPI POP PUSH1 0x20 DUP11 ADD MLOAD MLOAD MLOAD DUP5 LT ISZERO JUMPDEST DUP1 PUSH2 0x494 JUMPI POP DUP4 PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x494 JUMPI POP DUP9 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x484 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xC0 ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x515 JUMPI PUSH1 0x0 PUSH2 0x4BC DUP5 DUP10 PUSH1 0x60 ADD MLOAD DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x4AF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xC15 JUMP JUMPDEST SWAP1 POP DUP1 DUP8 PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x4EC DUP2 DUP6 DUP5 DUP12 PUSH1 0x40 ADD MLOAD DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x4DE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH2 0xC32 JUMP JUMPDEST PUSH1 0xC0 DUP9 ADD DUP2 SWAP1 MSTORE PUSH2 0x50F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x5313 JUMP JUMPDEST POP PUSH2 0x67D JUMP JUMPDEST DUP4 PUSH2 0x53A JUMPI DUP9 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x527 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xC0 ADD MLOAD SWAP5 POP PUSH2 0x597 JUMP JUMPDEST DUP4 PUSH1 0x1 EQ ISZERO PUSH2 0x55C JUMPI PUSH2 0x555 DUP10 PUSH2 0x550 DUP14 PUSH2 0x74A JUMP JUMPDEST PUSH2 0xC5C JUMP JUMPDEST SWAP5 POP PUSH2 0x597 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x573 PUSH2 0x56A DUP7 PUSH2 0xA3D JUMP JUMPDEST PUSH2 0x3D1 DUP15 PUSH2 0x74A JUMP JUMPDEST SWAP1 POP PUSH2 0x593 DUP2 DUP8 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x586 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xCF5 JUMP JUMPDEST SWAP6 POP POP JUMPDEST PUSH1 0x0 PUSH2 0x5BC DUP7 DUP5 DUP5 DUP12 PUSH1 0x40 ADD MLOAD DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x5AF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xD8C JUMP JUMPDEST SWAP1 POP DUP8 PUSH1 0x20 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5CE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SGT ISZERO PUSH2 0x648 JUMPI DUP8 PUSH1 0x20 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5ED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x601 DUP5 DUP3 PUSH2 0xC15 JUMP JUMPDEST DUP8 PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x624 DUP8 PUSH1 0x40 ADD MLOAD DUP6 DUP5 DUP12 PUSH1 0x40 ADD MLOAD DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x4DE JUMPI INVALID JUMPDEST SWAP6 POP DUP6 PUSH2 0x643 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x5062 JUMP JUMPDEST PUSH2 0x658 JUMP JUMPDEST PUSH2 0x652 DUP5 DUP3 PUSH2 0xC15 JUMP JUMPDEST PUSH1 0x40 DUP9 ADD MSTORE JUMPDEST PUSH1 0x1 DUP8 PUSH1 0x40 ADD MLOAD SLT ISZERO PUSH2 0x66D JUMPI PUSH1 0x1 PUSH1 0x40 DUP9 ADD MSTORE JUMPDEST POP PUSH1 0xC0 DUP7 ADD DUP6 SWAP1 MSTORE PUSH1 0xE0 DUP7 ADD DUP12 SWAP1 MSTORE JUMPDEST PUSH1 0xC0 DUP7 ADD MLOAD PUSH1 0xA0 DUP8 ADD MSTORE PUSH2 0x696 DUP7 PUSH2 0xFFFF DUP16 AND DUP13 PUSH2 0xE2E JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x3AC JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x6BF DUP8 PUSH1 0xC0 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0xE77 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP SWAP3 POP POP POP PUSH2 0x6DB DUP8 PUSH1 0xC0 ADD MLOAD DUP12 PUSH2 0xFFFF AND DUP10 PUSH1 0x60 ADD MLOAD PUSH2 0x94C JUMP JUMPDEST PUSH2 0x6EE DUP8 PUSH1 0xC0 ADD MLOAD DUP3 DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0x10B6 JUMP JUMPDEST PUSH32 0xCFFEFF9ACCC9171F01FEC36E09A1A06F0160CE50A8C4C0A2ADFF9CEC562ADF08 DUP11 PUSH1 0x40 MLOAD PUSH2 0x71D SWAP2 SWAP1 PUSH2 0x535E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x73B DUP3 DUP3 PUSH2 0x1129 JUMP JUMPDEST PUSH2 0x744 DUP2 PUSH2 0x11CC JUMP JUMPDEST SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x76A700 DUP3 LT ISZERO PUSH2 0x75C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x76A700 DUP3 JUMPDEST MOD DUP3 SUB SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x7C7 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7ED DUP6 PUSH1 0xC0 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND PUSH2 0x11EF JUMP JUMPDEST PUSH1 0xA0 DUP7 ADD MLOAD DUP6 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 BYTE PUSH3 0xF4240 MUL SWAP1 PUSH1 0x0 SWAP1 ISZERO PUSH2 0x81A JUMPI PUSH2 0x815 DUP6 PUSH3 0x76A700 PUSH2 0xB46 JUMP JUMPDEST PUSH2 0x81C JUMP JUMPDEST DUP5 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x829 DUP5 PUSH2 0x1224 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 ISZERO PUSH2 0x912 JUMPI PUSH1 0x0 PUSH2 0x842 DUP10 PUSH1 0x80 ADD MLOAD DUP4 PUSH2 0x1249 JUMP JUMPDEST SWAP1 POP DUP8 MLOAD PUSH1 0x0 EQ DUP1 ISZERO PUSH2 0x861 JUMPI POP DUP9 MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x861 SWAP1 DUP3 DUP10 PUSH2 0x12FC JUMP JUMPDEST ISZERO PUSH2 0x885 JUMPI PUSH2 0x872 DUP6 DUP4 PUSH1 0x0 PUSH2 0x13A1 JUMP JUMPDEST SWAP5 POP PUSH2 0x87D DUP6 PUSH2 0x1224 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x82C JUMP JUMPDEST PUSH1 0xC0 DUP10 ADD MLOAD DUP10 MLOAD MLOAD PUSH1 0x0 SWAP2 PUSH2 0x89E SWAP2 PUSH2 0xFFFF AND DUP5 PUSH2 0x13EC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x8F2 JUMPI DUP10 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x8B9 SWAP1 DUP5 DUP8 PUSH2 0x1431 JUMP JUMPDEST SWAP1 POP DUP1 DUP7 GT ISZERO PUSH2 0x8CB JUMPI POP PUSH1 0x0 PUSH2 0x8D8 JUMP JUMPDEST PUSH2 0x8D5 DUP2 DUP8 PUSH2 0xB46 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x8EE PUSH2 0x8E7 DUP4 DUP6 DUP13 DUP6 PUSH2 0x1510 JUMP JUMPDEST DUP10 SWAP1 PUSH2 0x1556 JUMP JUMPDEST SWAP8 POP POP JUMPDEST PUSH2 0x8FE DUP7 DUP5 PUSH1 0x0 PUSH2 0x13A1 JUMP JUMPDEST SWAP6 POP PUSH2 0x909 DUP7 PUSH2 0x1224 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x82C JUMP JUMPDEST DUP8 MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x922 SWAP1 DUP7 PUSH2 0x156C JUMP JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x93C DUP4 DUP4 PUSH2 0x1556 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x95A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x96A DUP4 DUP4 DUP4 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x159D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 ISZERO PUSH2 0x994 JUMPI PUSH2 0x983 DUP7 PUSH2 0x16C8 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND PUSH1 0x80 DUP10 ADD MSTORE PUSH2 0x9B9 JUMP JUMPDEST PUSH2 0x99E DUP9 DUP8 PUSH2 0x16E4 JUMP JUMPDEST PUSH2 0x9AA DUP6 DUP8 DUP11 DUP11 PUSH2 0x17BE JUMP JUMPDEST PUSH2 0x9B6 DUP9 DUP9 DUP8 DUP10 PUSH2 0x184E JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x60 DUP9 ADD MLOAD PUSH2 0x9C8 SWAP1 DUP3 PUSH2 0x930 JUMP JUMPDEST PUSH1 0x60 DUP10 ADD DUP3 SWAP1 MSTORE SWAP2 POP PUSH4 0x5F5E100 DUP3 SGT PUSH2 0x9F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x5204 JUMP JUMPDEST POP SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA09 PUSH2 0x4E69 JUMP JUMPDEST PUSH2 0xA11 PUSH2 0x4E69 JUMP JUMPDEST PUSH2 0xA1B DUP5 DUP5 PUSH2 0x18D7 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE PUSH2 0xA2C DUP5 DUP5 PUSH2 0x190F JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 EQ ISZERO PUSH2 0xA52 JUMPI POP PUSH3 0x76A700 PUSH2 0x768 JUMP JUMPDEST DUP2 PUSH1 0x2 EQ ISZERO PUSH2 0xA65 JUMPI POP PUSH3 0xED4E00 PUSH2 0x768 JUMP JUMPDEST DUP2 PUSH1 0x3 EQ ISZERO PUSH2 0xA79 JUMPI POP PUSH4 0x1DA9C00 PUSH2 0x768 JUMP JUMPDEST DUP2 PUSH1 0x4 EQ ISZERO PUSH2 0xA8D JUMPI POP PUSH4 0x3B53800 PUSH2 0x768 JUMP JUMPDEST DUP2 PUSH1 0x5 EQ ISZERO PUSH2 0xAA1 JUMPI POP PUSH4 0x9450C00 PUSH2 0x768 JUMP JUMPDEST DUP2 PUSH1 0x6 EQ ISZERO PUSH2 0xAB5 JUMPI POP PUSH4 0x128A1800 PUSH2 0x768 JUMP JUMPDEST DUP2 PUSH1 0x7 EQ ISZERO PUSH2 0xAC9 JUMPI POP PUSH4 0x25143000 PUSH2 0x768 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x50F6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAFC PUSH4 0x5F5E100 PUSH2 0xAF6 DUP10 DUP10 PUSH2 0x1939 JUMP JUMPDEST SWAP1 PUSH2 0x1987 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP6 ADD DUP2 SWAP1 MSTORE DUP4 MLOAD MLOAD PUSH1 0x20 DUP1 DUP8 ADD MLOAD SWAP1 DUP7 ADD MLOAD SWAP3 SWAP4 POP PUSH2 0xB2B SWAP3 SWAP2 PUSH2 0xFFFF AND SWAP1 DUP9 DUP6 PUSH2 0x19B8 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0xB3B SWAP1 DUP3 PUSH2 0x1AB5 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xB9D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 GT ISZERO DUP1 ISZERO PUSH2 0xBBA JUMPI POP DUP4 PUSH1 0x20 ADD MLOAD DUP4 GT ISZERO JUMPDEST PUSH2 0xBC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 PUSH1 0x8 PUSH1 0x0 NOT DUP7 ADD MUL ADD SWAP1 PUSH1 0xFF SWAP1 DUP3 SHR AND PUSH4 0x3B9ACA00 MUL PUSH1 0x0 PUSH2 0xBFC PUSH2 0xBEE DUP7 PUSH2 0x1AE0 JUMP JUMPDEST PUSH2 0xAF6 DUP5 PUSH4 0x1DA9C00 PUSH2 0x1939 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0xC0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C7 PUSH2 0xC28 PUSH4 0x3B9ACA00 DUP5 PUSH2 0x1556 JUMP JUMPDEST PUSH2 0xAF6 DUP6 DUP6 PUSH2 0x1939 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC3F DUP5 DUP5 PUSH2 0x1AFA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC50 DUP9 DUP9 DUP9 DUP6 DUP9 PUSH2 0x1B65 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP4 MLOAD LT ISZERO PUSH2 0xC80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x511D JUMP JUMPDEST PUSH2 0x7C7 DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xC90 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0xCA9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xCC2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xC0 ADD MLOAD DUP7 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0xCDB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0xC0 ADD MLOAD PUSH3 0xED4E00 DUP8 ADD PUSH2 0x1C22 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x0 SWAP2 SWAP1 PUSH3 0x76A700 DUP3 ADD DUP3 DUP8 LT PUSH2 0xD28 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x519D JUMP JUMPDEST DUP6 DUP3 LT PUSH2 0xD57 JUMPI PUSH2 0xD4D DUP7 PUSH2 0x3D1 DUP10 DUP7 SUB PUSH2 0xD47 DUP4 DUP8 SUB DUP13 DUP8 SUB PUSH2 0x1C80 JUMP JUMPDEST SWAP1 PUSH2 0x1CD9 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x929 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD6D DUP9 DUP6 SUB PUSH2 0xD47 DUP6 DUP11 SUB DUP12 DUP7 SUB PUSH2 0x1C80 JUMP JUMPDEST SWAP1 POP DUP1 DUP8 GT PUSH2 0xD7D JUMPI PUSH1 0x0 PUSH2 0xD81 JUMP JUMPDEST DUP1 DUP8 SUB JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x929 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD99 DUP4 DUP7 PUSH2 0x1AFA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDA7 DUP8 DUP8 PUSH2 0x1AFA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDC7 PUSH2 0xDC2 DUP8 PUSH2 0xDBC DUP6 DUP8 PUSH2 0x1556 JUMP JUMPDEST SWAP1 PUSH2 0x1D40 JUMP JUMPDEST PUSH2 0x1D59 JUMP JUMPDEST SWAP1 POP PUSH2 0xDD9 DUP2 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1D8C JUMP JUMPDEST SWAP1 POP PUSH2 0xDE4 DUP2 PUSH2 0x1DDF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDFF DUP3 PUSH2 0xDFA DUP5 PUSH1 0x1 PUSH1 0x40 SHL PUSH2 0x1E34 JUMP JUMPDEST PUSH2 0x1D8C JUMP JUMPDEST SWAP1 POP PUSH2 0xE11 DUP2 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1E67 JUMP JUMPDEST SWAP1 POP PUSH2 0xE1C DUP2 PUSH2 0x1E9D JUMP JUMPDEST PUSH1 0x7 SIGNEXTEND SWAP5 POP POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x76A700 PUSH2 0xE3D TIMESTAMP PUSH2 0x74A JUMP JUMPDEST ADD SWAP1 POP PUSH2 0xE4B DUP5 DUP5 DUP4 PUSH2 0x1EA6 JUMP JUMPDEST PUSH2 0xE70 DUP3 PUSH1 0xC0 ADD MLOAD DUP5 DUP7 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0xE6B DUP10 PUSH1 0x40 ADD MLOAD PUSH2 0x1F0D JUMP JUMPDEST PUSH2 0x1F1B JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 JUMPDEST DUP10 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xF08 JUMPI PUSH1 0x0 DUP11 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xE9D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0xEB3 JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xEC3 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xECE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xEE0 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0xEF0 JUMPI POP PUSH1 0x60 DUP2 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0xEFF JUMPI PUSH2 0xEFF DUP12 DUP4 PUSH2 0x2085 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xE81 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP10 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xFAB JUMPI PUSH1 0x0 DUP11 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF28 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF3F JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF4F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xF63 JUMPI PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 SSTORE PUSH2 0xFA2 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF75 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xF8E JUMPI PUSH1 0x80 DUP2 ADD MLOAD DUP1 PUSH2 0xF8B DUP4 DUP3 PUSH2 0x21D5 JUMP JUMPDEST POP POP JUMPDEST PUSH2 0xF9A DUP2 DUP7 DUP7 DUP7 PUSH2 0x22FE JUMP JUMPDEST SWAP2 SWAP7 POP SWAP5 POP SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xF0C JUMP JUMPDEST POP PUSH1 0x60 DUP10 ADD MLOAD PUSH1 0x0 PUSH2 0xFBB PUSH2 0x2361 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP JUMPDEST DUP13 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x1085 JUMPI PUSH1 0x0 DUP14 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xFF6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1013 JUMPI POP PUSH2 0x107D JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1025 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x1043 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1040 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x104C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1058 DUP2 DUP10 DUP10 DUP10 PUSH2 0x22FE JUMP JUMPDEST SWAP2 SWAP10 POP SWAP8 POP SWAP6 POP PUSH2 0x1075 DUP2 DUP5 DUP8 PUSH1 0x10 DUP2 LT PUSH2 0x106F JUMPI INVALID JUMPDEST ADD PUSH2 0x21D5 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SWAP5 POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xFD7 JUMP JUMPDEST POP PUSH1 0x10 DUP4 GT ISZERO DUP1 ISZERO PUSH2 0x109C JUMPI POP PUSH5 0xFFFFFFFFFF DUP5 GT ISZERO JUMPDEST PUSH2 0x10A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP4 SWAP11 SWAP3 SWAP10 POP SWAP8 POP SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 LT PUSH2 0x10C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10D0 PUSH2 0x236E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP5 SWAP1 SWAP5 MSTORE POP PUSH1 0x40 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x50 SHL MUL PUSH1 0xFF PUSH1 0x50 SHL NOT PUSH4 0xFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x1 PUSH1 0x30 SHL MUL PUSH10 0xFFFFFFFF000000000000 NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP3 SWAP1 SWAP3 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1136 DUP2 PUSH2 0xFFFF AND PUSH2 0x237B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xC0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH2 0x1156 SWAP1 PUSH2 0x23A1 JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP POP POP PUSH1 0x0 PUSH2 0x116D DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0x240A JUMP JUMPDEST POP POP PUSH1 0x80 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP8 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD8 SHL SUB NOT DUP4 AND PUSH1 0xA0 DUP9 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x11A1 SWAP1 DUP5 PUSH1 0x0 PUSH2 0x246B JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0xC0 DUP7 ADD MLOAD PUSH2 0x11B9 SWAP1 PUSH2 0xFFFF DUP8 AND PUSH2 0x24FE JUMP JUMPDEST POP POP POP PUSH1 0x60 SWAP1 SWAP7 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x11D4 PUSH2 0x4E91 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11E3 DUP4 PUSH2 0xFFFF AND PUSH2 0x25A7 JUMP JUMPDEST SWAP1 POP PUSH2 0x929 DUP4 DUP3 PUSH2 0x25F3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x11FA PUSH2 0x2636 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP4 MSTORE SWAP1 SWAP3 MSTORE KECCAK256 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1233 JUMPI POP PUSH1 0x0 PUSH2 0x768 JUMP JUMPDEST PUSH2 0x123C DUP3 PUSH2 0x2643 JUMP JUMPDEST PUSH1 0xFF SUB PUSH1 0x1 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x100 DUP3 GT ISZERO PUSH2 0x1264 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x126F DUP5 PUSH2 0x16C8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x5A DUP5 GT PUSH2 0x128A JUMPI POP PUSH3 0x15180 DUP4 MUL ADD SWAP1 POP PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x87 DUP5 GT PUSH2 0x12B2 JUMPI POP PUSH1 0x59 NOT DUP4 ADD PUSH3 0x7E900 SWAP1 DUP2 MUL SWAP1 DUP3 MOD SWAP1 SWAP2 SUB ADD PUSH3 0x76A700 ADD SWAP1 POP PUSH2 0x7CA JUMP JUMPDEST PUSH1 0xC3 DUP5 GT PUSH2 0x12DB JUMPI POP PUSH1 0x86 NOT DUP4 ADD PUSH3 0x278D00 SWAP1 DUP2 MUL SWAP1 DUP3 MOD SWAP1 SWAP2 SUB ADD PUSH4 0x1DA9C00 ADD SWAP1 POP PUSH2 0x7CA JUMP JUMPDEST POP PUSH1 0xC2 NOT DUP4 ADD PUSH3 0x76A700 SWAP1 DUP2 MUL SWAP1 DUP3 MOD SWAP1 SWAP2 SUB ADD PUSH4 0xB1FA800 ADD SWAP1 POP PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 GT PUSH2 0x131D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x50C7 JUMP JUMPDEST PUSH1 0x7 DUP5 GT ISZERO PUSH2 0x133E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x51D4 JUMP JUMPDEST PUSH3 0x76A700 DUP4 MOD ISZERO PUSH2 0x1351 JUMPI POP PUSH1 0x0 PUSH2 0x929 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x135C DUP4 PUSH2 0x74A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST DUP6 DUP2 GT PUSH2 0x1395 JUMPI PUSH2 0x137B PUSH2 0x1374 DUP3 PUSH2 0xA3D JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x76D JUMP JUMPDEST DUP6 EQ ISZERO PUSH2 0x138D JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x929 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1361 JUMP JUMPDEST POP PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 LT ISZERO DUP1 ISZERO PUSH2 0x13B6 JUMPI POP PUSH2 0x100 DUP4 GT ISZERO JUMPDEST PUSH2 0x13BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x13D8 JUMPI POP PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x0 NOT DUP4 ADD SHR DUP4 OR PUSH2 0x929 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x0 NOT DUP4 ADD SHR NOT DUP4 AND PUSH2 0x929 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13F7 PUSH2 0x26DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP8 DUP4 MSTORE DUP4 MSTORE DUP1 DUP3 KECCAK256 DUP7 DUP4 MSTORE SWAP1 SWAP3 MSTORE KECCAK256 SLOAD PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1445 DUP7 PUSH1 0x20 ADD MLOAD DUP7 DUP7 PUSH2 0x26E9 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x1454 DUP8 PUSH2 0x27B1 JUMP JUMPDEST SWAP1 POP DUP2 PUSH2 0x146D JUMPI DUP7 MLOAD PUSH2 0xD4D SWAP1 PUSH2 0xFFFF AND DUP8 DUP4 DUP9 PUSH2 0x27C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1478 DUP7 PUSH2 0x74A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1488 PUSH2 0x1374 DUP7 PUSH2 0xA3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x14A0 DUP11 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP4 DUP7 DUP12 PUSH2 0x27C5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP8 PUSH1 0x1 EQ ISZERO PUSH2 0x14C5 JUMPI DUP10 SWAP2 POP PUSH2 0x14BE DUP13 PUSH1 0x40 ADD MLOAD PUSH2 0x2864 JUMP JUMPDEST SWAP1 POP PUSH2 0x14F4 JUMP JUMPDEST PUSH2 0x14DB PUSH2 0x14D4 PUSH1 0x1 DUP11 SUB PUSH2 0xA3D JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x76D JUMP JUMPDEST SWAP2 POP PUSH2 0x14F1 DUP13 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP4 DUP9 DUP14 PUSH2 0x27C5 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x1501 DUP3 DUP6 DUP4 DUP7 DUP16 PUSH2 0x1C22 JUMP JUMPDEST SWAP9 POP POP POP POP POP POP POP POP POP PUSH2 0x929 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH2 0x151F JUMPI POP PUSH1 0x0 PUSH2 0xE26 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x152B DUP6 DUP6 PUSH2 0xB46 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1539 DUP3 DUP6 PUSH2 0x28F5 JUMP JUMPDEST SWAP1 POP PUSH4 0x3B9ACA00 DUP2 SGT ISZERO PUSH2 0x154C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB3B DUP8 DUP3 PUSH2 0x1D40 JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE26 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0xAF6 DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x1597 PUSH5 0x2540BE400 DUP9 PUSH2 0x1939 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x1939 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15A7 PUSH2 0x295D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP7 SLT DUP1 ISZERO SWAP1 PUSH2 0x15EA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP7 SGT ISZERO JUMPDEST PUSH2 0x15F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 SLT ISZERO DUP1 ISZERO PUSH2 0x160B JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP6 SGT ISZERO JUMPDEST PUSH2 0x1614 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ISZERO PUSH2 0x161F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH7 0xFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x1633 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SLOAD PUSH7 0xFFFFFFFFFFFFFF SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0x70 SHL MUL PUSH7 0xFFFFFFFFFFFFFF PUSH1 0x70 SHL NOT PUSH1 0xA SWAP8 SWAP1 SWAP8 SIGNEXTEND PUSH11 0xFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xA8 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB PUSH4 0xFFFFFFFF SWAP1 SWAP7 AND PUSH1 0x1 PUSH1 0x50 SHL MUL PUSH4 0xFFFFFFFF PUSH1 0x50 SHL NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP1 SWAP9 AND PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP7 AND SWAP6 SWAP1 SWAP6 OR SWAP7 SWAP1 SWAP7 AND SWAP4 SWAP1 SWAP4 OR SWAP4 SWAP1 SWAP4 AND SWAP4 SWAP1 SWAP4 OR SWAP4 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15180 DUP3 LT ISZERO PUSH2 0x16DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x15180 DUP3 PUSH2 0x762 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16EF DUP3 PUSH2 0x74A JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH1 0x80 ADD MLOAD LT PUSH2 0x1714 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x525F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1724 DUP5 PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x296A JUMP JUMPDEST SWAP1 POP PUSH2 0x1755 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1736 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x2B68 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE POP PUSH1 0xC0 DUP4 ADD MLOAD DUP4 MLOAD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH2 0x177E SWAP3 PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 DUP8 PUSH2 0x2B7E JUMP JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x1792 SWAP1 DUP4 PUSH2 0x2B68 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MSTORE PUSH5 0xFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH5 0xFFFFFFFFFF AND PUSH1 0x80 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17CD DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x27B1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17DA DUP6 PUSH2 0x74A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x1845 JUMPI PUSH2 0x183D DUP8 DUP7 PUSH1 0x20 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1805 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0x0 DUP8 DUP8 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1822 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2CA3 SWAP1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x17DF JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x18CB JUMPI PUSH1 0x0 DUP7 PUSH1 0x20 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1877 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x1 PUSH1 0xFF AND DUP2 PUSH1 0x40 ADD MLOAD EQ PUSH2 0x1895 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18B2 DUP8 PUSH1 0xC0 ADD MLOAD DUP7 DUP4 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x80 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x1F1B JUMP JUMPDEST POP PUSH1 0x20 DUP8 ADD MLOAD PUSH2 0x18C2 SWAP1 DUP4 PUSH2 0x2085 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1853 JUMP JUMPDEST POP PUSH2 0x9F8 DUP6 DUP6 DUP5 PUSH2 0x7D0 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 PUSH2 0x18E4 PUSH2 0x2CDA JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP PUSH2 0x1902 SWAP1 DUP3 SWAP1 DUP8 SWAP1 PUSH2 0x2CE7 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 PUSH2 0x191C PUSH2 0x2E86 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x1902 DUP2 DUP7 PUSH1 0x1 PUSH2 0x2CE7 JUMP JUMPDEST DUP2 DUP2 MUL PUSH1 0x0 NOT DUP4 EQ ISZERO PUSH2 0x1969 JUMPI DUP2 ISZERO DUP1 PUSH2 0x195B JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x1958 JUMPI INVALID JUMPDEST SDIV EQ JUMPDEST PUSH2 0x1964 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7CA JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0x197E JUMPI POP DUP2 DUP4 DUP3 DUP2 PUSH2 0x197B JUMPI INVALID JUMPDEST SDIV EQ JUMPDEST PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT EQ DUP1 ISZERO PUSH2 0x199D JUMPI POP PUSH1 0x1 PUSH1 0xFF SHL DUP4 EQ JUMPDEST ISZERO PUSH2 0x19A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x19B0 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP5 MLOAD PUSH2 0x19C7 SWAP1 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2E93 JUMP JUMPDEST ISZERO PUSH2 0x19D1 JUMPI PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD ISZERO PUSH2 0x19FE JUMPI PUSH1 0x0 PUSH2 0x19EE DUP7 PUSH1 0x20 ADD MLOAD DUP7 DUP7 DUP7 DUP7 PUSH2 0x2E93 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x19FC JUMPI POP PUSH2 0xE70 JUMP JUMPDEST POP JUMPDEST PUSH2 0x1A07 DUP3 PUSH2 0x2FA4 JUMP JUMPDEST ISZERO PUSH2 0x1A1A JUMPI PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x1A1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x1A39 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x1A42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD MLOAD DUP6 PUSH1 0x40 ADD MLOAD EQ ISZERO PUSH2 0x1A66 JUMPI PUSH2 0x1A60 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x2FBA JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x1A7C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP6 DUP7 MSTORE DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP1 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE POP ADD DUP1 MLOAD PUSH1 0x1 ADD SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE26 DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0xAF6 PUSH5 0x2540BE400 PUSH2 0xAF6 DUP8 DUP10 PUSH1 0x20 ADD MLOAD PUSH2 0x1939 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP3 GT ISZERO PUSH2 0x1AF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1B17 PUSH2 0x1B12 PUSH4 0x1DA9C00 PUSH2 0xD47 DUP8 DUP8 PUSH2 0x1C80 JUMP JUMPDEST PUSH2 0x3073 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B2B DUP3 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1D8C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B38 DUP3 PUSH2 0x1DDF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B4C DUP3 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1E67 JUMP JUMPDEST SWAP1 POP PUSH2 0x1B57 DUP2 PUSH2 0x1E9D JUMP JUMPDEST PUSH1 0x7 SIGNEXTEND SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1B78 DUP9 DUP9 DUP9 DUP9 PUSH1 0x0 PUSH2 0x308A JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x1B8C JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x9F8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B97 DUP4 PUSH2 0x1D59 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1BAB DUP3 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1D8C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1BB8 DUP3 PUSH2 0x3140 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1BD4 PUSH2 0x1BCF DUP4 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1E67 JUMP JUMPDEST PUSH2 0x317A JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x1BF4 DUP10 PUSH2 0xD47 DUP5 PUSH4 0x1DA9C00 PUSH2 0x1C80 JUMP JUMPDEST SWAP1 POP PUSH4 0xFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C12 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x9F8 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP7 LT PUSH2 0x1C30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP3 LT PUSH2 0x1C3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP4 LT PUSH2 0x1C62 JUMPI PUSH2 0x1C5B DUP5 PUSH2 0x3D1 DUP9 DUP9 SUB PUSH2 0xD47 DUP4 DUP9 SUB DUP12 DUP9 SUB PUSH2 0x1C80 JUMP JUMPDEST SWAP1 POP PUSH2 0x9F8 JUMP JUMPDEST PUSH2 0x1C5B PUSH2 0x1C79 DUP8 DUP8 SUB PUSH2 0xD47 DUP7 DUP9 SUB DUP11 DUP8 SUB PUSH2 0x1C80 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0xB46 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1C8F JUMPI POP PUSH1 0x0 PUSH2 0x7CA JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1C9C JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x7C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5382 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1D2F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1D38 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C7 PUSH2 0x1D4F DUP5 DUP5 PUSH2 0x1939 JUMP JUMPDEST PUSH4 0x3B9ACA00 PUSH2 0x1987 JUMP JUMPDEST PUSH1 0x0 PUSH8 0x7FFFFFFFFFFFFFFF NOT DUP3 SLT ISZERO DUP1 ISZERO PUSH2 0x1D7C JUMPI POP PUSH8 0x7FFFFFFFFFFFFFFF DUP3 SGT ISZERO JUMPDEST PUSH2 0x1D85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xF SIGNEXTEND PUSH1 0x0 EQ ISZERO PUSH2 0x1D9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xF SIGNEXTEND PUSH1 0x40 DUP6 PUSH1 0xF SIGNEXTEND SWAP1 SHL DUP2 PUSH2 0x1DB4 JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x1DD6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x7C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x46 SHL DUP3 PUSH1 0xF SIGNEXTEND SLT PUSH2 0x1DF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH9 0x3FFFFFFFFFFFFFFFFF NOT DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x1E11 JUMPI POP PUSH1 0x0 PUSH2 0x768 JUMP JUMPDEST PUSH2 0x7CA PUSH1 0x80 DUP4 PUSH1 0xF SIGNEXTEND PUSH17 0x171547652B82FE1777D0FFDA0D23A7D12 MUL SWAP1 SAR PUSH2 0x3196 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF DUP4 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x1DD6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO PUSH2 0x7C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xF DUP4 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND MUL PUSH1 0x40 SAR PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x1DD6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO PUSH2 0x7C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EB0 PUSH2 0x3C44 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP4 ADD MLOAD DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 SWAP1 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0xA0 DUP9 ADD MLOAD PUSH1 0xC0 DUP10 ADD MLOAD PUSH1 0xE0 DUP11 ADD MLOAD SWAP6 SWAP7 POP SWAP4 SWAP5 PUSH2 0x1EFF SWAP5 DUP7 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x3C51 JUMP JUMPDEST PUSH2 0xE70 DUP2 DUP7 PUSH1 0x80 ADD MLOAD PUSH2 0x3D65 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7CA PUSH1 0x0 NOT DUP4 PUSH2 0x1939 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F28 DUP8 DUP8 PUSH2 0x11EF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1F34 PUSH2 0x26DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SWAP2 SWAP3 POP DUP1 PUSH2 0x1F6B DUP9 DUP11 PUSH2 0x3DAE JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x1F79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F83 DUP6 DUP4 PUSH2 0x3EB9 JUMP JUMPDEST ISZERO PUSH2 0x2012 JUMPI DUP3 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x1F9F SWAP1 DUP10 SWAP1 PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH2 0x2B68 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x1FC0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x1FC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0xF DUP4 SWAP1 SIGNEXTEND AND OR DUP5 SSTORE DUP1 PUSH2 0x1FFA JUMPI PUSH2 0x1FF7 DUP7 DUP5 PUSH1 0x0 PUSH2 0x13A1 JUMP JUMPDEST SWAP6 POP JUMPDEST PUSH2 0x2005 DUP13 DUP13 DUP9 PUSH2 0x3EE9 JUMP JUMPDEST SWAP6 POP PUSH2 0x9F8 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP7 ISZERO PUSH2 0x2076 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP8 SLT DUP1 ISZERO SWAP1 PUSH2 0x2037 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP8 SGT ISZERO JUMPDEST PUSH2 0x2040 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0xF DUP10 SWAP1 SIGNEXTEND AND OR DUP4 SSTORE PUSH2 0x2069 DUP6 DUP4 PUSH1 0x1 PUSH2 0x13A1 JUMP JUMPDEST SWAP5 POP PUSH2 0x2076 DUP12 DUP12 DUP8 PUSH2 0x3EE9 JUMP JUMPDEST POP SWAP5 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD MLOAD DUP2 LT PUSH2 0x2093 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD GT PUSH2 0x20A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x20B6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x20CD JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x20DD JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x20FB JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x20F8 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x2104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP4 ADD DUP1 MLOAD PUSH1 0x0 NOT ADD SWAP1 MSTORE PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP6 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x2177 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2131 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP3 DUP2 PUSH1 0x80 ADD MLOAD GT DUP1 ISZERO PUSH2 0x215E JUMPI POP PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x215B JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST ISZERO PUSH2 0x216E JUMPI DUP1 PUSH1 0x80 ADD MLOAD SWAP3 POP DUP2 SWAP4 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2115 JUMP JUMPDEST POP DUP2 DUP5 EQ ISZERO PUSH2 0x2190 JUMPI POP POP PUSH1 0x2 PUSH1 0xA0 SWAP2 SWAP1 SWAP2 ADD MSTORE PUSH2 0x21D1 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x21A2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x80 DUP6 DUP2 ADD DUP1 MLOAD SWAP2 DUP4 ADD DUP1 MLOAD SWAP1 SWAP2 MSTORE MSTORE PUSH1 0x1 PUSH1 0xA0 SWAP2 DUP3 ADD MSTORE PUSH1 0x2 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP POP JUMPDEST POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x21E8 JUMPI POP DUP2 MLOAD PUSH2 0x3FFF LT ISZERO JUMPDEST PUSH2 0x21F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x220E JUMPI POP PUSH1 0x20 DUP3 ADD MLOAD PUSH5 0xFFFFFFFFFF LT ISZERO JUMPDEST PUSH2 0x2217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x2230 JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x8 LT ISZERO JUMPDEST PUSH2 0x2239 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT SGT DUP1 ISZERO SWAP1 PUSH2 0x2260 JUMPI POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB SLT ISZERO JUMPDEST PUSH2 0x2269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 SLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD PUSH1 0xA SIGNEXTEND PUSH11 0xFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH19 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000 NOT PUSH1 0xFF SWAP1 SWAP7 AND PUSH1 0x1 PUSH1 0x38 SHL MUL PUSH8 0xFF00000000000000 NOT PUSH5 0xFFFFFFFFFF SWAP1 SWAP4 AND PUSH3 0x10000 MUL PUSH7 0xFFFFFFFFFF0000 NOT PUSH2 0xFFFF SWAP1 SWAP7 AND PUSH2 0xFFFF NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP5 SWAP1 SWAP5 AND SWAP3 SWAP1 SWAP3 OR AND SWAP2 SWAP1 SWAP2 OR SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x230D DUP9 PUSH2 0x3F43 JUMP JUMPDEST SWAP1 POP DUP5 ISZERO DUP1 PUSH2 0x231B JUMPI POP DUP1 DUP6 GT JUMPDEST ISZERO PUSH2 0x2324 JUMPI DUP1 SWAP5 POP JUMPDEST DUP7 DUP1 PUSH2 0x2334 JUMPI POP PUSH1 0x0 DUP9 PUSH1 0x60 ADD MLOAD SLT JUMPDEST SWAP7 POP PUSH2 0xFFFF DUP7 AND ISZERO PUSH2 0x2345 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP SWAP5 MLOAD SWAP4 SWAP6 PUSH1 0x10 SWAP4 SWAP1 SWAP4 SHR PUSH1 0xF0 SWAP5 SWAP1 SWAP5 SHL SWAP4 SWAP1 SWAP4 OR SWAP4 POP SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0xD PUSH2 0x3FAA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x2 PUSH2 0x3FAA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2386 PUSH2 0x3FC3 JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x23B2 PUSH2 0x236E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP8 SWAP1 SWAP8 MSTORE POP POP PUSH1 0x40 SWAP1 SWAP5 KECCAK256 SLOAD PUSH2 0xFFFF DUP2 AND SWAP6 PUSH4 0xFFFFFFFF PUSH3 0x10000 DUP4 DIV DUP2 AND SWAP7 POP PUSH1 0x1 PUSH1 0x30 SHL DUP4 DIV AND SWAP5 POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x50 SHL DUP4 DIV AND SWAP4 POP PUSH1 0x1 PUSH1 0x58 SHL SWAP1 SWAP2 DIV PUSH1 0xD8 SHL SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x2418 PUSH2 0x3FD0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SWAP4 PUSH1 0x1 PUSH1 0x60 SHL DUP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP4 POP PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP2 POP JUMP JUMPDEST PUSH2 0x2473 PUSH2 0x4EBD JUMP JUMPDEST PUSH2 0x247B PUSH2 0x4EBD JUMP JUMPDEST PUSH1 0xFF DUP5 AND PUSH2 0x248A JUMPI SWAP1 POP PUSH2 0x929 JUMP JUMPDEST PUSH2 0x2494 DUP6 DUP6 PUSH2 0x3FDD JUMP JUMPDEST DUP2 MSTORE PUSH1 0xFF DUP5 AND PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x24B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x24F0 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x24DD PUSH2 0x4EE5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x24D5 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x20 DUP3 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x250E PUSH2 0x295D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP2 AND SWAP7 POP PUSH1 0x1 PUSH1 0x50 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP5 POP SWAP1 SWAP2 POP DUP4 ISZERO PUSH2 0x2577 JUMPI DUP1 SLOAD PUSH2 0x2570 SWAP1 PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV PUSH7 0xFFFFFFFFFFFFFF AND PUSH2 0x4006 JUMP JUMPDEST SWAP3 POP PUSH2 0x258C JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV PUSH7 0xFFFFFFFFFFFFFF AND SWAP3 POP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xA SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 POP SWAP3 POP POP JUMP JUMPDEST PUSH2 0x25AF PUSH2 0x4F25 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x25BD DUP6 PUSH2 0x4014 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xFF AND PUSH1 0xA EXP SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25FB PUSH2 0x4E91 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x260A DUP5 PUSH2 0xFFFF AND PUSH2 0x40D7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH2 0xFFFF SWAP7 SWAP1 SWAP7 AND DUP7 MSTORE PUSH1 0xFF DUP3 AND PUSH1 0x20 DUP8 ADD MSTORE DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x60 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0xB PUSH2 0x3FAA JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x264F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x2662 JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x1 PUSH1 0x40 SHL DUP3 LT PUSH2 0x2675 JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x2689 JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x269B JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x26AC JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x26BC JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x26CC JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0x768 JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0xC PUSH2 0x3FAA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 GT PUSH2 0x270C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x50C7 JUMP JUMPDEST PUSH1 0x7 DUP6 GT ISZERO PUSH2 0x272D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x51D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2738 DUP5 PUSH2 0x74A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST DUP7 DUP2 GT PUSH2 0x2790 JUMPI PUSH1 0x0 PUSH2 0x2759 PUSH2 0x2752 DUP4 PUSH2 0xA3D JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x76D JUMP JUMPDEST SWAP1 POP DUP7 DUP2 EQ ISZERO PUSH2 0x2771 JUMPI POP SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH2 0x27A9 SWAP1 POP JUMP JUMPDEST DUP7 DUP2 GT ISZERO PUSH2 0x2787 JUMPI POP SWAP3 POP PUSH1 0x1 SWAP2 POP PUSH2 0x27A9 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x273D JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x52B6 JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 ADD MLOAD PUSH2 0x12C PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHR PUSH1 0xFF AND MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x27D0 PUSH2 0x3C44 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x76A700 PUSH2 0x27E1 DUP6 PUSH2 0x74A JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 ADD DUP1 DUP4 MSTORE SWAP4 SWAP1 MSTORE KECCAK256 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0xC0 SHL DUP2 DIV DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV AND DUP2 PUSH2 0x2848 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x5032 JUMP JUMPDEST PUSH2 0x2855 DUP2 DUP5 DUP5 DUP13 DUP13 PUSH2 0x40F4 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x287E JUMPI POP PUSH1 0x0 PUSH2 0x768 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD30A666 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x28BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x28D1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7C7 SWAP2 SWAP1 PUSH2 0x4F7B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x290D PUSH2 0x1B12 PUSH4 0x1DA9C00 PUSH2 0xD47 DUP7 DUP9 PUSH2 0x1C80 JUMP JUMPDEST SWAP1 POP PUSH2 0x291F DUP2 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1D8C JUMP JUMPDEST SWAP1 POP PUSH2 0x2932 PUSH2 0x292D DUP3 PUSH2 0x4187 JUMP JUMPDEST PUSH2 0x1DDF JUMP JUMPDEST SWAP1 POP PUSH2 0x2944 DUP2 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1E67 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2951 DUP3 PUSH2 0x1E9D JUMP JUMPDEST PUSH1 0x7 SIGNEXTEND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x6 PUSH2 0x3FAA JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2974 PUSH2 0x4F25 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2980 DUP6 DUP6 PUSH2 0x41A9 JUMP JUMPDEST SWAP1 POP PUSH2 0x298A PUSH2 0x4E21 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x299A JUMPI POP SWAP2 POP PUSH2 0x7CA SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x2B5C JUMPI PUSH1 0x0 DUP9 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x29BA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x29CF DUP3 PUSH2 0x3F43 JUMP JUMPDEST SWAP1 POP DUP9 DUP2 GT ISZERO PUSH2 0x29E0 JUMPI POP POP PUSH2 0x2B54 JUMP JUMPDEST DUP2 PUSH1 0x0 ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x29F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD EQ PUSH2 0x2A26 JUMPI PUSH1 0x1 DUP5 ADD SWAP4 POP DUP2 PUSH1 0x0 ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2A19 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 EQ ISZERO PUSH2 0x2A73 JUMPI PUSH2 0x2A49 DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP13 PUSH2 0x42CE JUMP JUMPDEST SWAP8 POP PUSH2 0x2A62 DUP4 PUSH1 0x60 ADD MLOAD DUP10 PUSH2 0x156C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x2A6E DUP12 DUP6 PUSH2 0x2085 JUMP JUMPDEST PUSH2 0x2B0A JUMP JUMPDEST PUSH2 0x2A80 DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0x2FA4 JUMP JUMPDEST ISZERO PUSH2 0x2B0A JUMPI PUSH2 0x2A99 DUP7 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH2 0x443E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AB2 DUP5 PUSH1 0x60 ADD MLOAD DUP9 PUSH2 0x4452 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP2 SWAP4 POP SWAP2 POP DUP12 LT ISZERO PUSH2 0x2AD3 JUMPI PUSH2 0x2ACE DUP13 DUP7 DUP4 PUSH2 0x44FA JUMP JUMPDEST PUSH2 0x2B08 JUMP JUMPDEST PUSH2 0x2AE6 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP14 PUSH2 0x42CE JUMP JUMPDEST SWAP9 POP PUSH2 0x2AFC PUSH2 0x2AF5 DUP11 DUP4 PUSH2 0x156C JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x2B68 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B08 DUP13 DUP7 PUSH2 0x2085 JUMP JUMPDEST POP JUMPDEST PUSH2 0x2B34 DUP2 DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x2B1A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x2B68 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2B40 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x299E JUMP JUMPDEST POP SWAP2 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2B8D DUP8 DUP8 PUSH2 0x11EF JUMP JUMPDEST SWAP1 POP PUSH2 0x2B98 DUP5 PUSH2 0x16C8 JUMP JUMPDEST SWAP2 POP DUP5 DUP3 LT ISZERO PUSH2 0x2BA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2BB3 DUP7 DUP5 PUSH2 0x3DAE JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x2BC2 JUMPI POP POP PUSH2 0x2C9A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BCD DUP4 PUSH2 0x1224 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2BDF JUMPI POP DUP2 DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x2C29 JUMPI PUSH1 0x0 PUSH2 0x2BF0 DUP9 DUP4 PUSH2 0x1249 JUMP JUMPDEST SWAP1 POP PUSH2 0x2C08 PUSH2 0x2C01 DUP12 DUP12 DUP5 DUP12 PUSH2 0x45B0 JUMP JUMPDEST DUP8 SWAP1 PUSH2 0x2B68 JUMP JUMPDEST SWAP6 POP PUSH2 0x2C16 DUP5 DUP4 PUSH1 0x0 PUSH2 0x13A1 JUMP JUMPDEST SWAP4 POP PUSH2 0x2C21 DUP5 PUSH2 0x1224 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2BD0 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x2C8A JUMPI PUSH1 0x0 PUSH2 0x2C3E DUP10 DUP5 PUSH2 0x1249 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x2C4D DUP9 DUP5 PUSH2 0x3DAE JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x2C5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C67 DUP5 DUP4 PUSH1 0x1 PUSH2 0x13A1 JUMP JUMPDEST SWAP4 POP PUSH2 0x2C75 DUP8 DUP7 PUSH1 0x0 PUSH2 0x13A1 JUMP JUMPDEST SWAP7 POP PUSH2 0x2C80 DUP8 PUSH2 0x1224 JUMP JUMPDEST SWAP5 POP POP POP POP PUSH2 0x2C2C JUMP JUMPDEST PUSH2 0x2C95 DUP11 DUP11 DUP4 PUSH2 0x3EE9 JUMP JUMPDEST POP POP POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2CB0 DUP8 DUP8 DUP8 DUP7 DUP6 PUSH2 0x464B JUMP JUMPDEST PUSH2 0x2CC9 DUP8 PUSH1 0xE0 ADD MLOAD DUP9 PUSH1 0xA0 ADD MLOAD DUP10 PUSH1 0xC0 ADD MLOAD DUP6 DUP9 PUSH2 0x40F4 JUMP JUMPDEST PUSH1 0xC0 SWAP1 SWAP8 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x4 PUSH2 0x3FAA JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2D04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D2E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP7 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2D4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D74 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x2E78 JUMPI DUP9 DUP5 PUSH1 0xE DUP2 LT PUSH2 0x2D8E JUMPI INVALID JUMPDEST PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2DBC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 DUP9 DUP5 PUSH1 0xE DUP2 LT PUSH2 0x2DD9 JUMPI INVALID JUMPDEST PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E07 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 DUP7 ISZERO PUSH2 0x2E70 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E2C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SGT DUP1 ISZERO PUSH2 0x2E54 JUMPI POP PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E4A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SGT JUMPDEST PUSH2 0x2E70 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x5289 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2D7A JUMP JUMPDEST POP SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x5 PUSH2 0x3FAA JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x2F97 JUMPI PUSH1 0x0 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2EAE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP5 DUP2 PUSH1 0x40 ADD MLOAD EQ ISZERO DUP1 PUSH2 0x2ECC JUMPI POP DUP1 MLOAD DUP8 EQ ISZERO JUMPDEST DUP1 PUSH2 0x2EDB JUMPI POP DUP6 DUP2 PUSH1 0x20 ADD MLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 0x2EE6 JUMPI POP PUSH2 0x2F8F JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2EF8 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x2F16 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2F13 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x2F1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2F31 SWAP1 DUP7 PUSH2 0x2B68 JUMP JUMPDEST SWAP1 POP PUSH2 0x2F3C DUP7 PUSH2 0x2FA4 JUMP JUMPDEST ISZERO PUSH2 0x2F4F JUMPI PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x2F4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x2F6E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x2F77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SWAP1 SWAP2 ADD DUP2 SWAP1 MSTORE SWAP2 POP PUSH2 0x9F8 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2E97 JUMP JUMPDEST POP PUSH1 0x0 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 LT DUP1 ISZERO SWAP1 PUSH2 0x7CA JUMPI POP POP PUSH1 0x8 LT ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 EQ PUSH2 0x2FD1 JUMPI DUP3 MLOAD PUSH1 0x2 MUL PUSH2 0x2FD4 JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2FEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3029 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x3016 PUSH2 0x4EE5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x300E JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x306B JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3044 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3058 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x302F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0x7FFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1D85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x3098 DUP9 DUP6 PUSH2 0x930 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x30B0 PUSH2 0x30A9 DUP11 DUP11 PUSH2 0x2B68 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x4706 JUMP JUMPDEST SWAP1 POP PUSH4 0x39387000 DUP2 SGT ISZERO PUSH2 0x30CC JUMPI PUSH1 0x0 DUP1 SWAP4 POP SWAP4 POP POP POP PUSH2 0x3136 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x30D8 DUP4 PUSH2 0x471F JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x30F1 JUMPI PUSH1 0x0 DUP1 SWAP6 POP SWAP6 POP POP POP POP POP PUSH2 0x3136 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3107 DUP10 PUSH2 0x3101 DUP6 DUP14 PUSH2 0x4706 JUMP JUMPDEST SWAP1 PUSH2 0x2B68 JUMP JUMPDEST SWAP1 POP PUSH4 0x3B9ACA00 DUP2 SLT ISZERO PUSH2 0x3126 JUMPI PUSH1 0x0 DUP1 SWAP7 POP SWAP7 POP POP POP POP POP POP PUSH2 0x3136 JUMP JUMPDEST SWAP6 POP PUSH1 0x1 SWAP5 POP PUSH2 0x3136 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SGT PUSH2 0x3151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x80 PUSH2 0x315C DUP4 PUSH2 0x47C1 JUMP JUMPDEST PUSH1 0xF SIGNEXTEND PUSH16 0xB17217F7D1CF79ABC9E3B39803F2F6AF MUL SWAP1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x318C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x46 SHL DUP3 PUSH1 0xF SIGNEXTEND SLT PUSH2 0x31AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH9 0x3FFFFFFFFFFFFFFFFF NOT DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x31C8 JUMPI POP PUSH1 0x0 PUSH2 0x768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x7F SHL PUSH1 0x0 PUSH1 0x1 PUSH1 0x3F SHL DUP5 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x31F6 JUMPI PUSH17 0x16A09E667F3BCC908B2FB1366EA957D3E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x4000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3223 JUMPI PUSH17 0x1306FE0A31B7152DE8D5A46305C85EDEC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x2000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3250 JUMPI PUSH17 0x1172B83C7D517ADCDF7C8C50EB14A791F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x1000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x327D JUMPI PUSH17 0x10B5586CF9890F6298B92B71842A98363 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x800000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x32AA JUMPI PUSH17 0x1059B0D31585743AE7C548EB68CA417FD MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x400000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x32D7 JUMPI PUSH17 0x102C9A3E778060EE6F7CACA4F7A29BDE8 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x200000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3304 JUMPI PUSH17 0x10163DA9FB33356D84A66AE336DCDFA3F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x38 SHL AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x332D JUMPI PUSH17 0x100B1AFA5ABCBED6129AB13EC11DC9543 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x80000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3359 JUMPI PUSH17 0x10058C86DA1C09EA1FF19D294CF2F679B MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x40000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3385 JUMPI PUSH17 0x1002C605E2E8CEC506D21BFC89A23A00F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x20000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x33B1 JUMPI PUSH17 0x100162F3904051FA128BCA9C55C31E5DF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x10000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x33DD JUMPI PUSH17 0x1000B175EFFDC76BA38E31671CA939725 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x8000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3409 JUMPI PUSH17 0x100058BA01FB9F96D6CACD4B180917C3D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x4000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3435 JUMPI PUSH17 0x10002C5CC37DA9491D0985C348C68E7B3 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x2000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3461 JUMPI PUSH17 0x1000162E525EE054754457D5995292026 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x30 SHL AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x348A JUMPI PUSH17 0x10000B17255775C040618BF4A4ADE83FC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x800000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x34B5 JUMPI PUSH17 0x1000058B91B5BC9AE2EED81E9B7D4CFAB MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x400000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x34E0 JUMPI PUSH17 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x200000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x350B JUMPI PUSH17 0x10000162E43F4F831060E02D839A9D16D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x100000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3536 JUMPI PUSH17 0x100000B1721BCFC99D9F890EA06911763 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x80000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3561 JUMPI PUSH17 0x10000058B90CF1E6D97F9CA14DBCC1628 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x40000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x358C JUMPI PUSH17 0x1000002C5C863B73F016468F6BAC5CA2B MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x20000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x35B7 JUMPI PUSH17 0x100000162E430E5A18F6119E3C02282A5 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x10000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x35E2 JUMPI PUSH17 0x1000000B1721835514B86E6D96EFD1BFE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x8000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x360C JUMPI PUSH17 0x100000058B90C0B48C6BE5DF846C5B2EF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x4000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3636 JUMPI PUSH17 0x10000002C5C8601CC6B9E94213C72737A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x2000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3660 JUMPI PUSH17 0x1000000162E42FFF037DF38AA2B219F06 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x1000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x368A JUMPI PUSH17 0x10000000B17217FBA9C739AA5819F44F9 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x800000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x36B4 JUMPI PUSH17 0x1000000058B90BFCDEE5ACD3C1CEDC823 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x400000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x36DE JUMPI PUSH17 0x100000002C5C85FE31F35A6A30DA1BE50 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x200000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3708 JUMPI PUSH17 0x10000000162E42FF0999CE3541B9FFFCF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x100000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3732 JUMPI PUSH17 0x100000000B17217F80F4EF5AADDA45554 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x80000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x375B JUMPI PUSH17 0x10000000058B90BFBF8479BD5A81B51AD MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x40000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3784 JUMPI PUSH17 0x1000000002C5C85FDF84BD62AE30A74CC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x20000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x37AD JUMPI PUSH17 0x100000000162E42FEFB2FED257559BDAA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x10000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x37D6 JUMPI PUSH17 0x1000000000B17217F7D5A7716BBA4A9AE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x8000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x37FF JUMPI PUSH17 0x100000000058B90BFBE9DDBAC5E109CCE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x4000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3828 JUMPI PUSH17 0x10000000002C5C85FDF4B15DE6F17EB0D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x2000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3851 JUMPI PUSH17 0x1000000000162E42FEFA494F1478FDE05 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x1000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x387A JUMPI PUSH17 0x10000000000B17217F7D20CF927C8E94C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x800000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x38A2 JUMPI PUSH17 0x1000000000058B90BFBE8F71CB4E4B33D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x400000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x38CA JUMPI PUSH17 0x100000000002C5C85FDF477B662B26945 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x200000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x38F2 JUMPI PUSH17 0x10000000000162E42FEFA3AE53369388C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x100000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x391A JUMPI PUSH17 0x100000000000B17217F7D1D351A389D40 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x80000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3942 JUMPI PUSH17 0x10000000000058B90BFBE8E8B2D3D4EDE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x40000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x396A JUMPI PUSH17 0x1000000000002C5C85FDF4741BEA6E77E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x20000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3992 JUMPI PUSH17 0x100000000000162E42FEFA39FE95583C2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x10000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x39BA JUMPI PUSH17 0x1000000000000B17217F7D1CFB72B45E1 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x8000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x39E1 JUMPI PUSH17 0x100000000000058B90BFBE8E7CC35C3F0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x4000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3A08 JUMPI PUSH17 0x10000000000002C5C85FDF473E242EA38 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x2000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3A2F JUMPI PUSH17 0x1000000000000162E42FEFA39F02B772C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x1000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3A56 JUMPI PUSH17 0x10000000000000B17217F7D1CF7D83C1A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x800 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3A7D JUMPI PUSH17 0x1000000000000058B90BFBE8E7BDCBE2E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x400 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3AA4 JUMPI PUSH17 0x100000000000002C5C85FDF473DEA871F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x200 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3ACB JUMPI PUSH17 0x10000000000000162E42FEFA39EF44D91 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x100 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3AF2 JUMPI PUSH17 0x100000000000000B17217F7D1CF79E949 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x80 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3B18 JUMPI PUSH17 0x10000000000000058B90BFBE8E7BCE544 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x40 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3B3E JUMPI PUSH17 0x1000000000000002C5C85FDF473DE6ECA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x20 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3B64 JUMPI PUSH17 0x100000000000000162E42FEFA39EF366F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x10 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3B8A JUMPI PUSH17 0x1000000000000000B17217F7D1CF79AFA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x8 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3BB0 JUMPI PUSH17 0x100000000000000058B90BFBE8E7BCD6D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x4 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3BD6 JUMPI PUSH17 0x10000000000000002C5C85FDF473DE6B2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x2 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3BFC JUMPI PUSH17 0x1000000000000000162E42FEFA39EF358 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3C22 JUMPI PUSH17 0x10000000000000000B17217F7D1CF79AB MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0xF DUP4 DUP2 SIGNEXTEND PUSH1 0x40 SAR PUSH1 0x3F SUB SWAP1 SIGNEXTEND SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 GT ISZERO PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0xA PUSH2 0x3FAA JUMP JUMPDEST PUSH1 0x0 DUP6 SLT ISZERO DUP1 ISZERO PUSH2 0x3C69 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP6 SGT ISZERO JUMPDEST PUSH2 0x3C72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 SLT ISZERO DUP1 ISZERO PUSH2 0x3C8A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP5 SGT ISZERO JUMPDEST PUSH2 0x3C93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x3CA7 JUMPI POP PUSH4 0xFFFFFFFF DUP4 GT ISZERO JUMPDEST PUSH2 0x3CB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x3CC4 JUMPI POP PUSH4 0xFFFFFFFF DUP3 GT ISZERO JUMPDEST PUSH2 0x3CCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 SLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP6 DUP7 AND OR PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x50 SHL NOT AND PUSH1 0x1 PUSH1 0x50 SHL SWAP5 SWAP1 SWAP6 AND SWAP4 SWAP1 SWAP4 MUL SWAP4 SWAP1 SWAP4 OR PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH4 0xFFFFFFFF SWAP3 DUP4 AND MUL OR PUSH4 0xFFFFFFFF PUSH1 0xC0 SHL NOT AND PUSH1 0x1 PUSH1 0xC0 SHL SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 MUL SWAP3 SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0xE0 SHL SWAP2 SWAP1 SWAP3 AND MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO DUP1 ISZERO PUSH2 0x3D7D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x3D86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3DBC DUP6 PUSH2 0x16C8 JUMP JUMPDEST SWAP1 POP PUSH3 0x15180 DUP5 MOD ISZERO PUSH2 0x3DD6 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x3EB2 JUMP JUMPDEST DUP4 DUP2 LT PUSH2 0x3DEA JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x3EB2 JUMP JUMPDEST PUSH3 0x15180 DUP2 DUP6 SUB DIV PUSH1 0x5A DUP2 GT PUSH2 0x3E07 JUMPI SWAP3 POP PUSH1 0x1 SWAP2 POP PUSH2 0x3EB2 SWAP1 POP JUMP JUMPDEST PUSH2 0x168 DUP2 GT PUSH2 0x3E46 JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x7E900 DUP5 MOD DIV DUP3 ADD PUSH1 0x59 NOT ADD SWAP1 POP PUSH1 0x6 DUP2 DIV PUSH1 0x5A ADD PUSH1 0x6 DUP3 DUP2 PUSH2 0x3E36 JUMPI INVALID JUMPDEST MOD PUSH1 0x0 EQ SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x3EB2 JUMP JUMPDEST PUSH2 0x870 DUP2 GT PUSH2 0x3E76 JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x278D00 DUP5 MOD DIV DUP3 ADD PUSH2 0x167 NOT ADD SWAP1 POP PUSH1 0x1E DUP2 DIV PUSH1 0x87 ADD PUSH1 0x1E DUP3 DUP2 PUSH2 0x3E36 JUMPI INVALID JUMPDEST PUSH2 0x1DE2 DUP2 GT PUSH2 0x3EA6 JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x76A700 DUP5 MOD DIV DUP3 ADD PUSH2 0x86F NOT ADD SWAP1 POP PUSH1 0x5A DUP2 DIV PUSH1 0xC3 ADD PUSH1 0x5A DUP3 DUP2 PUSH2 0x3E36 JUMPI INVALID JUMPDEST PUSH2 0x100 PUSH1 0x0 SWAP4 POP SWAP4 POP POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x3ECE JUMPI POP PUSH2 0x100 DUP3 GT ISZERO JUMPDEST PUSH2 0x3ED7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 NOT ADD SHL PUSH1 0x1 PUSH1 0xFF SHL SWAP1 DUP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x14 PUSH2 0x3EF4 DUP3 PUSH2 0x489C JUMP JUMPDEST GT ISZERO PUSH2 0x3F12 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x5174 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F1C PUSH2 0x2636 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP5 DUP6 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP5 DUP3 MSTORE SWAP4 SWAP1 SWAP5 MSTORE POP SWAP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x40 ADD MLOAD GT DUP1 ISZERO PUSH2 0x3F5D JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x8 LT ISZERO JUMPDEST PUSH2 0x3F66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 LT PUSH2 0x3F7D JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x768 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F8F PUSH1 0x1 DUP5 PUSH1 0x40 ADD MLOAD SUB PUSH2 0xA3D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x929 SWAP1 PUSH3 0x76A700 SWAP1 PUSH2 0x3D1 SWAP1 DUP5 PUSH2 0xB46 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF4240 DUP3 PUSH1 0x12 DUP2 GT ISZERO PUSH2 0x3FBC JUMPI INVALID JUMPDEST ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x3 PUSH2 0x3FAA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x11 PUSH2 0x3FAA JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x3FEB DUP5 DUP5 PUSH2 0x496C JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 MLOAD GT PUSH2 0x3FFD JUMPI SWAP1 POP PUSH2 0x7CA JUMP JUMPDEST PUSH2 0x7C7 DUP2 PUSH2 0x4A8E JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SHR PUSH1 0xFF SWAP1 SWAP2 AND SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4025 DUP7 PUSH2 0x4C47 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x404A JUMPI POP PUSH1 0x0 SWAP1 POP PUSH5 0x2540BE400 PUSH2 0x40CC JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1EE10833 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4085 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4099 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x40BD SWAP2 SWAP1 PUSH2 0x4F7B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x40CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x40E2 PUSH2 0x4C7E JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x4102 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 GT ISZERO PUSH2 0x4111 JUMPI POP DUP4 PUSH2 0x9F8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x411D DUP4 DUP9 PUSH2 0xB46 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x4130 JUMPI DUP6 SWAP2 POP POP PUSH2 0x9F8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4144 DUP6 PUSH2 0xD47 DUP5 PUSH4 0x3B9ACA00 PUSH2 0x1C80 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4156 PUSH4 0x3B9ACA00 DUP4 PUSH2 0xB46 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4179 PUSH4 0x3B9ACA00 PUSH2 0xD47 PUSH2 0x416F DUP12 DUP7 PUSH2 0x1C80 JUMP JUMPDEST PUSH2 0x3D1 DUP14 DUP9 PUSH2 0x1C80 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF DUP3 SWAP1 SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT EQ ISZERO PUSH2 0x41A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SUB SWAP1 JUMP JUMPDEST DUP2 MLOAD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x41F3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH2 0x41E9 JUMP JUMPDEST PUSH2 0x41D6 PUSH2 0x4F4F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x41CE JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP POP POP PUSH2 0x7CA JUMP JUMPDEST DUP5 MLOAD MLOAD JUMPDEST PUSH1 0x0 NOT DUP2 ADD SWAP1 ISZERO PUSH2 0x424E JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4214 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP6 PUSH2 0x4228 DUP3 PUSH2 0x3F43 JUMP JUMPDEST GT ISZERO PUSH2 0x4234 JUMPI POP PUSH2 0x4249 JUMP JUMPDEST DUP1 MLOAD DUP4 EQ PUSH2 0x4247 JUMPI DUP1 MLOAD PUSH1 0x1 SWAP1 SWAP5 ADD SWAP4 SWAP3 POP JUMPDEST POP JUMPDEST PUSH2 0x41F7 JUMP JUMPDEST POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x4268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x42A2 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x428F PUSH2 0x4F4F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x4287 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 ISZERO PUSH2 0x9F8 JUMPI DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x42B9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x42D6 PUSH2 0x4F25 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x42E3 DUP7 DUP7 PUSH2 0x4C8B JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 EQ ISZERO PUSH2 0x4413 JUMPI PUSH1 0x0 PUSH2 0x42FB DUP8 PUSH2 0x4014 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x4411 JUMPI PUSH1 0x0 PUSH2 0x431C PUSH2 0x4CD4 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x432E JUMPI POP DUP6 DUP8 GT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x433F JUMPI POP PUSH5 0xFFFFFFFFFF DUP7 GT ISZERO JUMPDEST PUSH2 0x4348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x0 SLT DUP1 ISZERO PUSH2 0x435F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP5 SGT ISZERO JUMPDEST PUSH2 0x4368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH5 0xFFFFFFFFFF NOT AND PUSH5 0xFFFFFFFFFF DUP10 AND OR PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000 NOT AND PUSH6 0x10000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP9 AND MUL OR PUSH1 0xFF PUSH1 0xA8 SHL NOT AND PUSH1 0x1 PUSH1 0xA8 SHL PUSH1 0xFF DUP8 AND MUL OR DUP2 SSTORE SWAP1 MLOAD DUP9 SWAP1 DUP11 SWAP1 PUSH32 0xFDFA6885701E2F1F42E4187B9231CF81C1FE23671EF64FA46F34DDB56C1DC18 SWAP1 PUSH2 0x4406 SWAP1 DUP10 SWAP1 PUSH2 0x534A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xFF SWAP1 SWAP2 AND PUSH1 0xA EXP SWAP1 DUP3 ADD MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x444C DUP5 DUP5 DUP5 PUSH1 0x1 DUP6 PUSH2 0x464B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH2 0x4465 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x3EB2 JUMP JUMPDEST PUSH1 0x0 DUP4 SGT PUSH2 0x4472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4491 DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0xAF6 DUP6 DUP8 PUSH1 0x60 ADD MLOAD PUSH2 0x1939 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH2 0x44B2 DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0xAF6 DUP6 DUP8 PUSH1 0x40 ADD MLOAD PUSH2 0x1939 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x44C4 SWAP1 DUP5 PUSH2 0x930 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x44D8 SWAP1 DUP3 PUSH2 0x930 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x44EC SWAP1 DUP4 PUSH2 0x930 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x3EB2 DUP5 PUSH2 0x4CE1 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x450C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP3 PUSH1 0x0 EQ PUSH2 0x4597 JUMPI PUSH1 0x0 DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x1 DUP6 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4533 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP2 PUSH1 0x0 ADD MLOAD DUP2 PUSH1 0x0 ADD MLOAD EQ DUP1 ISZERO PUSH2 0x455B JUMPI POP DUP2 PUSH1 0x20 ADD MLOAD DUP2 PUSH1 0x20 ADD MLOAD EQ JUMPDEST DUP1 ISZERO PUSH2 0x456B JUMPI POP PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x1 EQ JUMPDEST ISZERO PUSH2 0x4595 JUMPI PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x457F SWAP1 DUP5 PUSH2 0x2B68 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x4595 DUP6 DUP6 PUSH2 0x2085 JUMP JUMPDEST POP JUMPDEST PUSH1 0x1 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 ADD MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x45BB PUSH2 0x26DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH1 0xF SWAP2 DUP3 SIGNEXTEND SWAP1 SWAP2 SIGNEXTEND SWAP1 PUSH2 0x45FC DUP8 DUP8 DUP8 PUSH2 0x42CE JUMP JUMPDEST SWAP1 POP PUSH2 0x4608 DUP2 DUP4 PUSH2 0x156C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 SWAP1 SWAP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP9 DUP3 MSTORE SWAP8 DUP5 MSTORE DUP8 DUP2 KECCAK256 SWAP7 DUP2 MSTORE SWAP6 SWAP1 SWAP3 MSTORE POP POP POP SWAP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND SWAP1 SSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4655 PUSH2 0x3C44 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 DUP11 MSTORE SWAP1 DUP10 ADD DUP8 SWAP1 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP1 DUP3 AND SWAP4 DUP12 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x50 SHL DUP2 DIV SWAP1 SWAP3 AND PUSH1 0x60 DUP11 ADD MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP4 DIV DUP2 AND PUSH1 0xA0 DUP12 ADD MSTORE PUSH1 0x1 PUSH1 0xC0 SHL DUP4 DIV DUP2 AND PUSH1 0xC0 DUP12 ADD MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP3 DIV SWAP1 SWAP2 AND PUSH1 0xE0 DUP10 ADD MSTORE SWAP1 SWAP2 POP DUP1 DUP5 ISZERO PUSH2 0x46F4 JUMPI PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND PUSH1 0x80 DUP10 ADD MSTORE PUSH2 0x46FC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP10 ADD MSTORE JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C7 PUSH2 0x4719 DUP5 PUSH4 0x3B9ACA00 PUSH2 0x1939 JUMP JUMPDEST DUP4 PUSH2 0x1987 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH4 0x3B9ACA00 DUP4 EQ ISZERO PUSH2 0x4739 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x47BC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4753 PUSH2 0x474C PUSH4 0x3B9ACA00 DUP7 PUSH2 0x1556 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x4706 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4760 DUP3 PUSH2 0x1D59 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0xF SIGNEXTEND SGT PUSH2 0x477B JUMPI PUSH1 0x0 DUP1 SWAP4 POP SWAP4 POP POP POP PUSH2 0x47BC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x47AF PUSH2 0x47AA PUSH2 0x479E PUSH2 0x478F DUP6 PUSH2 0x3140 JUMP JUMPDEST PUSH9 0x14B927F32BFFB83338 PUSH2 0x4D39 JUMP JUMPDEST PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1E67 JUMP JUMPDEST PUSH2 0x1E9D JUMP JUMPDEST PUSH1 0x7 SIGNEXTEND SWAP5 POP PUSH1 0x1 SWAP4 POP POP POP POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SGT PUSH2 0x47D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xF DUP4 SWAP1 SIGNEXTEND PUSH1 0x1 PUSH1 0x40 SHL DUP2 SLT PUSH2 0x47EC JUMPI PUSH1 0x40 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH5 0x100000000 DUP2 SLT PUSH2 0x4800 JUMPI PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH3 0x10000 DUP2 SLT PUSH2 0x4812 JUMPI PUSH1 0x10 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH2 0x100 DUP2 SLT PUSH2 0x4823 JUMPI PUSH1 0x8 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH1 0x10 DUP2 SLT PUSH2 0x4833 JUMPI PUSH1 0x4 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH1 0x4 DUP2 SLT PUSH2 0x4843 JUMPI PUSH1 0x2 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH1 0x2 DUP2 SLT PUSH2 0x4852 JUMPI PUSH1 0x1 DUP3 ADD SWAP2 POP JUMPDEST PUSH1 0x3F NOT DUP3 ADD PUSH1 0x40 SHL PUSH1 0xF DUP6 SWAP1 SIGNEXTEND PUSH1 0x7F DUP5 SWAP1 SUB SHL PUSH1 0x1 PUSH1 0x3F SHL JUMPDEST PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x4891 JUMPI SWAP1 DUP1 MUL PUSH1 0xFF DUP2 SWAP1 SHR DUP3 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x7F ADD SHR SWAP1 PUSH1 0x1 SAR PUSH2 0x486B JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SHR PUSH32 0x5555555555555555555555555555555555555555555555555555555555555555 SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x2 DUP2 SWAP1 SHR PUSH32 0x3333333333333333333333333333333333333333333333333333333333333333 SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x4 DUP2 SWAP1 SHR PUSH32 0x707070707070707070707070707070707070707070707070707070707070707 SWAP2 SWAP1 SWAP2 AND ADD PUSH1 0x8 DUP2 SWAP1 SHR PUSH31 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x10 DUP2 SWAP1 SHR ADD PUSH1 0x20 DUP2 SWAP1 SHR ADD PUSH1 0x40 DUP2 SWAP1 SHR ADD PUSH1 0x80 DUP2 SWAP1 SHR PUSH1 0xFF SWAP1 DUP2 AND SWAP2 AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x10 DUP3 PUSH1 0xFF AND GT ISZERO PUSH2 0x497F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4989 PUSH2 0x2361 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP PUSH1 0xFF DUP6 AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x49BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x49F8 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x49E5 PUSH2 0x4EE5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x49DD JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 PUSH1 0xFF AND DUP2 LT ISZERO PUSH2 0x4A84 JUMPI PUSH1 0x0 DUP4 DUP3 PUSH1 0x10 DUP2 LT PUSH2 0x4A17 JUMPI INVALID JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4A28 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP4 SLOAD PUSH2 0xFFFF DUP2 AND DUP3 MSTORE PUSH5 0xFFFFFFFFFF PUSH3 0x10000 DUP3 DIV AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xFF PUSH1 0x1 PUSH1 0x38 SHL DUP4 DIV AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV PUSH1 0xA SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH1 0x1 ADD PUSH2 0x49FE JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x4AA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4AD3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4B30 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4AEF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x4B10 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0x4D6C JUMP JUMPDEST DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4B1C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x4AD9 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x444C JUMPI DUP1 JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x4B76 JUMPI POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4B55 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4B6C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT JUMPDEST ISZERO PUSH2 0x4C3E JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4B87 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4B9E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x1 DUP5 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4BB5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4BC8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4BE5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4BFC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 PUSH1 0x1 DUP5 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4C13 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4C26 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD SWAP2 SWAP1 SWAP2 MSTORE MSTORE PUSH1 0x0 NOT ADD PUSH2 0x4B3E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4B34 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4C54 PUSH2 0x4DC7 JUMP JUMPDEST PUSH1 0x0 SWAP5 DUP6 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP3 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x9 PUSH2 0x3FAA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4C98 PUSH2 0x4CD4 JUMP JUMPDEST PUSH1 0x0 SWAP6 DUP7 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP8 KECCAK256 SWAP6 DUP8 MSTORE SWAP5 SWAP1 MSTORE POP POP POP SWAP1 KECCAK256 SLOAD PUSH6 0x10000000000 DUP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP2 PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x8 PUSH2 0x3FAA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CEC DUP3 PUSH2 0x4DD4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP1 POP PUSH2 0x4D2B DUP3 DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0xA0 ADD MLOAD DUP6 PUSH4 0xFFFFFFFF AND DUP9 PUSH1 0xE0 ADD MLOAD PUSH2 0x3C51 JUMP JUMPDEST PUSH2 0x96A DUP3 DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0x3D65 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF DUP3 DUP2 SIGNEXTEND SWAP1 DUP5 SWAP1 SIGNEXTEND SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x1DD6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO PUSH2 0x7C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3FFF DUP5 GT ISZERO PUSH2 0x4D7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH5 0xFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x4D8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 DUP3 GT ISZERO PUSH2 0x4D9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH8 0xFFFF000000000000 PUSH1 0x30 DUP5 SWAP1 SHL AND PUSH6 0xFFFFFFFFFF00 PUSH1 0x8 DUP5 SWAP1 SHL AND OR PUSH1 0xFF DUP3 AND OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0xF PUSH2 0x3FAA JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x4DEB PUSH2 0x4E91 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4DF8 PUSH2 0x4EBD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD PUSH2 0x4EB0 PUSH2 0x4F25 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x4F20 JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x768 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4F8C JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4FA4 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7C7 DUP3 PUSH2 0x4F69 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4FBF JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4FC8 DUP4 PUSH2 0x4F69 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x4FDC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420737765657020636173682074696D65000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x13585C9AD95D081B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x52 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x4F7261636C652072617465206F766572666C6F77 PUSH1 0x60 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D75737420696E697469616C697A65206D61726B657473000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x10D1CE881B9BC81B585C9AD95D1CC81B1A5CDD1959 PUSH1 0x5A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x92DCECC2D8D2C840D2DCC8CAF PUSH1 0x9B SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x24A69D1039B4BC1036B7B73A341032B93937B9 PUSH1 0x69 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x4E6F206E546F6B656E20617373657473 PUSH1 0x80 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x4F766572206D617820617373657473 PUSH1 0x88 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x494D3A20696E746572706F6C6174696F6E206572726F72000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x10D1CE881B585C9AD95D081A5B99195E08189BDD5B99 PUSH1 0x52 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x929A7440D2DCE6EACCCCD2C6D2CADCE840C6C2E6D PUSH1 0x5B SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x12534E881B9BDD08199A5C9CDD081A5B9A5D PUSH1 0x72 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x494D3A20696E76616C69642074696D65 PUSH1 0x80 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x50543A20696E69742076616C7565207A65726F PUSH1 0x68 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x10D1CE881B9BC81B585C9AD95D08199BDD5B99 PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x12534E881B9BC81B585C9AD95D1CC81D1BC81A5B9A5D PUSH1 0x52 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x494D3A20696D706C6965642072617465206661696C6564000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP INVALID MSTORE8 PUSH2 0x6665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F77A26469706673582212 KECCAK256 PUSH5 0x50A3B2F25E CHAINID CHAINID 0xDF XOR SLT CALL PUSH32 0xB029168DD0F81DFE00973993CE5DDB299BC6A164736F6C634300070600330000 ", "sha1": "eb89cf3cd2ca02e8805cd69bc8bca908d6d857bf", "source": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\npragma abicoder v2;\n\nimport \"./nTokenMintAction.sol\";\nimport \"../../internal/markets/Market.sol\";\nimport \"../../internal/markets/CashGroup.sol\";\nimport \"../../internal/markets/AssetRate.sol\";\nimport \"../../internal/balances/BalanceHandler.sol\";\nimport \"../../internal/portfolio/PortfolioHandler.sol\";\nimport \"../../internal/settlement/SettlePortfolioAssets.sol\";\nimport \"../../internal/settlement/SettleBitmapAssets.sol\";\nimport \"../../internal/nToken/nTokenHandler.sol\";\nimport \"../../math/SafeInt256.sol\";\nimport \"../../math/Bitmap.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/// @notice Initialize markets is called once every quarter to setup the new markets. Only the nToken account\n/// can initialize markets, and this method will be called on behalf of that account. In this action\n/// the following will occur:\n///  - nToken Liquidity Tokens will be settled\n///  - Any ifCash assets will be settled\n///  - If nToken liquidity tokens are settled with negative net ifCash, enough cash will be withheld at the PV\n///    to purchase offsetting positions\n///  - fCash positions are written to storage\n///  - For each market, calculate the proportion of fCash to cash given:\n///     - previous oracle rates\n///     - rate anchor set by governance\n///     - percent of cash to deposit into the market set by governance\n///  - Set new markets and add liquidity tokens to portfolio\nlibrary InitializeMarketsAction {\n    using Bitmap for bytes32;\n    using SafeMath for uint256;\n    using SafeInt256 for int256;\n    using PortfolioHandler for PortfolioState;\n    using Market for MarketParameters;\n    using BalanceHandler for BalanceState;\n    using CashGroup for CashGroupParameters;\n    using AssetRate for AssetRateParameters;\n    using AccountContextHandler for AccountContext;\n    using nTokenHandler for nTokenPortfolio;\n\n    event MarketsInitialized(uint16 currencyId);\n    event SweepCashIntoMarkets(uint16 currencyId, int256 cashIntoMarkets);\n\n    struct GovernanceParameters {\n        int256[] depositShares;\n        int256[] leverageThresholds;\n        int256[] annualizedAnchorRates;\n        int256[] proportions;\n    }\n\n    function _getGovernanceParameters(uint256 currencyId, uint256 maxMarketIndex)\n        private\n        view\n        returns (GovernanceParameters memory)\n    {\n        GovernanceParameters memory params;\n        (params.depositShares, params.leverageThresholds) = nTokenHandler.getDepositParameters(\n            currencyId,\n            maxMarketIndex\n        );\n\n        (params.annualizedAnchorRates, params.proportions) = nTokenHandler.getInitializationParameters(\n            currencyId,\n            maxMarketIndex\n        );\n\n        return params;\n    }\n\n    function _settleNTokenPortfolio(nTokenPortfolio memory nToken, uint256 blockTime) private {\n        // nToken never has idiosyncratic cash between 90 day intervals but since it also has a\n        // bitmap fCash assets. We don't set the pointer to the settlement date of the liquidity\n        // tokens (1 quarter away), instead we set it to the current block time. This is a bit\n        // esoteric but will ensure that ifCash is never improperly settled.\n\n        // If lastInitializedTime == reference time then this will fail, that is the correct\n        // behavior since initialization begins at lastInitializedTime. That means that markets\n        // cannot be re-initialized during a single block (this is the correct behavior). If\n        // lastInitializedTime >= reference time then the markets have already been initialized\n        // for the quarter.\n        uint256 referenceTime = DateTime.getReferenceTime(blockTime);\n        require(nToken.lastInitializedTime < referenceTime, \"IM: invalid time\");\n\n        {\n            // Settles liquidity token balances and portfolio state now contains the net fCash amounts\n            SettleAmount[] memory settleAmount =\n                SettlePortfolioAssets.settlePortfolio(nToken.portfolioState, blockTime);\n            nToken.cashBalance = nToken.cashBalance.add(settleAmount[0].netCashChange);\n        }\n\n        (int256 settledAssetCash, uint256 blockTimeUTC0) =\n            SettleBitmapAssets.settleBitmappedCashGroup(\n                nToken.tokenAddress,\n                nToken.cashGroup.currencyId,\n                nToken.lastInitializedTime,\n                blockTime\n            );\n        nToken.cashBalance = nToken.cashBalance.add(settledAssetCash);\n\n        // The ifCashBitmap has been updated to reference this new settlement time\n        require(blockTimeUTC0 <= type(uint40).max);\n        nToken.lastInitializedTime = uint40(blockTimeUTC0);\n    }\n\n    /// @notice Special method to get previous markets, normal usage would not reference previous markets\n    /// in this way\n    function _getPreviousMarkets(\n        uint256 currencyId,\n        uint256 blockTime,\n        nTokenPortfolio memory nToken,\n        MarketParameters[] memory previousMarkets\n    ) private view {\n        uint256 rateOracleTimeWindow = nToken.cashGroup.getRateOracleTimeWindow();\n        // This will reference the previous settlement date to get the previous markets\n        uint256 settlementDate = DateTime.getReferenceTime(blockTime);\n\n        // Assume that assets are stored in order and include all assets of the previous market\n        // set. This will account for the potential that markets.length is greater than the previous\n        // markets when the maxMarketIndex is increased (increasing the overall number of markets).\n        // We don't fetch the 3 month market (i = 0) because it has settled and will not be used for\n        // the subsequent calculations. Since nTokens never allow liquidity to go to zero then we know\n        // there is always a matching token for each market.\n        for (uint256 i = 1; i < nToken.portfolioState.storedAssets.length; i++) {\n            previousMarkets[i].loadMarketWithSettlementDate(\n                currencyId,\n                // These assets will reference the previous liquidity tokens\n                nToken.portfolioState.storedAssets[i].maturity,\n                blockTime,\n                // No liquidity tokens required for this process\n                false,\n                rateOracleTimeWindow,\n                settlementDate\n            );\n        }\n    }\n\n    /// @notice Check the net fCash assets set by the portfolio and withhold cash to account for\n    /// the PV of negative ifCash. Also sets the ifCash assets into the nToken mapping.\n    function _withholdAndSetfCashAssets(\n        nTokenPortfolio memory nToken,\n        MarketParameters[] memory previousMarkets,\n        uint256 currencyId,\n        uint256 blockTime\n    ) private returns (int256) {\n        // Residual fcash must be put into the ifCash bitmap from the portfolio, skip the 3 month\n        // liquidity token since there is no residual fCash for that maturity, it always settles to cash.\n        for (uint256 i = 1; i < nToken.portfolioState.storedAssets.length; i++) {\n            PortfolioAsset memory asset = nToken.portfolioState.storedAssets[i];\n            // Defensive check to ensure that everything is an fcash asset, all liquidity tokens after\n            // the three month should have been settled to fCash at this point.\n            require(asset.assetType == Constants.FCASH_ASSET_TYPE);\n\n            BitmapAssetsHandler.addifCashAsset(\n                nToken.tokenAddress,\n                currencyId,\n                asset.maturity,\n                nToken.lastInitializedTime,\n                asset.notional\n            );\n\n            // Do not have fCash assets stored in the portfolio\n            nToken.portfolioState.deleteAsset(i);\n        }\n\n        // Recalculate what the withholdings are if there are any ifCash assets remaining\n        return _getNTokenNegativefCashWithholding(nToken, previousMarkets, blockTime);\n    }\n\n    /// @notice If a nToken incurs a negative fCash residual as a result of lending, this means\n    /// that we are going to need to withhold some amount of cash so that market makers can purchase and\n    /// clear the debts off the balance sheet.\n    function _getNTokenNegativefCashWithholding(\n        nTokenPortfolio memory nToken,\n        MarketParameters[] memory previousMarkets,\n        uint256 blockTime\n    ) internal view returns (int256 totalCashWithholding) {\n        bytes32 assetsBitmap = BitmapAssetsHandler.getAssetsBitmap(nToken.tokenAddress, nToken.cashGroup.currencyId);\n        // This buffer is denominated in rate precision with 10 basis point increments. It is used to shift the\n        // withholding rate to ensure that sufficient cash is withheld for negative fCash balances.\n        uint256 oracleRateBuffer =\n            uint256(uint8(nToken.parameters[Constants.CASH_WITHHOLDING_BUFFER])) * Constants.TEN_BASIS_POINTS;\n        uint256 oracleRateBlockTime = previousMarkets.length == 0 ? blockTime : blockTime.sub(Constants.QUARTER);\n\n        uint256 bitNum = assetsBitmap.getNextBitNum();\n        while (bitNum != 0) {\n            // lastInitializedTime is now the reference point for all ifCash bitmap\n            uint256 maturity = DateTime.getMaturityFromBitNum(nToken.lastInitializedTime, bitNum);\n\n            // When looping for sweepCashIntoMarkets, previousMarkets is not defined and we only\n            // want to apply withholding for idiosyncratic fCash.\n            if (\n                previousMarkets.length == 0 &&\n                DateTime.isValidMarketMaturity(\n                    nToken.cashGroup.maxMarketIndex,\n                    maturity,\n                    blockTime\n                )\n            ) {\n                // Turn off the bit and look for the next one\n                assetsBitmap = assetsBitmap.setBit(bitNum, false);\n                bitNum = assetsBitmap.getNextBitNum();\n                continue;\n            }\n\n            int256 notional =\n                BitmapAssetsHandler.getifCashNotional(\n                    nToken.tokenAddress,\n                    nToken.cashGroup.currencyId,\n                    maturity\n                );\n\n            // Withholding only applies for negative cash balances\n            if (notional < 0) {\n                uint256 oracleRate = nToken.cashGroup.calculateOracleRate(maturity, oracleRateBlockTime);\n\n                if (oracleRateBuffer > oracleRate) {\n                    oracleRate = 0;\n                } else {\n                    oracleRate = oracleRate.sub(oracleRateBuffer);\n                }\n\n                totalCashWithholding = totalCashWithholding.sub(\n                    AssetHandler.getPresentfCashValue(notional, maturity, blockTime, oracleRate)\n                );\n            }\n\n            // Turn off the bit and look for the next one\n            assetsBitmap = assetsBitmap.setBit(bitNum, false);\n            bitNum = assetsBitmap.getNextBitNum();\n        }\n\n        return nToken.cashGroup.assetRate.convertFromUnderlying(totalCashWithholding);\n    }\n\n    function _calculateNetAssetCashAvailable(\n        nTokenPortfolio memory nToken,\n        MarketParameters[] memory previousMarkets,\n        uint256 blockTime,\n        uint256 currencyId,\n        bool isFirstInit\n    ) private returns (int256) {\n        int256 netAssetCashAvailable;\n        int256 assetCashWithholding;\n\n        if (isFirstInit) {\n            nToken.lastInitializedTime = uint40(DateTime.getTimeUTC0(blockTime));\n        } else {\n            _settleNTokenPortfolio(nToken, blockTime);\n            _getPreviousMarkets(currencyId, blockTime, nToken, previousMarkets);\n            assetCashWithholding = _withholdAndSetfCashAssets(\n                nToken,\n                previousMarkets,\n                currencyId,\n                blockTime\n            );\n        }\n\n        // Deduct the amount of withholding required from the cash balance (at this point includes all settled cash)\n        netAssetCashAvailable = nToken.cashBalance.subNoNeg(assetCashWithholding);\n\n        // This is the new balance to store\n        nToken.cashBalance = assetCashWithholding;\n\n        // We can't have less net asset cash than our percent basis or some markets will end up not\n        // initialized\n        require(\n            netAssetCashAvailable > int256(Constants.DEPOSIT_PERCENT_BASIS),\n            \"IM: insufficient cash\"\n        );\n\n        return netAssetCashAvailable;\n    }\n\n    /// @notice The six month implied rate is zero if there have never been any markets initialized\n    /// otherwise the market will be the interpolation between the old 6 month and 1 year markets\n    /// which are now sitting at 3 month and 9 month time to maturity\n    function _getSixMonthImpliedRate(\n        MarketParameters[] memory previousMarkets,\n        uint256 referenceTime\n    ) private pure returns (uint256) {\n        // Cannot interpolate six month rate without a 1 year market\n        require(previousMarkets.length >= 3, \"IM: six month error\");\n\n        return\n            CashGroup.interpolateOracleRate(\n                previousMarkets[1].maturity,\n                previousMarkets[2].maturity,\n                previousMarkets[1].oracleRate,\n                previousMarkets[2].oracleRate,\n                // Maturity date == 6 months from reference time\n                referenceTime + 2 * Constants.QUARTER\n            );\n    }\n\n    /// @notice Calculates a market proportion via the implied rate. The formula is:\n    ///    exchangeRate = e ^ (impliedRate * timeToMaturity)\n    ///    exchangeRate = (1 / rateScalar) * ln(proportion / (1 - proportion)) + rateAnchor\n    ///    proportion / (1 - proportion) = e^((exchangeRate - rateAnchor) * rateScalar)\n    ///    exp = e^((exchangeRate - rateAnchor) * rateScalar)\n    ///    proportion / (1 - proportion) = exp\n    ///    exp * (1 - proportion) = proportion\n    ///    exp - exp * proportion = proportion\n    ///    exp = proportion + exp * proportion\n    ///    exp = proportion * (1 + exp)\n    ///    proportion = exp / (1 + exp)\n    function _getProportionFromOracleRate(\n        uint256 oracleRate,\n        uint256 timeToMaturity,\n        int256 rateScalar,\n        uint256 annualizedAnchorRate\n    ) private pure returns (int256) {\n        int256 rateAnchor = Market.getExchangeRateFromImpliedRate(annualizedAnchorRate, timeToMaturity);\n        // Exchange rate value here will be floored at Constants.RATE_PRECISION when the oracleRate is zero\n        int256 exchangeRate = Market.getExchangeRateFromImpliedRate(oracleRate, timeToMaturity);\n\n        int128 expValue = ABDKMath64x64.fromInt(\n            // (exchangeRate - rateAnchor) * rateScalar\n            (exchangeRate.sub(rateAnchor)).mulInRatePrecision(rateScalar)\n        );\n        // Scale this back to a decimal in abdk\n        expValue = ABDKMath64x64.div(expValue, Constants.RATE_PRECISION_64x64);\n        // Take the exponent\n        expValue = ABDKMath64x64.exp(expValue);\n        // proportion = exp / (1 + exp)\n        // NOTE: 2**64 == 1 in ABDKMath64x64\n        int128 proportion = ABDKMath64x64.div(expValue, ABDKMath64x64.add(expValue, 2**64));\n\n        // Scale this back to 1e9 precision\n        proportion = ABDKMath64x64.mul(proportion, Constants.RATE_PRECISION_64x64);\n\n        return ABDKMath64x64.toInt(proportion);\n    }\n\n    /// @dev Returns the oracle rate given the market ratios of fCash to cash. The annualizedAnchorRate\n    /// is used to calculate a rate anchor. Since a rate anchor varies with timeToMaturity and annualizedAnchorRate\n    /// does not, this method will return consistent values regardless of the timeToMaturity of when initialize\n    /// markets is called. This can be helpful if a currency needs to be initialized mid quarter when it is\n    /// newly launched.\n    function _calculateOracleRate(\n        int256 fCashAmount,\n        int256 underlyingCashToMarket,\n        int256 rateScalar,\n        uint256 annualizedAnchorRate,\n        uint256 timeToMaturity\n    ) internal pure returns (uint256) {\n        int256 rateAnchor = Market.getExchangeRateFromImpliedRate(annualizedAnchorRate, timeToMaturity);\n        uint256 oracleRate = Market.getImpliedRate(\n            fCashAmount,\n            underlyingCashToMarket,\n            rateScalar,\n            rateAnchor,\n            timeToMaturity\n        );\n\n        return oracleRate;\n    }\n\n    /// @notice Returns the linear interpolation between two market rates. The formula is\n    /// slope = (longMarket.oracleRate - shortMarket.oracleRate) / (longMarket.maturity - shortMarket.maturity)\n    /// interpolatedRate = slope * (assetMaturity - shortMarket.maturity) + shortMarket.oracleRate\n    function _interpolateFutureRate(\n        uint256 shortMaturity,\n        uint256 shortRate,\n        MarketParameters memory longMarket\n    ) private pure returns (uint256) {\n        uint256 longMaturity = longMarket.maturity;\n        uint256 longRate = longMarket.oracleRate;\n        // the next market maturity is always a quarter away\n        uint256 newMaturity = longMarket.maturity + Constants.QUARTER;\n        require(shortMaturity < longMaturity, \"IM: interpolation error\");\n\n        // It's possible that the rates are inverted where the short market rate > long market rate and\n        // we will get an underflow here so we check for that\n        if (longRate >= shortRate) {\n            return\n                (longRate - shortRate)\n                    .mul(newMaturity - shortMaturity)\n                // No underflow here, checked above\n                    .div(longMaturity - shortMaturity)\n                    .add(shortRate);\n        } else {\n            // In this case the slope is negative so:\n            // interpolatedRate = shortMarket.oracleRate - slope * (assetMaturity - shortMarket.maturity)\n            uint256 diff =\n                (shortRate - longRate)\n                    .mul(newMaturity - shortMaturity)\n                // No underflow here, checked above\n                    .div(longMaturity - shortMaturity);\n\n            // This interpolation may go below zero so we bottom out interpolated rates at zero\n            return shortRate > diff ? shortRate - diff : 0;\n        }\n    }\n\n    /// @dev This is here to clear the stack\n    function _setLiquidityAmount(\n        int256 netAssetCashAvailable,\n        int256 depositShare,\n        uint256 assetType,\n        MarketParameters memory newMarket,\n        nTokenPortfolio memory nToken\n    ) private pure returns (int256) {\n        // The portion of the cash available that will be deposited into the market\n        int256 assetCashToMarket =\n            netAssetCashAvailable.mul(depositShare).div(Constants.DEPOSIT_PERCENT_BASIS);\n        newMarket.totalAssetCash = assetCashToMarket;\n        newMarket.totalLiquidity = assetCashToMarket;\n\n        // Add a new liquidity token, this will end up in the new asset array\n        nToken.portfolioState.addAsset(\n            nToken.cashGroup.currencyId,\n            newMarket.maturity,\n            assetType, // This is liquidity token asset type\n            assetCashToMarket\n        );\n\n        // fCashAmount is calculated using the underlying amount\n        return nToken.cashGroup.assetRate.convertToUnderlying(assetCashToMarket);\n    }\n\n    /// @notice Calculates the fCash amount given the cash and proportion:\n    // proportion = totalfCash / (totalfCash + totalCashUnderlying)\n    // proportion * (totalfCash + totalCashUnderlying) = totalfCash\n    // proportion * totalCashUnderlying + proportion * totalfCash = totalfCash\n    // proportion * totalCashUnderlying = totalfCash * (1 - proportion)\n    // totalfCash = proportion * totalCashUnderlying / (1 - proportion)\n    function _calculatefCashAmountFromProportion(\n        int256 underlyingCashToMarket,\n        int256 proportion\n    ) private pure returns (int256) {\n        return underlyingCashToMarket\n            .mul(proportion)\n            .div(Constants.RATE_PRECISION.sub(proportion));\n    }\n\n    /// @notice Sweeps nToken cash balance into markets after accounting for cash withholding. Can be\n    /// done after fCash residuals are purchased to ensure that markets have maximum liquidity.\n    /// @param currencyId currency of markets to initialize\n    /// @dev emit:CashSweepIntoMarkets\n    /// @dev auth:none\n    function sweepCashIntoMarkets(uint16 currencyId) external {\n        uint256 blockTime = block.timestamp;\n        nTokenPortfolio memory nToken;\n        nToken.loadNTokenPortfolioStateful(currencyId);\n        require(nToken.portfolioState.storedAssets.length > 0, \"No nToken assets\");\n\n        // Can only sweep cash after markets have been initialized\n        uint256 referenceTime = DateTime.getReferenceTime(blockTime);\n        require(nToken.lastInitializedTime >= referenceTime, \"Must initialize markets\");\n\n        // Can only sweep cash after the residual purchase time has passed\n        uint256 minSweepCashTime =\n            nToken.lastInitializedTime.add(\n                uint256(uint8(nToken.parameters[Constants.RESIDUAL_PURCHASE_TIME_BUFFER])) * 1 hours\n            );\n        require(blockTime > minSweepCashTime, \"Invalid sweep cash time\");\n\n        int256 assetCashWithholding =\n            _getNTokenNegativefCashWithholding(\n                nToken,\n                new MarketParameters[](0), // Parameter is unused when referencing current markets\n                blockTime\n            );\n\n        int256 cashIntoMarkets = nToken.cashBalance.subNoNeg(assetCashWithholding);\n        BalanceHandler.setBalanceStorageForNToken(\n            nToken.tokenAddress,\n            nToken.cashGroup.currencyId,\n            assetCashWithholding\n        );\n\n        // This will deposit the cash balance into markets, but will not record a token supply change.\n        nTokenMintAction.nTokenMint(currencyId, cashIntoMarkets);\n        emit SweepCashIntoMarkets(currencyId, cashIntoMarkets);\n    }\n\n    /// @notice Initialize the market for a given currency id, done once a quarter\n    /// @param currencyId currency of markets to initialize\n    /// @param isFirstInit true if this is the first time the markets have been initialized\n    /// @dev emit:MarketsInitialized\n    /// @dev auth:none\n    function initializeMarkets(uint16 currencyId, bool isFirstInit) external {\n        uint256 blockTime = block.timestamp;\n        nTokenPortfolio memory nToken;\n        nToken.loadNTokenPortfolioStateful(currencyId);\n        MarketParameters[] memory previousMarkets =\n            new MarketParameters[](nToken.cashGroup.maxMarketIndex);\n\n        // This should be sufficient to validate that the currency id is valid\n        require(nToken.cashGroup.maxMarketIndex != 0, \"IM: no markets to init\");\n        // If the nToken has any assets then this is not the first initialization\n        if (isFirstInit) {\n            require(nToken.portfolioState.storedAssets.length == 0, \"IM: not first init\");\n        }\n\n        int256 netAssetCashAvailable = _calculateNetAssetCashAvailable(\n            nToken,\n            previousMarkets,\n            blockTime,\n            currencyId,\n            isFirstInit\n        );\n\n        GovernanceParameters memory parameters =\n            _getGovernanceParameters(currencyId, nToken.cashGroup.maxMarketIndex);\n\n        MarketParameters memory newMarket;\n        // Oracle rate is carried over between loops\n        uint256 oracleRate;\n        for (uint256 i = 0; i < nToken.cashGroup.maxMarketIndex; i++) {\n            // Traded markets are 1-indexed\n            newMarket.maturity = DateTime.getReferenceTime(blockTime).add(\n                DateTime.getTradedMarket(i + 1)\n            );\n\n            int256 underlyingCashToMarket =\n                _setLiquidityAmount(\n                    netAssetCashAvailable,\n                    parameters.depositShares[i],\n                    Constants.MIN_LIQUIDITY_TOKEN_INDEX + i, // liquidity token asset type\n                    newMarket,\n                    nToken\n                );\n\n            uint256 timeToMaturity = newMarket.maturity.sub(blockTime);\n            int256 rateScalar = nToken.cashGroup.getRateScalar(i + 1, timeToMaturity);\n            // Governance will prevent previousMarkets.length from being equal to 1, meaning that we will\n            // either have 0 markets (on first init), exactly 2 markets, or 2+ markets. In the case that there\n            // are exactly two markets then the 6 month market must be initialized via this method (there is no\n            // 9 month market to interpolate a rate against). In the case of 2+ markets then we will only enter this\n            // first branch when the number of markets is increased\n            if (\n                isFirstInit ||\n                // This is the six month market when there are only 3 and 6 month markets\n                (i == 1 && previousMarkets.length == 2) ||\n                // At this point, these are new markets and they must be initialized\n                (i >= nToken.portfolioState.storedAssets.length) ||\n                // When extending from the 6 month to 1 year market we must initialize both 6 and 1 year as new\n                (i == 1 && previousMarkets[2].oracleRate == 0)\n            ) {\n                // Any newly added markets cannot have their implied rates interpolated via the previous\n                // markets. In this case we initialize the markets using the rate anchor and proportion.\n                int256 fCashAmount = _calculatefCashAmountFromProportion(underlyingCashToMarket, parameters.proportions[i]);\n\n                newMarket.totalfCash = fCashAmount;\n                newMarket.oracleRate = _calculateOracleRate(\n                    fCashAmount,\n                    underlyingCashToMarket,\n                    rateScalar,\n                    uint256(parameters.annualizedAnchorRates[i]), // No overflow, uint32 when set\n                    timeToMaturity\n                );\n\n                // If this fails it is because the rate anchor and proportion are not set properly by\n                // governance.\n                require(newMarket.oracleRate > 0, \"IM: implied rate failed\");\n            } else {\n                // Two special cases for the 3 month and 6 month market when interpolating implied rates. The 3 month market\n                // inherits the implied rate from the previous 6 month market (they are now at the same maturity).\n                if (i == 0) {\n                    // We should never get an array out of bounds error here because of the inequality check in the first branch\n                    // of the outer if statement.\n                    oracleRate = previousMarkets[1].oracleRate;\n                } else if (i == 1) {\n                    // The six month market is the interpolation between the 3 month and the 1 year market (now at 9 months). This\n                    // interpolation is different since the rate is between 3 and 9 months, for all the other interpolations we interpolate\n                    // forward in time (i.e. use a 3 and 6 month rate to interpolate a 1 year rate). The first branch of this if statement\n                    // will capture the case when the 1 year rate has not been set.\n                    oracleRate = _getSixMonthImpliedRate(\n                        previousMarkets,\n                        DateTime.getReferenceTime(blockTime)\n                    );\n                } else {\n                    // Any other market has the interpolation between the new implied rate from the newly initialized market previous\n                    // to this market interpolated with the previous version of this market. For example, the newly initialized 1 year\n                    // market will have its implied rate set to the interpolation between the newly initialized 6 month market (done in\n                    // previous iteration of this loop) and the previous 1 year market (which has now rolled down to 9 months). Similarly,\n                    // a 2 year market will be interpolated from the newly initialized 1 year and the previous 2 year market.\n\n                    // This is the previous market maturity, traded markets are 1-indexed\n                    uint256 shortMarketMaturity =\n                        DateTime.getReferenceTime(blockTime).add(DateTime.getTradedMarket(i));\n                    oracleRate = _interpolateFutureRate(\n                        shortMarketMaturity,\n                        // This is the oracle rate from the previous iteration in the loop,\n                        // refers to the new oracle rate set on the newly initialized market\n                        // that is adjacent to the market currently being initialized.\n                        oracleRate,\n                        // This is the previous version of the current market\n                        previousMarkets[i]\n                    );\n                }\n\n                // When initializing new markets we need to ensure that the new implied oracle rates align\n                // with the current yield curve or valuations for ifCash will spike. This should reference the\n                // previously calculated implied rate and the current market.\n                int256 proportion =\n                    _getProportionFromOracleRate(\n                        oracleRate,\n                        timeToMaturity,\n                        rateScalar,\n                        uint256(parameters.annualizedAnchorRates[i]) // No overflow, uint32 when set\n                    );\n\n                // If the calculated proportion is greater than the leverage threshold then we cannot\n                // provide liquidity without risk of liquidation. In this case, set the leverage threshold\n                // as the new proportion and calculate the oracle rate from it. This will result in fCash valuations\n                // changing on chain, however, adding liquidity via nTokens would also end up with this\n                // result as well.\n                if (proportion > parameters.leverageThresholds[i]) {\n                    proportion = parameters.leverageThresholds[i];\n                    newMarket.totalfCash = _calculatefCashAmountFromProportion(underlyingCashToMarket, proportion);\n\n                    oracleRate = _calculateOracleRate(\n                        newMarket.totalfCash,\n                        underlyingCashToMarket,\n                        rateScalar,\n                        uint256(parameters.annualizedAnchorRates[i]), // No overflow, uint32 when set\n                        timeToMaturity\n                    );\n\n                    require(oracleRate != 0, \"Oracle rate overflow\");\n                } else {\n                    newMarket.totalfCash = _calculatefCashAmountFromProportion(underlyingCashToMarket, proportion);\n                }\n\n                // It's possible that totalfCash is zero from rounding errors above, we want to set this to a minimum value\n                // so that we don't have divide by zero errors.\n                if (newMarket.totalfCash < 1) newMarket.totalfCash = 1;\n\n                newMarket.oracleRate = oracleRate;\n                // The oracle rate has been changed so we set the previous trade time to current\n                newMarket.previousTradeTime = blockTime;\n            }\n\n            // Implied rate will always be set to oracle rate\n            newMarket.lastImpliedRate = newMarket.oracleRate;\n            finalizeMarket(newMarket, currencyId, nToken);\n        }\n\n        // prettier-ignore\n        (\n            /* hasDebt */,\n            /* activeCurrencies */,\n            uint8 assetArrayLength,\n            /* nextSettleTime */\n        ) = nToken.portfolioState.storeAssets(nToken.tokenAddress);\n        BalanceHandler.setBalanceStorageForNToken(\n            nToken.tokenAddress,\n            currencyId,\n            nToken.cashBalance\n        );\n        nTokenHandler.setArrayLengthAndInitializedTime(\n            nToken.tokenAddress,\n            assetArrayLength,\n            nToken.lastInitializedTime\n        );\n\n        emit MarketsInitialized(uint16(currencyId));\n    }\n\n    function finalizeMarket(\n        MarketParameters memory market,\n        uint256 currencyId,\n        nTokenPortfolio memory nToken\n    ) internal {\n        // Always reference the current settlement date\n        uint256 settlementDate = DateTime.getReferenceTime(block.timestamp) + Constants.QUARTER;\n        market.setMarketStorageForInitialize(currencyId, settlementDate);\n\n        BitmapAssetsHandler.addifCashAsset(\n            nToken.tokenAddress,\n            currencyId,\n            market.maturity,\n            nToken.lastInitializedTime,\n            market.totalfCash.neg()\n        );\n    }\n\n    /// @notice Get a list of deployed library addresses (sorted by library name)\n    function getLibInfo() external view returns (address) {\n        return address(nTokenMintAction);\n    }\n}\n", "sourceMap": "1461:31351:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;", "sourcePath": "contracts/external/actions/InitializeMarketsAction.sol", "deployment": {"address": "0xCa3A0c6e06f4b5EdDceDD0c7720549B221bD8FAD", "chainid": "5", "blockHeight": 6439057}}