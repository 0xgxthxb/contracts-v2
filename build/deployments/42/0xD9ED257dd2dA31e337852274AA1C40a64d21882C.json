{"allSourcePaths": {"29": "contracts/external/actions/InitializeMarketsAction.sol", "71": "contracts/math/ABDKMath64x64.sol", "50": "contracts/global/Types.sol", "51": "contracts/internal/AccountContextHandler.sol", "68": "contracts/internal/valuation/AssetHandler.sol", "58": "contracts/internal/markets/AssetRate.sol", "119": "interfaces/notional/AssetRateAdapter.sol", "52": "contracts/internal/balances/BalanceHandler.sol", "72": "contracts/math/Bitmap.sol", "63": "contracts/internal/portfolio/BitmapAssetsHandler.sol", "116": "interfaces/compound/CErc20Interface.sol", "117": "interfaces/compound/CEtherInterface.sol", "118": "interfaces/compound/CTokenInterface.sol", "59": "contracts/internal/markets/CashGroup.sol", "47": "contracts/global/Constants.sol", "60": "contracts/internal/markets/DateTime.sol", "73": "contracts/math/FloatingPoint56.sol", "111": "interfaces/IEIP20NonStandard.sol", "14": "/home/jwu/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/contracts/token/ERC20/IERC20.sol", "53": "contracts/internal/balances/Incentives.sol", "48": "contracts/global/LibStorage.sol", "61": "contracts/internal/markets/Market.sol", "64": "contracts/internal/portfolio/PortfolioHandler.sol", "74": "contracts/math/SafeInt256.sol", "6": "/home/jwu/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/contracts/math/SafeMath.sol", "66": "contracts/internal/settlement/SettleBitmapAssets.sol", "67": "contracts/internal/settlement/SettlePortfolioAssets.sol", "54": "contracts/internal/balances/TokenHandler.sol", "65": "contracts/internal/portfolio/TransferAssets.sol", "62": "contracts/internal/nTokenHandler.sol", "34": "contracts/external/actions/nTokenMintAction.sol"}, "bytecode": "615355610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063bb6dd58e14610045578063d0e064c014610067575b600080fd5b81801561005157600080fd5b50610065610060366004614f24565b610087565b005b81801561007357600080fd5b50610065610082366004614f3e565b610274565b42610090614d69565b61009a81846106f0565b602081015151516100c65760405162461bcd60e51b81526004016100bd906150c7565b60405180910390fd5b60006100d183610709565b905080826080015110156100f75760405162461bcd60e51b81526004016100bd9061500d565b60a08201516080830151600091610115919060021a610e100261072c565b90508084116101365760405162461bcd60e51b81526004016100bd90614f78565b604080516000808252602082019092526101749085908361016d565b61015a614db2565b8152602001906001900390816101525790505b508761078f565b9050600061018f8286606001516108ef90919063ffffffff16565b60c08601518651519192506101a89161ffff168461090b565b604051632128561360e11b815273__nTokenMintAction______________________90634250ac26906101e1908a9085906004016152ea565b60206040518083038186803b1580156101f957600080fd5b505af415801561020d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102319190614f0c565b507f120b36bd1b47ae64f0f3ea6eb0fbfba209b2c780a31864e382d9957377a9f94687826040516102639291906152ea565b60405180910390a150505050505050565b4261027d614d69565b61028781856106f0565b80516020015160009067ffffffffffffffff811180156102a657600080fd5b506040519080825280602002602001820160405280156102e057816020015b6102cd614db2565b8152602001906001900390816102c55790505b508251602001519091506103065760405162461bcd60e51b81526004016100bd90615260565b83156103305760208201515151156103305760405162461bcd60e51b81526004016100bd906151b0565b60006103438383868961ffff168961092e565b9050600061035d8761ffff168560000151602001516109c0565b9050610367614db2565b6000805b86516020015181101561066057610396610387826001016109fc565b6103908a610709565b9061072c565b6020840152835180516000916103c991889190859081106103b357fe5b602002602001015184600260ff1601878c610aa0565b905060006103e48a8660200151610b0590919063ffffffff16565b89519091506000906103fa906001860184610b62565b90508b806104145750836001148015610414575088516002145b80610425575060208a015151518410155b80610453575083600114801561045357508860028151811061044357fe5b602002602001015160c001516000145b156104d457600061047b848960600151878151811061046e57fe5b6020026020010151610bd4565b9050808760400181815250506104ab8185848b60400151898151811061049d57fe5b602002602001015187610bf1565b60c088018190526104ce5760405162461bcd60e51b81526004016100bd90615290565b5061063c565b836104f957886001815181106104e657fe5b602002602001015160c001519450610556565b836001141561051b576105148961050f8d610709565b610c1b565b9450610556565b6000610532610529866109fc565b6103908e610709565b905061055281878c888151811061054557fe5b6020026020010151610cb4565b9550505b600061057b8684848b60400151898151811061056e57fe5b6020026020010151610d4b565b90508760200151858151811061058d57fe5b602002602001015181131561060757876020015185815181106105ac57fe5b602002602001015190506105c08482610bd4565b8760400181815250506105e3876040015185848b60400151898151811061049d57fe5b9550856106025760405162461bcd60e51b81526004016100bd90614fdf565b610617565b6106118482610bd4565b60408801525b60018760400151121561062c57600160408801525b5060c0860185905260e086018b90525b60c086015160a08701526106558661ffff8f168c610ded565b50505060010161036b565b50600061067e8760c001518860200151610e3690919063ffffffff16565b509250505061069a8760c001518b61ffff16896060015161090b565b6106ad8760c00151828960800151611075565b7fcffeff9accc9171f01fec36e09a1a06f0160ce50a8c4c0a2adff9cec562adf088a6040516106dc91906152db565b60405180910390a150505050505050505050565b6106fa82826110e8565b6107038161118b565b90915250565b60006276a70082101561071b57600080fd5b6276a700825b06820390505b919050565b600082820183811015610786576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000806107ac8560c0015186600001516000015161ffff166111ae565b60a0860151855191925060011a620f42400290600090156107d9576107d4856276a700610b05565b6107db565b845b905060006107e8846111e3565b90505b80156108d1576000610801896080015183611208565b90508751600014801561082057508851602001516108209082896112bb565b156108445761083185836000611360565b945061083c856111e3565b9150506107eb565b60c089015189515160009161085d9161ffff16846113ab565b905060008112156108b15789516000906108789084876113f0565b90508086111561088a57506000610897565b6108948187610b05565b90505b6108ad6108a683858c856114cf565b8990611515565b9750505b6108bd86846000611360565b95506108c8866111e3565b925050506107eb565b8751604001516108e1908661152b565b9450505050505b9392505050565b60006108fb8383611515565b9050600081121561078957600080fd5b600081121561091957600080fd5b610929838383600080600061155c565b505050565b600080600083156109535761094286611672565b64ffffffffff166080890152610978565b61095d888761168e565b61096985878a8a611768565b610975888887896117f8565b90505b606088015161098790826108ef565b6060890182905291506305f5e10082136109b35760405162461bcd60e51b81526004016100bd90615181565b5090505b95945050505050565b6109c8614dfa565b6109d0614dfa565b6109da8484611881565b602083015281526109eb84846118b9565b606083015260408201529392505050565b60008160011415610a1157506276a700610727565b8160021415610a24575062ed4e00610727565b8160031415610a3857506301da9c00610727565b8160041415610a4c57506303b53800610727565b8160051415610a6057506309450c00610727565b8160061415610a74575063128a1800610727565b8160071415610a8857506325143000610727565b60405162461bcd60e51b81526004016100bd90615073565b600080610abb6305f5e100610ab589896118e3565b90611931565b606085018190526080850181905283515160208087015190860151929350610aea929161ffff16908885611962565b825160400151610afa9082611a5f565b979650505050505050565b600082821115610b5c576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082600111158015610b79575083602001518311155b610b8257600080fd5b606084015160806008600019860102019060ff90821c16633b9aca00026000610bbb610bad86611a8a565b610ab5846301da9c006118e3565b905060008113610bca57600080fd5b9695505050505050565b6000610786610be7633b9aca0084611515565b610ab585856118e3565b600080610bfe8484611aa4565b90506000610c0f8888888588611b0f565b98975050505050505050565b6000600383511015610c3f5760405162461bcd60e51b81526004016100bd9061509a565b61078683600181518110610c4f57fe5b60200260200101516020015184600281518110610c6857fe5b60200260200101516020015185600181518110610c8157fe5b602002602001015160c0015186600281518110610c9a57fe5b602090810291909101015160c0015162ed4e008701611bcc565b602081015160c0820151600091906276a7008201828710610ce75760405162461bcd60e51b81526004016100bd9061511a565b858210610d1657610d0c86610390898603610d068387038c8703611c2a565b90611c83565b93505050506108e8565b6000610d2c888503610d06858a038b8603611c2a565b9050808711610d3c576000610d40565b8087035b9450505050506108e8565b600080610d588386611aa4565b90506000610d668787611aa4565b90506000610d86610d8187610d7b8587611515565b90611cea565b611d03565b9050610d9881621dcd6560491b611d36565b9050610da381611d89565b90506000610dbe82610db984600160401b611dde565b611d36565b9050610dd081621dcd6560491b611e11565b9050610ddb81611e47565b60070b9450505050505b949350505050565b60006276a700610dfc42610709565b019050610e0a848483611e50565b610e2f8260c001518486602001518560800151610e2a8960400151611eb7565b611ec5565b5050505050565b6000808080808080805b895151811015610ec75760008a600001518281518110610e5c57fe5b60200260200101519050600380811115610e7257fe5b8160a001516003811115610e8257fe5b1415610e8d57600080fd5b60028160a001516003811115610e9f57fe5b14158015610eaf57506060810151155b15610ebe57610ebe8b8361202f565b50600101610e40565b5060005b895151811015610f6a5760008a600001518281518110610ee757fe5b6020026020010151905060026003811115610efe57fe5b8160a001516003811115610f0e57fe5b1415610f2257608081015160009055610f61565b60018160a001516003811115610f3457fe5b1415610f4d57608081015180610f4a838261217f565b50505b610f59818686866122a8565b919650945092505b50600101610ecb565b5060608901516000610f7a61230b565b6001600160a01b038b1660009081526020829052604081209192505b8c60200151518110156110445760008d602001518281518110610fb557fe5b60200260200101519050806060015160001415610fd2575061103c565b60028160a001516003811115610fe457fe5b14158015611002575060038160a001516003811115610fff57fe5b14155b61100b57600080fd5b611017818989896122a8565b919950975095506110348184876010811061102e57fe5b0161217f565b600185019450505b600101610f96565b506010831115801561105b575064ffffffffff8411155b61106457600080fd5b50939a929950975095509350505050565b63ffffffff811061108557600080fd5b600061108f612318565b6001600160a01b039094166000908152602094909452506040909220805460ff909216600160501b0260ff60501b1963ffffffff909416600160301b0269ffffffff000000000000199093169290921792909216179055565b6110f58161ffff16612325565b6001600160a01b031660c08301819052600090819081906111159061234b565b9450945094505050600061112c8660c001516123b4565b505060808701859052604087018190526001600160d81b0319831660a088015260c087015190915061116090846000612415565b602087015260c08601516111789061ffff87166124a8565b5050506060909601959095525050505050565b611193614e22565b60006111a28361ffff16612531565b90506108e8838261257d565b6000806111b96125c0565b6001600160a01b038516600090815260209182526040808220868352909252205491505092915050565b6000816111f257506000610727565b6111fb826125cd565b60ff036001019050919050565b60008161121457600080fd5b61010082111561122357600080fd5b600061122e84611672565b90506000605a84116112495750620151808302019050610789565b60878411611271575060591983016207e900908102908206909103016276a700019050610789565b60c3841161129a5750608619830162278d00908102908206909103016301da9c00019050610789565b5060c21983016276a70090810290820690910301630b1fa800019050610789565b60008084116112dc5760405162461bcd60e51b81526004016100bd90615044565b60078411156112fd5760405162461bcd60e51b81526004016100bd90615151565b6276a700830615611310575060006108e8565b600061131b83610709565b905060015b8581116113545761133a611333826109fc565b839061072c565b85141561134c576001925050506108e8565b600101611320565b50600095945050505050565b60006001831015801561137557506101008311155b61137e57600080fd5b81156113975750600160ff1b60001983011c83176108e8565b50600160ff1b60001983011c1983166108e8565b6000806113b6612666565b6001600160a01b03861660009081526020918252604080822087835283528082208683529092522054600f90810b900b9150509392505050565b600080600061140486602001518686612673565b9150915060006114138761273b565b90508161142c578651610d0c9061ffff1687838861274f565b600061143786610709565b90506000611447611333866109fc565b9050600061145f8a6000015161ffff1683868b61274f565b905060008087600114156114845789915061147d8c604001516127ee565b90506114b3565b61149a61149360018a036109fc565b869061072c565b91506114b08c6000015161ffff1683888d61274f565b90505b6114c0828583868f611bcc565b985050505050505050506108e8565b6000846114de57506000610de5565b60006114ea8585610b05565b905060006114f8828561287f565b9050633b9aca0081131561150b57600080fd5b610afa8782611cea565b8082038281131560008312151461078957600080fd5b600080610de58460200151610ab586604001516115566402540be400886118e390919063ffffffff16565b906118e3565b60006115666128e7565b6001600160a01b0388166000908152602082815260408083208a845290915290209091506001600160571b031986128015906115a957506001600160571b038613155b6115b257600080fd5b600085121580156115ca57506001600160501b038513155b6115d357600080fd5b63ffffffff8411156115e457600080fd5b805469ffffffffffffffffffff19166001600160501b0386161763ffffffff60501b1916600160501b63ffffffff861602176001600160a81b0316600160a81b6affffffffffffffffffffff600a89900b1602178155611643836128f4565b815466ffffffffffffff91909116600160701b0266ffffffffffffff60701b1990911617905550505050505050565b60006201518082101561168457600080fd5b6201518082610721565b600061169982610709565b9050808360800151106116be5760405162461bcd60e51b81526004016100bd906151dc565b60006116ce846020015184612922565b90506116ff816000815181106116e057fe5b6020026020010151602001518560600151612b0690919063ffffffff16565b60608501525060c0830151835151608085015160009283926117289261ffff9091169087612b1c565b6060870151919350915061173c9083612b06565b606086015264ffffffffff81111561175357600080fd5b64ffffffffff16608090940193909352505050565b6000611777836000015161273b565b9050600061178485610709565b905060015b602085015151518110156117ef576117e78786602001516000015183815181106117af57fe5b60200260200101516020015188600087878a88815181106117cc57fe5b6020026020010151612c41909695949392919063ffffffff16565b600101611789565b50505050505050565b600060015b60208601515151811015611875576000866020015160000151828151811061182157fe5b60200260200101519050600160ff1681604001511461183f57600080fd5b61185c8760c001518683602001518a608001518560600151611ec5565b50602087015161186c908361202f565b506001016117fd565b506109b785858461078f565b606080600061188e612c78565b60008681526020829052604081209192506118ac9082908790612c85565b9097909650945050505050565b60608060006118c6612e24565b60008681526020829052604090209091506118ac81866001612c85565b8181026000198314156119135781158061190557508282828161190257fe5b05145b61190e57600080fd5b610789565b82158061192857508183828161192557fe5b05145b61078957600080fd5b6000816000191480156119475750600160ff1b83145b1561195157600080fd5b81838161195a57fe5b059392505050565b84516119719085858585612e31565b1561197b57610e2f565b6040850151156119a8576000611998866020015186868686612e31565b905080156119a65750610e2f565b505b6119b182612f42565b156119c45760008112156119c457600080fd5b6001600160571b031981128015906119e357506001600160571b038113155b6119ec57600080fd5b84602001515185604001511415611a1057611a0a8560200151612f58565b60208601525b60008560200151866040015181518110611a2657fe5b6020908102919091018101519586528501939093526040808501929092526060840152600060a090930192909252500180516001019052565b600080610de58460400151610ab56402540be400610ab58789602001516118e390919063ffffffff16565b60006001600160ff1b03821115611aa057600080fd5b5090565b600080611ac1611abc6301da9c00610d068787611c2a565b613011565b90506000611ad582621dcd6560491b611d36565b90506000611ae282611d89565b90506000611af682621dcd6560491b611e11565b9050611b0181611e47565b60070b979650505050505050565b6000806000611b22888888886000613028565b9150915080611b36576000925050506109b7565b6000611b4183611d03565b90506000611b5582621dcd6560491b611d36565b90506000611b62826130de565b90506000611b7e611b7983621dcd6560491b611e11565b613118565b67ffffffffffffffff1690506000611b9e89610d06846301da9c00611c2a565b905063ffffffff811115611bbc5760009750505050505050506109b7565b9c9b505050505050505050505050565b6000818610611bda57600080fd5b848210611be657600080fd5b838310611c0c57611c0584610390888803610d068388038b8803611c2a565b90506109b7565b611c05611c23878703610d068688038a8703611c2a565b8590610b05565b600082611c3957506000610789565b82820282848281611c4657fe5b04146107865760405162461bcd60e51b81526004018080602001828103825260218152602001806152ff6021913960400191505060405180910390fd5b6000808211611cd9576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611ce257fe5b049392505050565b6000610786611cf984846118e3565b633b9aca00611931565b6000677fffffffffffffff198212158015611d265750677fffffffffffffff8213155b611d2f57600080fd5b5060401b90565b600081600f0b60001415611d4957600080fd5b600082600f0b604085600f0b901b81611d5e57fe5b05905060016001607f1b03198112801590611d80575060016001607f1b038113155b61078657600080fd5b6000600160461b82600f0b12611d9e57600080fd5b683fffffffffffffffff1982600f0b1215611dbb57506000610727565b610789608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d613134565b6000600f83810b9083900b0160016001607f1b03198112801590611d80575060016001607f1b0381131561078657600080fd5b6000600f83810b9083900b0260401d60016001607f1b03198112801590611d80575060016001607f1b0381131561078657600080fd5b600f0b60401d90565b6000611e5a613be2565b60008481526020828152604080832088830151845282528083208684529091529081902090860151606087015160a088015160c089015160e08a01519596509394611ea9948694939291613bef565b610e2f818660800151613d03565b6000610789600019836118e3565b600080611ed287876111ae565b90506000611ede612666565b6001600160a01b0389166000908152602082815260408083208b845282528083208a8452909152812091925080611f15888a613d4c565b9150915080611f2357600080fd5b611f2d8583613e57565b15611fbc578254600090611f49908990600f90810b900b612b06565b905060016001607f1b03198112801590611f6a575060016001607f1b038113155b611f7357600080fd5b83546001600160801b0319166001600160801b03600f83900b1617845580611fa457611fa186846000611360565b95505b611faf8c8c88613e87565b95506109b7945050505050565b86156120205760016001607f1b03198712801590611fe1575060016001607f1b038713155b611fea57600080fd5b82546001600160801b0319166001600160801b03600f89900b1617835561201385836001611360565b94506120208b8b87613e87565b50949998505050505050505050565b815151811061203d57600080fd5b600082606001511161204e57600080fd5b60008260000151828151811061206057fe5b602002602001015190506002600381111561207757fe5b8160a00151600381111561208757fe5b141580156120a5575060038160a0015160038111156120a257fe5b14155b6120ae57600080fd5b606083018051600019019052600080805b855151811015612121576000866000015182815181106120db57fe5b60200260200101519050828160800151118015612108575060028160a00151600381111561210557fe5b14155b1561211857806080015192508193505b506001016120bf565b508184141561213a575050600260a0919091015261217b565b60008560000151838151811061214c57fe5b602090810291909101015160808581018051918301805190915252600160a09182015260029401939093525050505b5050565b81511580159061219257508151613fff10155b61219b57600080fd5b816020015160001080156121b85750602082015164ffffffffff10155b6121c157600080fd5b816040015160001080156121da57506040820151600810155b6121e357600080fd5b60608201516001600160571b03191380159061220a575060608201516001600160571b0312155b61221357600080fd5b8151815460208401516040850151606090950151600a0b6affffffffffffffffffffff16600160401b0272ffffffffffffffffffffff00000000000000001960ff909616600160381b0267ff000000000000001964ffffffffff909316620100000266ffffffffff00001961ffff90961661ffff19909516949094179490941692909217169190911792909216919091179055565b6000806000806122b788613ee1565b90508415806122c557508085115b156122ce578094505b86806122de575060008860600151125b965061ffff8616156122ef57600080fd5b50509451939560109390931c60f09490941b9390931793509150565b600080610789600d613f48565b6000806107896002613f48565b600080612330613f61565b6000938452602052505060409020546001600160a01b031690565b60008060008060008061235c612318565b6001600160a01b039097166000908152602097909752505060409094205461ffff81169563ffffffff62010000830481169650600160301b830416945060ff600160501b8304169350600160581b90910460d81b9150565b6000806000806123c2613f6e565b6001600160a01b0395909516600090815260209590955250506040909220546bffffffffffffffffffffffff811693600160601b82046001600160801b03169350600160e01b90910463ffffffff169150565b61241d614e4e565b612425614e4e565b60ff84166124345790506108e8565b61243e8585613f7b565b815260ff841660608201528267ffffffffffffffff8111801561246057600080fd5b5060405190808252806020026020018201604052801561249a57816020015b612487614e76565b81526020019060019003908161247f5790505b506020820152949350505050565b60008060008060006124b86128e7565b6001600160a01b0388166000908152602082815260408083208a8452909152902080546001600160501b0381169650600160501b810463ffffffff1695509192509061251390600160701b900466ffffffffffffff16613fa4565b9054600160a81b9004600a90810b900b989497509295509193505050565b612539614eb6565b600080600061254785613fb2565b604080516060810182526001600160a01b039093168352602083019390935260ff16600a0a918101919091529350505050919050565b612585614e22565b60006125948461ffff16614075565b6040805160808101825261ffff96909616865260ff821660208701528501939093525050606082015290565b600080610789600b613f48565b6000816125d957600080fd5b600160801b82106125ec57608091821c91015b600160401b82106125ff57604091821c91015b640100000000821061261357602091821c91015b62010000821061262557601091821c91015b610100821061263657600891821c91015b6010821061264657600491821c91015b6004821061265657600291821c91015b6002821061072757600101919050565b600080610789600c613f48565b600080600085116126965760405162461bcd60e51b81526004016100bd90615044565b60078511156126b75760405162461bcd60e51b81526004016100bd90615151565b60006126c284610709565b905060015b86811161271a5760006126e36126dc836109fc565b849061072c565b9050868114156126fb57509250600091506127339050565b8681111561271157509250600191506127339050565b506001016126c7565b5060405162461bcd60e51b81526004016100bd90615233565b935093915050565b6060015161012c60089190911c60ff160290565b60008061275a613be2565b905060006276a70061276b85610709565b6000898152602085815260408083208b84528252808320949093018083529390522080549192509063ffffffff600160a01b8204811691600160c01b8104821691600160e01b90910416816127d25760405162461bcd60e51b81526004016100bd90614faf565b6127df8184848c8c614092565b9b9a5050505050505050505050565b80516000906001600160a01b031661280857506000610727565b600082600001516001600160a01b031663dd30a6666040518163ffffffff1660e01b815260040160206040518083038186803b15801561284757600080fd5b505afa15801561285b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107869190614f0c565b600080612897611abc6301da9c00610d068688611c2a565b90506128a981621dcd6560491b611d36565b90506128bc6128b782614125565b611d89565b90506128ce81621dcd6560491b611e11565b905060006128db82611e47565b60070b95945050505050565b6000806107896006613f48565b60008065ffffffffffff83111561291457602f612910846125cd565b0390505b82811c60081b179050919050565b606061292c614eb6565b60006129388585614147565b9050612942614db2565b8151612952575091506107899050565b6000805b875151811015612afa5760008860000151828151811061297257fe5b60200260200101519050600061298782613ee1565b905088811115612998575050612af2565b81600001518685815181106129a957fe5b602002602001015160000151146129de5760018401935081600001518685815181106129d157fe5b6020908102919091010151525b6129f1826000015183602001518b61426c565b96506000600160ff1683604001511415612a26576060830151612a1590899061152b565b9050612a218b8561202f565b612aa8565b612a338360400151612f42565b15612aa857612a4c8684600001518560200151856143cf565b6000612a658460600151886143e390919063ffffffff16565b602086015191935091508b1015612a8657612a818c868361448b565b612aa6565b612a9a612a938a8361152b565b8390612b06565b9150612aa68c8661202f565b505b612ad281888781518110612ab857fe5b602002602001015160200151612b0690919063ffffffff16565b878681518110612ade57fe5b602002602001015160200181815250505050505b600101612956565b50919695505050505050565b8181018281121560008312151461078957600080fd5b6000806000612b2b87876111ae565b9050612b3684611672565b915084821015612b4557600080fd5b6000612b518684613d4c565b50905080612b60575050612c38565b6000612b6b836111e3565b90505b8015801590612b7d5750818111155b15612bc7576000612b8e8883611208565b9050612ba6612b9f8b8b848b614541565b8790612b06565b9550612bb484836000611360565b9350612bbf846111e3565b915050612b6e565b60005b8115612c28576000612bdc8984611208565b9050600080612beb8884613d4c565b9150915080612bf957600080fd5b612c0584836001611360565b9350612c1387866000611360565b9650612c1e876111e3565b9450505050612bca565b612c338a8a83613e87565b505050505b94509492505050565b612c4e87878786856145dc565b612c678760e001518860a001518960c001518588614092565b60c090970196909652505050505050565b6000806107896004613f48565b6060806000808567ffffffffffffffff81118015612ca257600080fd5b50604051908082528060200260200182016040528015612ccc578160200160208202803683370190505b50905060008667ffffffffffffffff81118015612ce857600080fd5b50604051908082528060200260200182016040528015612d12578160200160208202803683370190505b50905060005b87811015612e16578884600e8110612d2c57fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16838281518110612d5a57fe5b60209081029190910101526001909301928884600e8110612d7757fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16828281518110612da557fe5b60209081029190910101526001909301928615612e0e576000838281518110612dca57fe5b6020026020010151138015612df257506000828281518110612de857fe5b6020026020010151135b612e0e5760405162461bcd60e51b81526004016100bd90615206565b600101612d18565b509097909650945050505050565b6000806107896005613f48565b6000805b8651811015612f35576000878281518110612e4c57fe5b60200260200101519050848160400151141580612e6a575080518714155b80612e79575085816020015114155b15612e845750612f2d565b60028160a001516003811115612e9657fe5b14158015612eb4575060038160a001516003811115612eb157fe5b14155b612ebd57600080fd5b6060810151600090612ecf9086612b06565b9050612eda86612f42565b15612eed576000811215612eed57600080fd5b6001600160571b03198112801590612f0c57506001600160571b038113155b612f1557600080fd5b6060820152600160a090910181905291506109b79050565b600101612e35565b5060009695505050505050565b6000600282108015906107895750506008101590565b606060008251600014612f6f578251600202612f72565b60015b905060008167ffffffffffffffff81118015612f8d57600080fd5b50604051908082528060200260200182016040528015612fc757816020015b612fb4614e76565b815260200190600190039081612fac5790505b50905060005b845181101561300957848181518110612fe257fe5b6020026020010151828281518110612ff657fe5b6020908102919091010152600101612fcd565b509392505050565b6000677fffffffffffffff821115611d2f57600080fd5b6000808061303688856108ef565b9050600061304e6130478a8a612b06565b8390614697565b9050633938700081131561306a576000809350935050506130d4565b600080613076836146b0565b915091508061308f5760008095509550505050506130d4565b60006130a58961309f858d614697565b90612b06565b9050633b9aca008112156130c4576000809650965050505050506130d4565b9550600194506130d49350505050565b9550959350505050565b60008082600f0b136130ef57600080fd5b60806130fa83614752565b600f0b6fb17217f7d1cf79abc9e3b39803f2f6af02901c9050919050565b60008082600f0b121561312a57600080fd5b50600f0b60401d90565b6000600160461b82600f0b1261314957600080fd5b683fffffffffffffffff1982600f0b121561316657506000610727565b6001607f1b60006001603f1b8416600f0b13156131945770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b13156131c1577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b13156131ee577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b131561321b5770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b1315613248577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b131561327557700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b13156132a25770010163da9fb33356d84a66ae336dcdfa3f0260801c5b600083600160381b16600f0b13156132cb57700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b13156132f75770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b1315613323577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b131561334f57700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b131561337b577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b13156133a757700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b13156133d35770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b13156133ff577001000162e525ee054754457d59952920260260801c5b600083600160301b16600f0b13156134285770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b1315613453577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b131561347e57700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b13156134a95770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b13156134d457700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b13156134ff5770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b131561352a577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b131561355557700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b1315613580577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b13156135aa57700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b13156135d45770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b13156135fe577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b13156136285770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315613652577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b131561367c57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b13156136a65770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b13156136d057700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b13156136f95770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315613722577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b131561374b57700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b1315613774577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b131561379d57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b13156137c65770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b13156137ef577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b13156138185770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b1315613840577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b131561386857700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b13156138905770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b13156138b857700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b13156138e05770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315613908577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b131561393057700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b1315613958577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b131561397f57700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b13156139a65770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b13156139cd577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b13156139f45770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315613a1b577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b1315613a4257700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b1315613a695770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b1315613a9057700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b1315613ab65770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b1315613adc577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b1315613b0257700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b1315613b28577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b1315613b4e57700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b1315613b745770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315613b9a577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b1315613bc05770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c60016001607f1b0381111561078957600080fd5b600080610789600a613f48565b60008512158015613c0757506001600160501b038513155b613c1057600080fd5b60008412158015613c2857506001600160501b038413155b613c3157600080fd5b826000108015613c45575063ffffffff8311155b613c4e57600080fd5b816000108015613c62575063ffffffff8211155b613c6b57600080fd5b63ffffffff811115613c7c57600080fd5b855469ffffffffffffffffffff19166001600160501b039586161769ffffffffffffffffffff60501b1916600160501b94909516939093029390931763ffffffff60a01b1916600160a01b63ffffffff928316021763ffffffff60c01b1916600160c01b93821693909302929092176001600160e01b0316600160e01b9190921602179055565b60008112158015613d1b57506001600160501b038113155b613d2457600080fd5b600191909101805469ffffffffffffffffffff19166001600160501b03909216919091179055565b6000806000613d5a85611672565b905062015180840615613d74576000809250925050613e50565b838110613d88576000809250925050613e50565b6201518081850304605a8111613da557925060019150613e509050565b6101688111613de4576000620151806207e900840604820160591901905060068104605a0160068281613dd457fe5b0660001494509450505050613e50565b6108708111613e145760006201518062278d00840604820161016719019050601e8104608701601e8281613dd457fe5b611de28111613e44576000620151806276a700840604820161086f19019050605a810460c301605a8281613dd457fe5b61010060009350935050505b9250929050565b600060018210158015613e6c57506101008211155b613e7557600080fd5b50600019011b600160ff1b9081161490565b6014613e928261482d565b1115613eb05760405162461bcd60e51b81526004016100bd906150f1565b6000613eba6125c0565b6001600160a01b039094166000908152602094855260408082209482529390945250912055565b6000808260400151118015613efb57506040820151600810155b613f0457600080fd5b6040820151600210613f1b57506020810151610727565b6000613f2d60018460400151036109fc565b60208401519091506108e8906276a700906103909084610b05565b6000620f4240826010811115613f5a57fe5b0192915050565b6000806107896003613f48565b600080610789600e613f48565b60606000613f8984846148fd565b90506001815111613f9b579050610789565b61078681614a1f565b600881901c60ff9091161b90565b6000806000806000613fc386614bd8565b909250905060006001600160a01b038316613fe85750600090506402540be40061406a565b826001600160a01b0316631ee108336040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561402357600080fd5b505af1158015614037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061405b9190614f0c565b90506000811361406a57600080fd5b969195509350915050565b600080614080614c0f565b60009384526020525050604090205490565b60008083116140a057600080fd5b818611156140af5750836109b7565b60006140bb8388610b05565b9050838111156140ce57859150506109b7565b60006140e285610d0684633b9aca00611c2a565b905060006140f4633b9aca0083610b05565b90506000614117633b9aca00610d0661410d8b86611c2a565b6103908d88611c2a565b9a9950505050505050505050565b6000600f82900b60016001607f1b0319141561414057600080fd5b5060000390565b8151516060906000908190614191576040805160008082526020820190925290614187565b614174614ee0565b81526020019060019003908161416c5790505b5092505050610789565b8451515b600019810190156141ec576000866000015182815181106141b257fe5b60200260200101519050856141c682613ee1565b11156141d257506141e7565b805183146141e557805160019094019392505b505b614195565b5060008267ffffffffffffffff8111801561420657600080fd5b5060405190808252806020026020018201604052801561424057816020015b61422d614ee0565b8152602001906001900390816142255790505b50905082156109b757818160008151811061425757fe5b60209081029190910101515295945050505050565b614274614eb6565b6000806142818686614c1c565b9150915081600014156143a457600061429987613fb2565b91945090925090506001600160a01b038116156143a25760006142ba614c65565b905085158015906142d0575064ffffffffff8611155b6142d957600080fd5b8360001280156142f057506001600160801b038413155b6142f957600080fd5b6000888152602082815260408083208a845290915290819020805464ffffffffff191664ffffffffff89161774ffffffffffffffffffffffffffffffff00000000001916650100000000006001600160801b038816021760ff60a81b1916600160a81b60ff871602178155905188908a907f0fdfa6885701e2f1f42e4187b9231cf81c1fe23671ef64fa46f34ddb56c1dc18906143979089906152c7565b60405180910390a350505b505b6040805160608101825260008152602081019390935260ff909116600a0a9082015290509392505050565b6143dd8484846001856145dc565b50505050565b600080826143f657506000905080613e50565b6000831361440357600080fd5b6144228460800151610ab58587606001516118e390919063ffffffff16565b91506144438460800151610ab58587604001516118e390919063ffffffff16565b608085015190915061445590846108ef565b6080850152604084015161446990826108ef565b6040850152606084015161447d90836108ef565b6060850152613e5084614c72565b60008360000151838151811061449d57fe5b6020026020010151905082600014614528576000846000015160018503815181106144c457fe5b60200260200101519050816000015181600001511480156144ec575081602001518160200151145b80156144fc575060408101516001145b156145265760608101516145109084612b06565b6060820152600160a0820152614526858561202f565b505b600160408201819052606082019290925260a001525050565b60008061454c612666565b6001600160a01b0387166000908152602082815260408083208984528252808320888452909152812054919250600f91820b90910b9061458d87878761426c565b9050614599818361152b565b6001600160a01b03989098166000908152602093845260408082209882529784528781209681529590925250505091902080546001600160801b03191690555090565b60006145e6613be2565b6000868152602082815260408083208884528252808320868452825291829020808a5290890187905280546001600160501b03808216938b0193909352600160501b810490921660608a015263ffffffff600160a01b8304811660a08b0152600160c01b8304811660c08b0152600160e01b90920490911660e08901529091508084156146855760018201546001600160501b0316608089015261468d565b600060808901525b5050505050505050565b60006107866146aa84633b9aca006118e3565b83611931565b600080633b9aca008314156146ca5750600090508061474d565b60006146e46146dd633b9aca0086611515565b8590614697565b905060006146f182611d03565b9050600081600f0b1361470c5760008093509350505061474d565b600061474061473b61472f614720856130de565b6814b927f32bffb83338614cca565b621dcd6560491b611e11565b611e47565b60070b9450600193505050505b915091565b60008082600f0b1361476357600080fd5b6000600f83900b600160401b811261477d576040918201911d5b6401000000008112614791576020918201911d5b6201000081126147a3576010918201911d5b61010081126147b4576008918201911d5b601081126147c4576004918201911d5b600481126147d4576002918201911d5b600281126147e3576001820191505b603f19820160401b600f85900b607f8490031b6001603f1b5b60008113156148225790800260ff81901c8281029390930192607f011c9060011d6147fc565b509095945050505050565b600181901c7f5555555555555555555555555555555555555555555555555555555555555555908116911601600281901c7f3333333333333333333333333333333333333333333333333333333333333333908116911601600481901c7f07070707070707070707070707070707070707070707070707070707070707079190911601600881901c7e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f908116911601601081901c01602081901c01604081901c01608081901c60ff90811691160190565b606060108260ff16111561491057600080fd5b600061491a61230b565b6001600160a01b038516600090815260208290526040812091925060ff851667ffffffffffffffff8111801561494f57600080fd5b5060405190808252806020026020018201604052801561498957816020015b614976614e76565b81526020019060019003908161496e5790505b50905060005b8560ff16811015614a155760008382601081106149a857fe5b01905060008383815181106149b957fe5b602090810291909101810151835461ffff8116825264ffffffffff620100008204169282019290925260ff600160381b8304166040820152600160401b909104600a90810b900b6060820152608001919091525060010161498f565b5095945050505050565b805160008167ffffffffffffffff81118015614a3a57600080fd5b50604051908082528060200260200182016040528015614a64578160200160208202803683370190505b50905060005b82811015614ac1576000848281518110614a8057fe5b60200260200101519050614aa1816000015182602001518360400151614cfd565b838381518110614aad57fe5b602090810291909101015250600101614a6a565b5060015b828110156143dd57805b600081118015614b075750828181518110614ae657fe5b6020026020010151836001830381518110614afd57fe5b6020026020010151115b15614bcf57828181518110614b1857fe5b6020026020010151836001830381518110614b2f57fe5b6020026020010151846001840381518110614b4657fe5b60200260200101858481518110614b5957fe5b6020026020010182815250828152505050848181518110614b7657fe5b6020026020010151856001830381518110614b8d57fe5b6020026020010151866001840381518110614ba457fe5b60200260200101878481518110614bb757fe5b60209081029190910101919091525260001901614acf565b50600101614ac5565b6000806000614be5614d58565b600094855260205250506040909120546001600160a01b03811692600160a01b90910460ff169150565b6000806107896009613f48565b6000806000614c29614c65565b6000958652602090815260408087209587529490525050509020546501000000000081046001600160801b031691600160a81b90910460ff1690565b6000806107896008613f48565b6000614c7d82614d65565b905060008160000160189054906101000a900463ffffffff169050614cbc82846040015185606001518660a001518563ffffffff168860e00151613bef565b610929828460800151613d03565b6000600f82810b9084900b0360016001607f1b03198112801590611d80575060016001607f1b0381131561078657600080fd5b6000613fff841115614d0e57600080fd5b64ffffffffff831115614d2057600080fd5b6008821115614d2e57600080fd5b5067ffff000000000000603084901b1665ffffffffff00600884901b161760ff8216179392505050565b600080610789600f613f48565b5190565b6040518060e00160405280614d7c614e22565b8152602001614d89614e4e565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b60405180610100016040528060008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6040805160808101825260008082526020820152908101614e41614eb6565b8152600060209091015290565b6040518060800160405280606081526020016060815260200160008152602001600081525090565b6040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160006003811115614eb157fe5b905290565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b803561ffff8116811461072757600080fd5b600060208284031215614f1d578081fd5b5051919050565b600060208284031215614f35578081fd5b61078682614efa565b60008060408385031215614f50578081fd5b614f5983614efa565b915060208301358015158114614f6d578182fd5b809150509250929050565b60208082526017908201527f496e76616c696420737765657020636173682074696d65000000000000000000604082015260600190565b60208082526016908201527513585c9ad95d081b9bdd081a5b9a5d1a585b1a5e995960521b604082015260600190565b6020808252601490820152734f7261636c652072617465206f766572666c6f7760601b604082015260600190565b60208082526017908201527f4d75737420696e697469616c697a65206d61726b657473000000000000000000604082015260600190565b60208082526015908201527410d1ce881b9bc81b585c9ad95d1cc81b1a5cdd1959605a1b604082015260600190565b6020808252600d908201526c092dcecc2d8d2c840d2dcc8caf609b1b604082015260600190565b60208082526013908201527224a69d1039b4bc1036b7b73a341032b93937b960691b604082015260600190565b60208082526010908201526f4e6f206e546f6b656e2061737365747360801b604082015260600190565b6020808252600f908201526e4f766572206d61782061737365747360881b604082015260600190565b60208082526017908201527f494d3a20696e746572706f6c6174696f6e206572726f72000000000000000000604082015260600190565b60208082526016908201527510d1ce881b585c9ad95d081a5b99195e08189bdd5b9960521b604082015260600190565b6020808252601590820152740929a7440d2dce6eaccccd2c6d2cadce840c6c2e6d605b1b604082015260600190565b60208082526012908201527112534e881b9bdd08199a5c9cdd081a5b9a5d60721b604082015260600190565b60208082526010908201526f494d3a20696e76616c69642074696d6560801b604082015260600190565b60208082526013908201527250543a20696e69742076616c7565207a65726f60681b604082015260600190565b60208082526013908201527210d1ce881b9bc81b585c9ad95d08199bdd5b99606a1b604082015260600190565b60208082526016908201527512534e881b9bc81b585c9ad95d1cc81d1bc81a5b9a5d60521b604082015260600190565b60208082526017908201527f494d3a20696d706c6965642072617465206661696c6564000000000000000000604082015260600190565b6001600160801b0391909116815260200190565b61ffff91909116815260200190565b61ffff92909216825260208201526040019056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220ffd87b76e073e2cb77cadf6a6ea7f2c83e9be7d79267e02d2dc3571b49595d9f64736f6c63430007060033", "bytecodeSha1": "dc60aa7bc3f356d96e182bed29cea43c1a943d3a", "coverageMap": {"statements": {"29": {"InitializeMarketsAction.sweepCashIntoMarkets": {"0": [20398, 20444], "1": [20454, 20528], "2": [20676, 20755], "3": [21036, 21100], "4": [21446, 21605], "5": [21719, 21775], "6": [21785, 21839]}, "InitializeMarketsAction.initializeMarkets": {"7": [22314, 22360], "8": [22571, 22642], "9": [22765, 22842], "10": [23444, 23568], "11": [25479, 25513], "12": [25531, 25835], "13": [25987, 26047], "14": [26539, 26581], "15": [27134, 27295], "16": [28248, 28780], "17": [29974, 30019], "18": [30041, 30135], "19": [30158, 30485], "20": [30508, 30556], "21": [30603, 30697], "22": [30952, 30976], "23": [30995, 31028], "24": [31143, 31182], "25": [31273, 31321], "26": [31335, 31380], "27": [23381, 23384], "28": [31638, 31778], "29": [31788, 31947], "30": [31958, 32001]}, "InitializeMarketsAction._getNTokenNegativefCashWithholding": {"37": [9753, 9802], "38": [9820, 9857], "39": [9875, 9883], "40": [10403, 10417], "41": [10464, 10509], "42": [10546, 10709], "43": [10796, 10845], "44": [10859, 10896], "45": [10917, 10994]}, "InitializeMarketsAction._calculateNetAssetCashAvailable": {"50": [11367, 11435], "51": [11466, 11507], "52": [11521, 11588], "53": [11602, 11777], "54": [11915, 11988], "55": [12043, 12084], "56": [12218, 12349], "57": [12360, 12388]}, "InitializeMarketsAction._getGovernanceParameters": {"58": [2420, 2568], "59": [2579, 2735]}, "InitializeMarketsAction._setLiquidityAmount": {"68": [18652, 18696], "69": [18706, 18750], "70": [18839, 19044], "71": [19120, 19192]}, "InitializeMarketsAction._calculatefCashAmountFromProportion": {"77": [19796, 19913]}, "InitializeMarketsAction._getSixMonthImpliedRate": {"78": [12900, 12959], "79": [12970, 13338]}, "InitializeMarketsAction._interpolateFutureRate": {"80": [17038, 17102], "81": [17320, 17562], "82": [18078, 18124]}, "InitializeMarketsAction._getProportionFromOracleRate": {"83": [14765, 14835], "84": [14874, 14912], "85": [15145, 15219], "86": [15230, 15268]}, "InitializeMarketsAction.finalizeMarket": {"87": [32323, 32387], "88": [32398, 32605]}, "InitializeMarketsAction._settleNTokenPortfolio": {"154": [3714, 3785], "155": [4051, 4125], "156": [4429, 4490], "157": [4584, 4626], "158": [4636, 4686]}, "InitializeMarketsAction._getPreviousMarkets": {"159": [5919, 6334], "160": [5900, 5903]}, "InitializeMarketsAction._withholdAndSetfCashAssets": {"161": [7318, 7372], "162": [7387, 7608], "163": [7687, 7723], "164": [7035, 7038], "165": [7834, 7911]}}, "71": {"ABDKMath64x64.fromInt": {"199": [1303, 1364], "200": [1370, 1393]}, "ABDKMath64x64.div": {"201": [6742, 6758], "202": [6808, 6860]}, "ABDKMath64x64.exp": {"203": [21400, 21434], "204": [21484, 21492], "205": [21512, 21600]}, "ABDKMath64x64.add": {"206": [3470, 3522]}, "ABDKMath64x64.mul": {"207": [4298, 4350]}, "ABDKMath64x64.toInt": {"208": [1672, 1694]}, "ABDKMath64x64.fromUInt": {"347": [1995, 2028]}, "ABDKMath64x64.ln": {"352": [14343, 14358], "353": [14365, 14453]}, "ABDKMath64x64.toUInt": {"354": [2364, 2380], "355": [2386, 2409]}, "ABDKMath64x64.exp_2": {"356": [14699, 14733], "357": [14783, 14791], "358": [14907, 14967], "359": [15011, 15071], "360": [15115, 15175], "361": [15219, 15279], "362": [15322, 15382], "363": [15425, 15485], "364": [15528, 15588], "365": [15631, 15691], "366": [15733, 15793], "367": [15835, 15895], "368": [15937, 15997], "369": [16039, 16099], "370": [16140, 16200], "371": [16241, 16301], "372": [16342, 16402], "373": [16443, 16503], "374": [16543, 16603], "375": [16643, 16703], "376": [16743, 16803], "377": [16843, 16903], "378": [16942, 17002], "379": [17041, 17101], "380": [17140, 17200], "381": [17239, 17299], "382": [17337, 17397], "383": [17435, 17495], "384": [17533, 17593], "385": [17631, 17691], "386": [17728, 17788], "387": [17825, 17885], "388": [17922, 17982], "389": [18019, 18079], "390": [18115, 18175], "391": [18211, 18271], "392": [18307, 18367], "393": [18403, 18463], "394": [18498, 18558], "395": [18593, 18653], "396": [18688, 18748], "397": [18783, 18843], "398": [18877, 18937], "399": [18971, 19031], "400": [19065, 19125], "401": [19159, 19219], "402": [19252, 19312], "403": [19345, 19405], "404": [19438, 19498], "405": [19531, 19591], "406": [19623, 19683], "407": [19715, 19775], "408": [19807, 19867], "409": [19899, 19959], "410": [19990, 20050], "411": [20081, 20141], "412": [20172, 20232], "413": [20263, 20323], "414": [20353, 20413], "415": [20443, 20503], "416": [20533, 20593], "417": [20623, 20683], "418": [20712, 20772], "419": [20801, 20861], "420": [20890, 20950], "421": [20979, 21039], "422": [21046, 21081], "423": [21087, 21126]}, "ABDKMath64x64.neg": {"462": [8658, 8682], "463": [8688, 8697]}, "ABDKMath64x64.log_2": {"508": [13399, 13414], "509": [13493, 13502], "510": [13504, 13513], "511": [13546, 13555], "512": [13557, 13566], "513": [13595, 13604], "514": [13606, 13615], "515": [13642, 13650], "516": [13652, 13660], "517": [13686, 13694], "518": [13696, 13704], "519": [13729, 13737], "520": [13739, 13747], "521": [13770, 13778], "522": [13972, 13980], "523": [14039, 14065], "524": [14017, 14031], "525": [13953, 13962], "526": [14078, 14100]}, "ABDKMath64x64.sub": {"555": [3874, 3926]}}, "50": {}, "51": {}, "68": {"AssetHandler.getPresentfCashValue": {"141": [2765, 2773], "142": [3064, 3115], "143": [3175, 3225]}, "AssetHandler.getDiscountFactor": {"293": [2160, 2230], "294": [2240, 2297], "295": [2307, 2377]}, "AssetHandler.isLiquidityToken": {"343": [665, 796]}, "AssetHandler.getSettlementDate": {"447": [1070, 1156], "448": [1331, 1352], "449": [1655, 1717]}}, "58": {"AssetRate.buildAssetRateStateful": {"265": [6155, 6404]}, "AssetRate.getSupplyRate": {"292": [2506, 2514]}, "AssetRate._getAssetRateStateful": {"454": [4984, 5011], "455": [5042, 5085], "456": [5099, 5116], "457": [5167, 5217]}, "AssetRate.buildSettlementRateStateful": {"470": [8676, 8827], "471": [9316, 9372], "472": [9433, 9499], "473": [9640, 9681], "474": [9699, 9751], "475": [9769, 9830], "476": [9848, 9917], "477": [9952, 10157]}, "AssetRate._getAssetRateStorage": {"549": [3145, 3189], "550": [3199, 3251]}, "AssetRate._getSettlementRateStorage": {"551": [6887, 6930], "552": [6940, 7001]}}, "119": {}, "52": {"BalanceHandler.setBalanceStorageForNToken": {"48": [16376, 16401], "49": [16447, 16514]}, "BalanceHandler._setBalanceStorage": {"145": [17491, 17564], "146": [17695, 17759], "147": [17808, 17850], "148": [17894, 17946], "149": [17956, 18008], "150": [18018, 18065], "151": [18342, 18442]}, "BalanceHandler.getBalanceStorage": {"261": [19014, 19058], "262": [19068, 19112], "263": [19122, 19226], "264": [19236, 19276]}}, "72": {"Bitmap.getNextBitNum": {"114": [3378, 3386], "115": [3397, 3437]}, "Bitmap.setBit": {"131": [447, 482], "132": [547, 593], "133": [624, 671]}, "Bitmap.getMSB": {"267": [2272, 2287], "268": [2384, 2393], "269": [2407, 2417], "270": [2481, 2489], "271": [2503, 2512], "272": [2568, 2576], "273": [2590, 2599], "274": [2651, 2659], "275": [2673, 2682], "276": [2732, 2739], "277": [2753, 2761], "278": [2810, 2817], "279": [2831, 2839], "280": [2887, 2894], "281": [2908, 2916], "282": [2950, 2958]}, "Bitmap.isBitSet": {"443": [820, 855], "444": [894, 959]}, "Bitmap.totalBitsSet": {"527": [1130, 1286], "528": [1296, 1452], "529": [1462, 1549], "530": [1559, 1715], "531": [1725, 1742], "532": [1752, 1769], "533": [1779, 1797], "534": [1807, 1844]}}, "63": {"BitmapAssetsHandler.getAssetsBitmap": {"113": [882, 915]}, "BitmapAssetsHandler.getifCashNotional": {"134": [1629, 1681]}, "BitmapAssetsHandler.addifCashAsset": {"212": [3613, 3629], "213": [3871, 3950], "214": [3997, 4039], "215": [4161, 4210], "216": [4239, 4289], "217": [4303, 4323], "218": [4475, 4544], "219": [4591, 4628], "220": [4643, 4691], "221": [4705, 4755], "222": [4776, 4791]}, "BitmapAssetsHandler.setAssetsBitmap": {"445": [1061, 1147], "446": [1266, 1307]}}, "116": {}, "117": {}, "118": {}, "59": {"CashGroup.getRateScalar": {"74": [2832, 2900], "75": [3350, 3373], "76": [3413, 3430]}, "CashGroup.buildCashGroupStateful": {"112": [17869, 17914]}, "CashGroup.calculateOracleRate": {"135": [9957, 10039], "136": [10658, 10683], "137": [10701, 10748], "138": [10846, 10922], "139": [10941, 11131], "140": [11160, 11248]}, "CashGroup.interpolateOracleRate": {"190": [8128, 8166], "191": [8231, 8268], "192": [8540, 8784], "193": [9127, 9463]}, "CashGroup._buildCashGroup": {"266": [16991, 17199]}, "CashGroup.getRateOracleTimeWindow": {"289": [5713, 5811]}, "CashGroup._getCashGroupStorageBytes": {"458": [11458, 11482]}}, "47": {}, "60": {"DateTime.getReferenceTime": {"33": [417, 456], "34": [466, 516]}, "DateTime.getTradedMarket": {"60": [1026, 1050], "61": [1076, 1104], "62": [1130, 1151], "63": [1177, 1202], "64": [1228, 1253], "65": [1279, 1305], "66": [1331, 1357], "67": [1368, 1391]}, "DateTime.getMaturityFromBitNum": {"116": [7014, 7034], "117": [7097, 7119], "118": [7321, 7366], "119": [7675, 7746], "120": [7439, 7661], "121": [7987, 8060], "122": [7821, 7973], "123": [8260, 8337], "124": [8091, 8246]}, "DateTime.isValidMarketMaturity": {"125": [1657, 1709], "126": [1719, 1805], "127": [1855, 1867], "128": [2054, 2065], "129": [1980, 1983], "130": [2086, 2098]}, "DateTime.getTimeUTC0": {"152": [660, 690], "153": [700, 736]}, "DateTime.getMarketIndex": {"283": [3147, 3199], "284": [3209, 3295], "285": [3594, 3611], "286": [3736, 3752], "287": [3408, 3411], "288": [3773, 3802]}, "DateTime.getBitNumFromMaturity": {"436": [4314, 4331], "437": [4414, 4431], "438": [4734, 4759], "439": [5306, 5641], "440": [5922, 6091], "441": [6377, 6552], "442": [6698, 6717]}}, "73": {"FloatingPoint56.packTo56Bits": {"296": [1023, 1061], "297": [1122, 1167]}, "FloatingPoint56.unpackFrom56Bits": {"453": [1385, 1418]}}, "111": {}, "14": {}, "53": {}, "48": {"LibStorage._getStorageSlot": {"450": [7429, 7474]}}, "61": {"Market.getExchangeRateFromImpliedRate": {"186": [18502, 18545]}, "Market.getImpliedRate": {"187": [16789, 16797], "188": [17770, 17778], "189": [17789, 17807]}, "Market.setMarketStorageForInitialize": {"209": [28364, 28589], "210": [28600, 28656]}, "Market.getOracleRate": {"290": [25391, 25440], "291": [25451, 25662]}, "Market.loadMarketWithSettlementDate": {"325": [31309, 31389], "326": [31400, 31609]}, "Market._getExchangeRate": {"348": [20127, 20144], "349": [20243, 20260], "350": [20512, 20529], "351": [20560, 20579]}, "Market._setMarketStorage": {"424": [29237, 29295], "425": [29341, 29407], "426": [29457, 29524], "427": [29575, 29632], "428": [29678, 29750], "429": [29806, 29851], "430": [29861, 29914], "431": [29924, 29979], "432": [29989, 30034], "433": [30044, 30103]}, "Market._setTotalLiquidity": {"434": [28798, 28864], "435": [28921, 28974]}, "Market._updateRateOracle": {"459": [23292, 23325], "460": [23503, 23525], "461": [23719, 23741]}, "Market.loadSettlementMarket": {"478": [31808, 31878]}, "Market.removeLiquidity": {"479": [2222, 2235], "480": [2245, 2272], "481": [2317, 2397], "482": [2407, 2479], "483": [2490, 2560], "484": [2570, 2623], "485": [2633, 2698], "486": [2709, 2746]}, "Market._loadMarketStorage": {"495": [26478, 26503], "496": [26513, 26539], "497": [26549, 26593], "498": [26603, 26655], "499": [26665, 26719], "500": [26729, 26773], "501": [26783, 26841], "502": [26886, 26938], "503": [26969, 26994]}, "Market._logProportion": {"505": [21047, 21064], "506": [21681, 21698], "507": [22064, 22085]}, "Market._setMarketStorageForLiquidity": {"553": [27563, 27787], "554": [27798, 27854]}}, "64": {"PortfolioHandler.storeAssets": {"89": [7449, 7512], "90": [7676, 7706], "91": [7217, 7220], "92": [8573, 8605], "93": [8782, 9017], "94": [7885, 7888], "95": [9552, 9560], "96": [9574, 9733], "97": [9785, 10000], "98": [10015, 10067], "99": [10081, 10104], "100": [9437, 9440], "101": [10265, 10336], "102": [10386, 10538]}, "PortfolioHandler.addAsset": {"173": [3389, 3396], "174": [3685, 3692], "175": [3922, 3944], "176": [4023, 4090], "177": [4287, 4360], "178": [4742, 4774], "179": [4784, 4812], "180": [4822, 4852], "181": [4862, 4890], "182": [4900, 4950], "183": [4960, 4997]}, "PortfolioHandler.deleteAsset": {"223": [12749, 12800], "224": [12839, 12884], "225": [13013, 13176], "226": [13215, 13252], "227": [13737, 13766], "228": [13784, 13806], "229": [13549, 13552], "230": [13993, 14046], "231": [14060, 14067], "232": [14383, 14558], "233": [14568, 14619], "234": [14629, 14682]}, "PortfolioHandler._storeAsset": {"235": [11689, 11766], "236": [11818, 11883], "237": [11932, 12018], "238": [12062, 12141], "239": [12191, 12241], "240": [12251, 12297], "241": [12307, 12354], "242": [12364, 12409]}, "PortfolioHandler._updatePortfolioContext": {"243": [11121, 11152], "244": [11172, 11211], "245": [11222, 11278], "246": [11333, 11431], "247": [11442, 11501]}, "PortfolioHandler.buildPortfolioState": {"257": [15643, 15655], "258": [15666, 15732], "259": [15742, 15784], "260": [15794, 15847]}, "PortfolioHandler._mergeAssetIntoArray": {"334": [1631, 1639], "335": [1790, 1949], "336": [2195, 2220], "337": [2308, 2381], "338": [2440, 2468], "339": [2482, 2527], "340": [2542, 2553], "341": [1395, 1398], "342": [2574, 2586]}, "PortfolioHandler._extendNewAssetArray": {"344": [5714, 5745], "345": [5695, 5698], "346": [5766, 5786]}, "PortfolioHandler.getSortedPortfolio": {"451": [15064, 15077], "452": [15088, 15108]}, "PortfolioHandler._loadAssetArray": {"535": [16909, 16948], "536": [17546, 17588], "537": [17602, 17640], "538": [17654, 17694], "539": [17708, 17746], "540": [17760, 17784], "541": [17294, 17297], "542": [17805, 17818]}, "PortfolioHandler._sortInPlace": {"543": [16212, 16300], "544": [16082, 16085], "545": [16527, 16570], "546": [16588, 16643], "547": [16661, 16664], "548": [16692, 16695]}}, "74": {"SafeInt256.subNoNeg": {"46": [1854, 1867], "47": [1877, 1892]}, "SafeInt256.sub": {"144": [1377, 1414]}, "SafeInt256.mul": {"168": [474, 483], "169": [506, 536], "170": [551, 581]}, "SafeInt256.div": {"171": [1098, 1137], "172": [1245, 1254]}, "SafeInt256.toInt": {"184": [2587, 2627], "185": [2660, 2676]}, "SafeInt256.mulInRatePrecision": {"198": [2337, 2384]}, "SafeInt256.neg": {"211": [1619, 1636]}, "SafeInt256.add": {"313": [1503, 1540]}, "SafeInt256.divInRatePrecision": {"504": [2116, 2163]}}, "6": {"SafeMath.add": {"35": [2786, 2832], "36": [2842, 2850]}, "SafeMath.sub": {"72": [3205, 3254], "73": [3264, 3276]}, "SafeMath.mul": {"194": [3619, 3627], "195": [3664, 3720]}, "SafeMath.div": {"196": [4286, 4330], "197": [4340, 4352]}}, "66": {"SettleBitmapAssets.settleBitmappedCashGroup": {"314": [1906, 1953], "315": [2035, 2074], "316": [2437, 2475], "317": [2756, 2882], "318": [2952, 2993], "319": [3007, 3042], "320": [3323, 3339], "321": [3382, 3427], "322": [3498, 3539], "323": [3553, 3588], "324": [3609, 3676]}, "SettleBitmapAssets._settlefCashAsset": {"493": [4477, 4525], "494": [4536, 4579]}}, "67": {"SettlePortfolioAssets.settlePortfolio": {"298": [2530, 2550], "299": [2889, 2897], "300": [3116, 3138], "301": [3156, 3218], "302": [3247, 3408], "303": [3522, 3586], "304": [3604, 3633], "305": [3724, 3805], "306": [3853, 3912], "307": [4121, 4175], "308": [4298, 4368], "309": [4390, 4419], "310": [4465, 4609], "311": [2652, 2655], "312": [4630, 4650]}, "SettlePortfolioAssets._getSettleAmountArray": {"464": [953, 981], "465": [1490, 1498], "466": [1719, 1752], "467": [1770, 1789], "468": [2030, 2074], "469": [2084, 2104]}, "SettlePortfolioAssets._settleLiquidityTokenTofCash": {"487": [5772, 5824], "488": [5842, 5892], "489": [5910, 5943], "490": [6060, 6113], "491": [6123, 6154], "492": [6164, 6218]}}, "54": {}, "65": {"TransferAssets.encodeAssetId": {"556": [1016, 1063], "557": [1073, 1110], "558": [1120, 1177], "559": [1188, 1411]}}, "62": {"nTokenHandler.loadNTokenPortfolioStateful": {"31": [15200, 15250], "32": [15260, 15323]}, "nTokenHandler.setArrayLengthAndInitializedTime": {"103": [8479, 8563], "104": [8764, 8821], "105": [8831, 8869]}, "nTokenHandler.loadNTokenPortfolioNoCashGroup": {"106": [13943, 13990], "107": [14471, 14519], "108": [14529, 14569], "109": [14579, 14609], "110": [14620, 14768], "111": [14806, 15025]}, "nTokenHandler.getDepositParameters": {"166": [9377, 9471]}, "nTokenHandler.getInitializationParameters": {"167": [12627, 12718]}, "nTokenHandler.nTokenAddress": {"248": [1840, 1864]}, "nTokenHandler.getNTokenContext": {"249": [1304, 1335], "250": [1345, 1410], "251": [1420, 1469], "252": [1479, 1522], "253": [1532, 1569]}, "nTokenHandler.getStoredNTokenSupplyFactors": {"254": [4790, 4829], "255": [5033, 5088], "256": [5098, 5155]}, "nTokenHandler._getParameters": {"327": [13145, 13168], "328": [13182, 13189], "329": [13203, 13226], "330": [13240, 13247], "331": [13293, 13355], "332": [13126, 13129], "333": [13390, 13413]}}, "34": {}}, "branches": {"29": {"InitializeMarketsAction.sweepCashIntoMarkets": {"560": [20684, 20727, true], "561": [21044, 21072, true]}, "InitializeMarketsAction.initializeMarkets": {"562": [22738, 22749, false], "563": [22773, 22819, true], "564": [24619, 24630, true], "565": [24741, 24747, false], "566": [24751, 24778, true], "567": [25065, 25071, false], "568": [25075, 25109, false], "569": [26330, 26336, false], "570": [26610, 26616, false], "571": [29905, 29950, false], "572": [30516, 30531, true], "573": [30926, 30950, false]}, "InitializeMarketsAction._getNTokenNegativefCashWithholding": {"574": [8907, 8934, true], "575": [9449, 9476, false], "576": [9496, 9658, false], "577": [10207, 10219, false], "578": [10350, 10379, false]}, "InitializeMarketsAction._calculateNetAssetCashAvailable": {"579": [11340, 11351, false], "580": [12239, 12302, true]}, "InitializeMarketsAction._getSixMonthImpliedRate": {"581": [12908, 12935, true]}, "InitializeMarketsAction._interpolateFutureRate": {"582": [17046, 17074, true], "583": [17283, 17304, false], "584": [18085, 18101, true]}, "InitializeMarketsAction._settleNTokenPortfolio": {"585": [3722, 3764, true], "586": [4592, 4625, true]}, "InitializeMarketsAction._withholdAndSetfCashAssets": {"587": [7326, 7371, true]}}, "71": {"ABDKMath64x64.fromInt": {"588": [1312, 1336, false], "589": [1340, 1363, true]}, "ABDKMath64x64.div": {"590": [6751, 6757, true], "591": [6817, 6836, false], "592": [6840, 6859, true]}, "ABDKMath64x64.exp": {"593": [21409, 21433, true], "594": [21457, 21482, false]}, "ABDKMath64x64.add": {"595": [3479, 3498, false], "596": [3502, 3521, true]}, "ABDKMath64x64.mul": {"597": [4307, 4326, false], "598": [4330, 4349, true]}, "ABDKMath64x64.fromUInt": {"599": [2004, 2027, true]}, "ABDKMath64x64.ln": {"600": [14352, 14357, true]}, "ABDKMath64x64.toUInt": {"601": [2373, 2379, true]}, "ABDKMath64x64.exp_2": {"602": [14708, 14732, true], "603": [14756, 14781, false], "604": [14873, 14899, false], "605": [14977, 15003, false], "606": [15081, 15107, false], "607": [15185, 15211, false], "608": [15289, 15314, false], "609": [15392, 15417, false], "610": [15495, 15520, false], "611": [15598, 15623, false], "612": [15701, 15725, false], "613": [15803, 15827, false], "614": [15905, 15929, false], "615": [16007, 16031, false], "616": [16109, 16132, false], "617": [16210, 16233, false], "618": [16311, 16334, false], "619": [16412, 16435, false], "620": [16513, 16535, false], "621": [16613, 16635, false], "622": [16713, 16735, false], "623": [16813, 16835, false], "624": [16913, 16934, false], "625": [17012, 17033, false], "626": [17111, 17132, false], "627": [17210, 17231, false], "628": [17309, 17329, false], "629": [17407, 17427, false], "630": [17505, 17525, false], "631": [17603, 17623, false], "632": [17701, 17720, false], "633": [17798, 17817, false], "634": [17895, 17914, false], "635": [17992, 18011, false], "636": [18089, 18107, false], "637": [18185, 18203, false], "638": [18281, 18299, false], "639": [18377, 18395, false], "640": [18473, 18490, false], "641": [18568, 18585, false], "642": [18663, 18680, false], "643": [18758, 18775, false], "644": [18853, 18869, false], "645": [18947, 18963, false], "646": [19041, 19057, false], "647": [19135, 19151, false], "648": [19229, 19244, false], "649": [19322, 19337, false], "650": [19415, 19430, false], "651": [19508, 19523, false], "652": [19601, 19615, false], "653": [19693, 19707, false], "654": [19785, 19799, false], "655": [19877, 19891, false], "656": [19969, 19982, false], "657": [20060, 20073, false], "658": [20151, 20164, false], "659": [20242, 20255, false], "660": [20333, 20345, false], "661": [20423, 20435, false], "662": [20513, 20525, false], "663": [20603, 20615, false], "664": [20693, 20704, false], "665": [20782, 20793, false], "666": [20871, 20882, false], "667": [20960, 20971, false], "668": [21096, 21125, true]}, "ABDKMath64x64.neg": {"669": [8667, 8681, true]}, "ABDKMath64x64.log_2": {"670": [13408, 13413, true], "671": [13464, 13489, false], "672": [13525, 13542, false], "673": [13578, 13591, false], "674": [13627, 13638, false], "675": [13672, 13682, false], "676": [13716, 13725, false], "677": [13759, 13768, false]}, "ABDKMath64x64.sub": {"678": [3883, 3902, false], "679": [3906, 3925, true]}}, "50": {}, "51": {}, "68": {"AssetHandler.getPresentfCashValue": {"680": [2750, 2763, false], "681": [3072, 3114, true]}, "AssetHandler.getSettlementDate": {"682": [1078, 1097, false], "683": [1101, 1155, true]}}, "58": {"AssetRate.getSupplyRate": {"684": [2468, 2504, false]}, "AssetRate._getAssetRateStateful": {"685": [4723, 4756, false], "686": [5107, 5115, true]}, "AssetRate.buildSettlementRateStateful": {"687": [8408, 8427, false], "688": [8846, 8879, false], "689": [9324, 9338, false], "690": [9342, 9371, true], "691": [9441, 9459, false], "692": [9463, 9498, true]}}, "119": {}, "52": {"BalanceHandler.setBalanceStorageForNToken": {"693": [16384, 16400, true]}, "BalanceHandler._setBalanceStorage": {"694": [17499, 17529, false], "695": [17533, 17563, true], "696": [17703, 17721, false], "697": [17725, 17758, true], "698": [17816, 17849, true]}}, "72": {"Bitmap.getNextBitNum": {"699": [3362, 3376, false]}, "Bitmap.setBit": {"700": [455, 465, false], "701": [469, 481, true], "702": [526, 531, false]}, "Bitmap.getMSB": {"703": [2280, 2286, true], "704": [2328, 2368, false], "705": [2441, 2465, false], "706": [2536, 2552, false], "707": [2623, 2635, false], "708": [2706, 2716, false], "709": [2785, 2794, false], "710": [2863, 2871, false], "711": [2940, 2948, false]}, "Bitmap.isBitSet": {"712": [828, 838, false], "713": [842, 854, true]}}, "63": {"BitmapAssetsHandler.addifCashAsset": {"714": [3621, 3628, true], "715": [3689, 3718, false], "716": [3879, 3912, false], "717": [3916, 3949, true], "718": [4348, 4361, false], "719": [4483, 4511, false], "720": [4515, 4543, true]}, "BitmapAssetsHandler.setAssetsBitmap": {"721": [1069, 1127, true]}}, "116": {}, "117": {}, "118": {}, "59": {"CashGroup.getRateScalar": {"722": [2840, 2856, false], "723": [2860, 2899, true], "724": [3358, 3372, true]}, "CashGroup.calculateOracleRate": {"725": [9928, 9941, false], "726": [10537, 10553, false]}, "CashGroup.interpolateOracleRate": {"727": [8136, 8165, true], "728": [8239, 8267, true], "729": [8503, 8524, false]}}, "47": {}, "60": {"DateTime.getReferenceTime": {"730": [425, 455, true]}, "DateTime.getTradedMarket": {"731": [1014, 1024, false], "732": [1064, 1074, false], "733": [1118, 1128, false], "734": [1165, 1175, false], "735": [1216, 1226, false], "736": [1267, 1277, false], "737": [1319, 1329, false]}, "DateTime.getMaturityFromBitNum": {"738": [7022, 7033, true], "739": [7105, 7118, true], "740": [7270, 7305, false], "741": [7387, 7423, false], "742": [7767, 7805, false]}, "DateTime.isValidMarketMaturity": {"743": [1665, 1683, true], "744": [1727, 1778, true], "745": [1820, 1853, false], "746": [2003, 2052, false]}, "DateTime.getTimeUTC0": {"747": [668, 689, true]}, "DateTime.getMarketIndex": {"748": [3155, 3173, true], "749": [3217, 3268, true], "750": [3566, 3592, false], "751": [3709, 3734, false]}, "DateTime.getBitNumFromMaturity": {"752": [4283, 4312, false], "753": [4387, 4412, false], "754": [4680, 4718, false], "755": [4780, 4819, false], "756": [5662, 5702, false], "757": [6112, 6154, false]}}, "73": {"FloatingPoint56.packTo56Bits": {"758": [997, 1021, false]}}, "111": {}, "14": {}, "53": {}, "48": {}, "61": {"Market.getImpliedRate": {"759": [16780, 16787, false], "760": [17738, 17768, false]}, "Market.getOracleRate": {"761": [25399, 25413, true]}, "Market._getExchangeRate": {"762": [20081, 20125, false], "763": [20234, 20241, false], "764": [20465, 20496, false]}, "Market._setMarketStorage": {"765": [29245, 29260, false], "766": [29264, 29294, true], "767": [29349, 29368, false], "768": [29372, 29406, true], "769": [29465, 29484, false], "770": [29488, 29523, true], "771": [29583, 29597, false], "772": [29601, 29631, true], "773": [29712, 29749, true]}, "Market._setTotalLiquidity": {"774": [28806, 28825, false], "775": [28829, 28863, true]}, "Market._updateRateOracle": {"776": [23300, 23324, true], "777": [23472, 23501, false], "778": [23601, 23632, false]}, "Market.removeLiquidity": {"779": [2201, 2220, false], "780": [2253, 2271, true]}, "Market._logProportion": {"781": [21007, 21045, false], "782": [21660, 21679, false]}}, "64": {"PortfolioHandler.storeAssets": {"783": [7457, 7511, true], "784": [7587, 7633, false], "785": [7637, 7656, false], "786": [7983, 8029, false], "787": [8267, 8313, false], "788": [9531, 9550, false], "789": [9599, 9645, false], "790": [9665, 9719, true], "791": [10273, 10297, false], "792": [10301, 10335, true]}, "PortfolioHandler.addAsset": {"793": [3192, 3378, false], "794": [3410, 3446, false], "795": [3677, 3683, false], "796": [3866, 3906, false], "797": [3930, 3943, true], "798": [4031, 4058, false], "799": [4062, 4089, true], "800": [4204, 4271, false]}, "PortfolioHandler.deleteAsset": {"801": [12757, 12799, true], "802": [12847, 12883, true], "803": [13034, 13088, false], "804": [13104, 13166, true], "805": [13642, 13671, false], "806": [13675, 13717, false], "807": [13845, 13872, false]}, "PortfolioHandler._storeAsset": {"808": [11697, 11717, false], "809": [11721, 11765, true], "810": [11826, 11844, false], "811": [11848, 11882, true], "812": [11940, 11959, false], "813": [11963, 12017, true], "814": [12070, 12103, false], "815": [12107, 12140, true]}, "PortfolioHandler._updatePortfolioContext": {"816": [11051, 11070, true], "817": [11074, 11105, false], "818": [11230, 11277, true]}, "PortfolioHandler.buildPortfolioState": {"819": [15620, 15641, false]}, "PortfolioHandler._mergeAssetIntoArray": {"820": [1492, 1520, true], "821": [1540, 1570, true], "822": [1590, 1616, false], "823": [1815, 1861, false], "824": [1881, 1935, true], "825": [2135, 2175, false], "826": [2203, 2219, true], "827": [2316, 2346, false], "828": [2350, 2380, true]}, "PortfolioHandler._extendNewAssetArray": {"829": [5514, 5535, true]}, "PortfolioHandler.getSortedPortfolio": {"830": [15044, 15062, false]}, "PortfolioHandler._loadAssetArray": {"831": [16917, 16947, true]}}, "74": {"SafeInt256.subNoNeg": {"832": [1885, 1891, true]}, "SafeInt256.sub": {"833": [1385, 1413, true]}, "SafeInt256.mul": {"834": [497, 504, false], "835": [515, 521, true], "836": [525, 535, true], "837": [560, 566, true], "838": [570, 580, true]}, "SafeInt256.div": {"839": [1108, 1115, false], "840": [1119, 1135, true]}, "SafeInt256.toInt": {"841": [2596, 2626, true]}, "SafeInt256.add": {"842": [1511, 1539, true]}}, "6": {"SafeMath.add": {"843": [2794, 2800, true]}, "SafeMath.sub": {"844": [3213, 3219, true]}, "SafeMath.mul": {"845": [3611, 3617, false], "846": [3672, 3682, true]}, "SafeMath.div": {"847": [4294, 4299, true]}}, "66": {"SettleBitmapAssets.settleBitmappedCashGroup": {"848": [2043, 2073, true], "849": [2417, 2435, false], "850": [3331, 3338, true]}}, "67": {"SettlePortfolioAssets.settlePortfolio": {"851": [2865, 2887, false], "852": [2984, 3047, false], "853": [3457, 3502, false], "854": [3658, 3704, false], "855": [3990, 4016, false]}, "SettlePortfolioAssets._getSettleAmountArray": {"856": [1451, 1488, false], "857": [1665, 1699, false], "858": [2007, 2028, false]}, "SettlePortfolioAssets._settleLiquidityTokenTofCash": {"859": [5193, 5203, false], "860": [5473, 5523, false], "861": [5543, 5589, false], "862": [5609, 5659, false]}}, "54": {}, "65": {"TransferAssets.encodeAssetId": {"863": [1024, 1062, true], "864": [1081, 1109, true], "865": [1128, 1176, true]}}, "62": {"nTokenHandler.setArrayLengthAndInitializedTime": {"866": [8515, 8562, true]}, "nTokenHandler._getParameters": {"867": [13301, 13314, false], "868": [13318, 13331, true]}}, "34": {}}}, "dependencies": ["ABDKMath64x64", "AccountContextHandler", "AssetHandler", "AssetRate", "AssetRateAdapter", "BalanceHandler", "Bitmap", "BitmapAssetsHandler", "CErc20Interface", "CEtherInterface", "CTokenInterface", "CashGroup", "Constants", "DateTime", "FloatingPoint56", "IEIP20NonStandard", "OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/IERC20", "Incentives", "LibStorage", "Market", "PortfolioHandler", "SafeInt256", "OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/SafeMath", "SettleBitmapAssets", "SettlePortfolioAssets", "TokenHandler", "TransferAssets", "nTokenHandler", "nTokenMintAction"], "offset": [1454, 32614], "type": "library", "abi": [{"anonymous": false, "inputs": [{"indexed": false, "internalType": "uint16", "name": "currencyId", "type": "uint16"}], "name": "MarketsInitialized", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "uint16", "name": "currencyId", "type": "uint16"}, {"indexed": false, "internalType": "int256", "name": "cashIntoMarkets", "type": "int256"}], "name": "SweepCashIntoMarkets", "type": "event"}], "ast": {"absolutePath": "contracts/external/actions/InitializeMarketsAction.sol", "exportedSymbols": {"ABDKMath64x64": [40199], "AccountBalance": [51676], "AccountContext": [51606], "AccountContextHandler": [20773], "AggregatorInterface": [55880], "AggregatorV2V3Interface": [53489], "AggregatorV3Interface": [55926], "AssetHandler": [35860], "AssetRate": [26629], "AssetRateAdapter": [53533], "AssetRateParameters": [51502], "AssetRateStorage": [51570], "AssetStorageState": [51371], "BalanceAction": [51384], "BalanceActionWithTrades": [51400], "BalanceHandler": [21941], "BalanceState": [51495], "BalanceStorage": [51626], "Bitmap": [40540], "BitmapAssetsHandler": [32903], "CErc20Interface": [53786], "CEtherInterface": [53925], "CTokenInterface": [53919], "CashGroup": [27908], "CashGroupParameters": [51511], "CashGroupSettings": [51595], "Constants": [19613], "Context": [55949], "DateTime": [28547], "DepositActionType": [51366], "ERC20": [54494], "ETHRate": [51476], "ETHRateStorage": [51565], "FloatingPoint56": [40616], "IEIP20NonStandard": [55481], "IERC20": [53727], "Incentives": [22156], "InitializeMarketsAction": [7620], "LibStorage": [19959], "LiquidationFactors": [51454], "Market": [30461], "MarketParameters": [51541], "MarketStorage": [51646], "PortfolioAsset": [51524], "PortfolioAssetStorage": [51658], "PortfolioHandler": [34193], "PortfolioState": [51465], "SafeInt256": [40931], "SafeMath": [52407], "SettleAmount": [51405], "SettleAssetsExternal": [1130], "SettleBitmapAssets": [34672], "SettlePortfolioAssets": [35086], "SettlementRateStorage": [51633], "Token": [51416], "TokenHandler": [23007], "TokenStorage": [51552], "TokenType": [51351], "TradeActionType": [51358], "TransferAssets": [34423], "ifCashStorage": [51649], "nTokenContext": [51617], "nTokenHandler": [32214], "nTokenMintAction": [11341], "nTokenPortfolio": [51431], "nTokenTotalSupplyStorage": [51665]}, "id": 7621, "license": "GPL-3.0-only", "nodeType": "SourceUnit", "nodes": [{"id": 6088, "literals": ["solidity", "^", "0.7", ".0"], "nodeType": "PragmaDirective", "src": "41:23:29"}, {"id": 6089, "literals": ["abicoder", "v2"], "nodeType": "PragmaDirective", "src": "65:19:29"}, {"absolutePath": "contracts/external/actions/nTokenMintAction.sol", "file": "./nTokenMintAction.sol", "id": 6090, "nodeType": "ImportDirective", "scope": 7621, "sourceUnit": 11342, "src": "86:32:29", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/Market.sol", "file": "../../internal/markets/Market.sol", "id": 6091, "nodeType": "ImportDirective", "scope": 7621, "sourceUnit": 30462, "src": "119:43:29", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/CashGroup.sol", "file": "../../internal/markets/CashGroup.sol", "id": 6092, "nodeType": "ImportDirective", "scope": 7621, "sourceUnit": 27909, "src": "163:46:29", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/AssetRate.sol", "file": "../../internal/markets/AssetRate.sol", "id": 6093, "nodeType": "ImportDirective", "scope": 7621, "sourceUnit": 26630, "src": "210:46:29", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/balances/BalanceHandler.sol", "file": "../../internal/balances/BalanceHandler.sol", "id": 6094, "nodeType": "ImportDirective", "scope": 7621, "sourceUnit": 21942, "src": "257:52:29", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/portfolio/PortfolioHandler.sol", "file": "../../internal/portfolio/PortfolioHandler.sol", "id": 6095, "nodeType": "ImportDirective", "scope": 7621, "sourceUnit": 34194, "src": "310:55:29", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/settlement/SettlePortfolioAssets.sol", "file": "../../internal/settlement/SettlePortfolioAssets.sol", "id": 6096, "nodeType": "ImportDirective", "scope": 7621, "sourceUnit": 35087, "src": "366:61:29", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/settlement/SettleBitmapAssets.sol", "file": "../../internal/settlement/SettleBitmapAssets.sol", "id": 6097, "nodeType": "ImportDirective", "scope": 7621, "sourceUnit": 34673, "src": "428:58:29", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/nTokenHandler.sol", "file": "../../internal/nTokenHandler.sol", "id": 6098, "nodeType": "ImportDirective", "scope": 7621, "sourceUnit": 32215, "src": "487:42:29", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/math/SafeInt256.sol", "file": "../../math/SafeInt256.sol", "id": 6099, "nodeType": "ImportDirective", "scope": 7621, "sourceUnit": 40932, "src": "530:35:29", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/math/Bitmap.sol", "file": "../../math/Bitmap.sol", "id": 6100, "nodeType": "ImportDirective", "scope": 7621, "sourceUnit": 40541, "src": "566:31:29", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "/home/jwu/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/contracts/math/SafeMath.sol", "file": "@openzeppelin/contracts/math/SafeMath.sol", "id": 6101, "nodeType": "ImportDirective", "scope": 7621, "sourceUnit": 52408, "src": "598:51:29", "symbolAliases": [], "unitAlias": ""}, {"abstract": false, "baseContracts": [], "contractDependencies": [], "contractKind": "library", "documentation": {"id": 6102, "nodeType": "StructuredDocumentation", "src": "651:803:29", "text": "@notice Initialize markets is called once every quarter to setup the new markets. Only the nToken account\n can initialize markets, and this method will be called on behalf of that account. In this action\n the following will occur:\n  - nToken Liquidity Tokens will be settled\n  - Any ifCash assets will be settled\n  - If nToken liquidity tokens are settled with negative net ifCash, enough cash will be withheld at the PV\n    to purchase offsetting positions\n  - fCash positions are written to storage\n  - For each market, calculate the proportion of fCash to cash given:\n     - previous oracle rates\n     - rate anchor set by governance\n     - percent of cash to deposit into the market set by governance\n  - Set new markets and add liquidity tokens to portfolio"}, "fullyImplemented": true, "id": 7620, "linearizedBaseContracts": [7620], "name": "InitializeMarketsAction", "nodeType": "ContractDefinition", "nodes": [{"id": 6105, "libraryName": {"id": 6103, "name": "Bitmap", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 40540, "src": "1498:6:29", "typeDescriptions": {"typeIdentifier": "t_contract$_Bitmap_$40540", "typeString": "library Bitmap"}}, "nodeType": "UsingForDirective", "src": "1492:25:29", "typeName": {"id": 6104, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "1509:7:29", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}}, {"id": 6108, "libraryName": {"id": 6106, "name": "SafeMath", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 52407, "src": "1528:8:29", "typeDescriptions": {"typeIdentifier": "t_contract$_SafeMath_$52407", "typeString": "library SafeMath"}}, "nodeType": "UsingForDirective", "src": "1522:27:29", "typeName": {"id": 6107, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "1541:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}}, {"id": 6111, "libraryName": {"id": 6109, "name": "SafeInt256", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 40931, "src": "1560:10:29", "typeDescriptions": {"typeIdentifier": "t_contract$_SafeInt256_$40931", "typeString": "library SafeInt256"}}, "nodeType": "UsingForDirective", "src": "1554:28:29", "typeName": {"id": 6110, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1575:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}}, {"id": 6114, "libraryName": {"id": 6112, "name": "PortfolioHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 34193, "src": "1593:16:29", "typeDescriptions": {"typeIdentifier": "t_contract$_PortfolioHandler_$34193", "typeString": "library PortfolioHandler"}}, "nodeType": "UsingForDirective", "src": "1587:42:29", "typeName": {"id": 6113, "name": "PortfolioState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51465, "src": "1614:14:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$51465_storage_ptr", "typeString": "struct PortfolioState"}}}, {"id": 6117, "libraryName": {"id": 6115, "name": "Market", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 30461, "src": "1640:6:29", "typeDescriptions": {"typeIdentifier": "t_contract$_Market_$30461", "typeString": "library Market"}}, "nodeType": "UsingForDirective", "src": "1634:34:29", "typeName": {"id": 6116, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51541, "src": "1651:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_storage_ptr", "typeString": "struct MarketParameters"}}}, {"id": 6120, "libraryName": {"id": 6118, "name": "BalanceHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 21941, "src": "1679:14:29", "typeDescriptions": {"typeIdentifier": "t_contract$_BalanceHandler_$21941", "typeString": "library BalanceHandler"}}, "nodeType": "UsingForDirective", "src": "1673:38:29", "typeName": {"id": 6119, "name": "BalanceState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51495, "src": "1698:12:29", "typeDescriptions": {"typeIdentifier": "t_struct$_BalanceState_$51495_storage_ptr", "typeString": "struct BalanceState"}}}, {"id": 6123, "libraryName": {"id": 6121, "name": "CashGroup", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 27908, "src": "1722:9:29", "typeDescriptions": {"typeIdentifier": "t_contract$_CashGroup_$27908", "typeString": "library CashGroup"}}, "nodeType": "UsingForDirective", "src": "1716:40:29", "typeName": {"id": 6122, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51511, "src": "1736:19:29", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$51511_storage_ptr", "typeString": "struct CashGroupParameters"}}}, {"id": 6126, "libraryName": {"id": 6124, "name": "AssetRate", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26629, "src": "1767:9:29", "typeDescriptions": {"typeIdentifier": "t_contract$_AssetRate_$26629", "typeString": "library AssetRate"}}, "nodeType": "UsingForDirective", "src": "1761:40:29", "typeName": {"id": 6125, "name": "AssetRateParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51502, "src": "1781:19:29", "typeDescriptions": {"typeIdentifier": "t_struct$_AssetRateParameters_$51502_storage_ptr", "typeString": "struct AssetRateParameters"}}}, {"id": 6129, "libraryName": {"id": 6127, "name": "AccountContextHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 20773, "src": "1812:21:29", "typeDescriptions": {"typeIdentifier": "t_contract$_AccountContextHandler_$20773", "typeString": "library AccountContextHandler"}}, "nodeType": "UsingForDirective", "src": "1806:47:29", "typeName": {"id": 6128, "name": "AccountContext", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51606, "src": "1838:14:29", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$51606_storage_ptr", "typeString": "struct AccountContext"}}}, {"id": 6132, "libraryName": {"id": 6130, "name": "nTokenHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 32214, "src": "1864:13:29", "typeDescriptions": {"typeIdentifier": "t_contract$_nTokenHandler_$32214", "typeString": "library nTokenHandler"}}, "nodeType": "UsingForDirective", "src": "1858:40:29", "typeName": {"id": 6131, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51431, "src": "1882:15:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_storage_ptr", "typeString": "struct nTokenPortfolio"}}}, {"anonymous": false, "id": 6136, "name": "MarketsInitialized", "nodeType": "EventDefinition", "parameters": {"id": 6135, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6134, "indexed": false, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 6136, "src": "1929:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 6133, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "1929:6:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}], "src": "1928:19:29"}, "src": "1904:44:29"}, {"anonymous": false, "id": 6142, "name": "SweepCashIntoMarkets", "nodeType": "EventDefinition", "parameters": {"id": 6141, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6138, "indexed": false, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 6142, "src": "1980:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 6137, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "1980:6:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 6140, "indexed": false, "mutability": "mutable", "name": "cashIntoMarkets", "nodeType": "VariableDeclaration", "scope": 6142, "src": "1999:22:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6139, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1999:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "1979:43:29"}, "src": "1953:70:29"}, {"canonicalName": "InitializeMarketsAction.GovernanceParameters", "id": 6155, "members": [{"constant": false, "id": 6145, "mutability": "mutable", "name": "depositShares", "nodeType": "VariableDeclaration", "scope": 6155, "src": "2067:22:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 6143, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2067:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6144, "nodeType": "ArrayTypeName", "src": "2067:8:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}, {"constant": false, "id": 6148, "mutability": "mutable", "name": "leverageThresholds", "nodeType": "VariableDeclaration", "scope": 6155, "src": "2099:27:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 6146, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2099:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6147, "nodeType": "ArrayTypeName", "src": "2099:8:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}, {"constant": false, "id": 6151, "mutability": "mutable", "name": "annualizedAnchorRates", "nodeType": "VariableDeclaration", "scope": 6155, "src": "2136:30:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 6149, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2136:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6150, "nodeType": "ArrayTypeName", "src": "2136:8:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}, {"constant": false, "id": 6154, "mutability": "mutable", "name": "proportions", "nodeType": "VariableDeclaration", "scope": 6155, "src": "2176:20:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 6152, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2176:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6153, "nodeType": "ArrayTypeName", "src": "2176:8:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}], "name": "GovernanceParameters", "nodeType": "StructDefinition", "scope": 7620, "src": "2029:174:29", "visibility": "public"}, {"body": {"id": 6195, "nodeType": "Block", "src": "2366:400:29", "statements": [{"assignments": [6165], "declarations": [{"constant": false, "id": 6165, "mutability": "mutable", "name": "params", "nodeType": "VariableDeclaration", "scope": 6195, "src": "2376:34:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}, "typeName": {"id": 6164, "name": "GovernanceParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 6155, "src": "2376:20:29", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_storage_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}}, "visibility": "internal"}], "id": 6166, "nodeType": "VariableDeclarationStatement", "src": "2376:34:29"}, {"expression": {"id": 6178, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"expression": {"id": 6167, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6165, "src": "2421:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 6169, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "depositShares", "nodeType": "MemberAccess", "referencedDeclaration": 6145, "src": "2421:20:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, {"expression": {"id": 6170, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6165, "src": "2443:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 6171, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "leverageThresholds", "nodeType": "MemberAccess", "referencedDeclaration": 6148, "src": "2443:25:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}], "id": 6172, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "2420:49:29", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "tuple(int256[] memory,int256[] memory)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6175, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6157, "src": "2520:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6176, "name": "maxMarketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6159, "src": "2544:14:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6173, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 32214, "src": "2472:13:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$32214_$", "typeString": "type(library nTokenHandler)"}}, "id": 6174, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getDepositParameters", "nodeType": "MemberAccess", "referencedDeclaration": 31097, "src": "2472:34:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "function (uint256,uint256) view returns (int256[] memory,int256[] memory)"}}, "id": 6177, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2472:96:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "tuple(int256[] memory,int256[] memory)"}}, "src": "2420:148:29", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6179, "nodeType": "ExpressionStatement", "src": "2420:148:29"}, {"expression": {"id": 6191, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"expression": {"id": 6180, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6165, "src": "2580:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 6182, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "annualizedAnchorRates", "nodeType": "MemberAccess", "referencedDeclaration": 6151, "src": "2580:28:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, {"expression": {"id": 6183, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6165, "src": "2610:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 6184, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "proportions", "nodeType": "MemberAccess", "referencedDeclaration": 6154, "src": "2610:18:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}], "id": 6185, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "2579:50:29", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "tuple(int256[] memory,int256[] memory)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6188, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6157, "src": "2687:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6189, "name": "maxMarketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6159, "src": "2711:14:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6186, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 32214, "src": "2632:13:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$32214_$", "typeString": "type(library nTokenHandler)"}}, "id": 6187, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getInitializationParameters", "nodeType": "MemberAccess", "referencedDeclaration": 31343, "src": "2632:41:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "function (uint256,uint256) view returns (int256[] memory,int256[] memory)"}}, "id": 6190, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2632:103:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "tuple(int256[] memory,int256[] memory)"}}, "src": "2579:156:29", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6192, "nodeType": "ExpressionStatement", "src": "2579:156:29"}, {"expression": {"id": 6193, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6165, "src": "2753:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "functionReturnParameters": 6163, "id": 6194, "nodeType": "Return", "src": "2746:13:29"}]}, "id": 6196, "implemented": true, "kind": "function", "modifiers": [], "name": "_getGovernanceParameters", "nodeType": "FunctionDefinition", "parameters": {"id": 6160, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6157, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 6196, "src": "2243:18:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6156, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2243:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 6159, "mutability": "mutable", "name": "maxMarketIndex", "nodeType": "VariableDeclaration", "scope": 6196, "src": "2263:22:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6158, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2263:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "2242:44:29"}, "returnParameters": {"id": 6163, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6162, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 6196, "src": "2333:27:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}, "typeName": {"id": 6161, "name": "GovernanceParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 6155, "src": "2333:20:29", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_storage_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}}, "visibility": "internal"}], "src": "2332:29:29"}, "scope": 7620, "src": "2209:557:29", "stateMutability": "view", "virtual": false, "visibility": "private"}, {"body": {"id": 6288, "nodeType": "Block", "src": "2862:1831:29", "statements": [{"assignments": [6204], "declarations": [{"constant": false, "id": 6204, "mutability": "mutable", "name": "referenceTime", "nodeType": "VariableDeclaration", "scope": 6288, "src": "3644:21:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6203, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3644:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6209, "initialValue": {"arguments": [{"id": 6207, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6200, "src": "3694:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6205, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 28547, "src": "3668:8:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$28547_$", "typeString": "type(library DateTime)"}}, "id": 6206, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 27940, "src": "3668:25:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 6208, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3668:36:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "3644:60:29"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6214, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 6211, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6198, "src": "3722:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6212, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 51426, "src": "3722:26:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"id": 6213, "name": "referenceTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6204, "src": "3751:13:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3722:42:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "494d3a20696e76616c69642074696d65", "id": 6215, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "3766:18:29", "typeDescriptions": {"typeIdentifier": "t_stringliteral_d67a894f7e12aea514cbdfb6607d3417b181a719d15ab025576014b5bd145efd", "typeString": "literal_string \"IM: invalid time\""}, "value": "IM: invalid time"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_d67a894f7e12aea514cbdfb6607d3417b181a719d15ab025576014b5bd145efd", "typeString": "literal_string \"IM: invalid time\""}], "id": 6210, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "3714:7:29", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 6216, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3714:71:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6217, "nodeType": "ExpressionStatement", "src": "3714:71:29"}, {"id": 6242, "nodeType": "Block", "src": "3796:340:29", "statements": [{"assignments": [6221], "declarations": [{"constant": false, "id": 6221, "mutability": "mutable", "name": "settleAmount", "nodeType": "VariableDeclaration", "scope": 6242, "src": "3913:34:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_SettleAmount_$51405_memory_ptr_$dyn_memory_ptr", "typeString": "struct SettleAmount[]"}, "typeName": {"baseType": {"id": 6219, "name": "SettleAmount", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51405, "src": "3913:12:29", "typeDescriptions": {"typeIdentifier": "t_struct$_SettleAmount_$51405_storage_ptr", "typeString": "struct SettleAmount"}}, "id": 6220, "nodeType": "ArrayTypeName", "src": "3913:14:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_SettleAmount_$51405_storage_$dyn_storage_ptr", "typeString": "struct SettleAmount[]"}}, "visibility": "internal"}], "id": 6228, "initialValue": {"arguments": [{"expression": {"id": 6224, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6198, "src": "4004:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6225, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 51420, "src": "4004:21:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$51465_memory_ptr", "typeString": "struct PortfolioState memory"}}, {"id": 6226, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6200, "src": "4027:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_PortfolioState_$51465_memory_ptr", "typeString": "struct PortfolioState memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6222, "name": "SettlePortfolioAssets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 35086, "src": "3966:21:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_SettlePortfolioAssets_$35086_$", "typeString": "type(library SettlePortfolioAssets)"}}, "id": 6223, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "settlePortfolio", "nodeType": "MemberAccess", "referencedDeclaration": 34991, "src": "3966:37:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_PortfolioState_$51465_memory_ptr_$_t_uint256_$returns$_t_array$_t_struct$_SettleAmount_$51405_memory_ptr_$dyn_memory_ptr_$", "typeString": "function (struct PortfolioState memory,uint256) returns (struct SettleAmount memory[] memory)"}}, "id": 6227, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3966:71:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_SettleAmount_$51405_memory_ptr_$dyn_memory_ptr", "typeString": "struct SettleAmount memory[] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "3913:124:29"}, {"expression": {"id": 6240, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 6229, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6198, "src": "4051:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6231, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 51424, "src": "4051:18:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"baseExpression": {"id": 6235, "name": "settleAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6221, "src": "4095:12:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_SettleAmount_$51405_memory_ptr_$dyn_memory_ptr", "typeString": "struct SettleAmount memory[] memory"}}, "id": 6237, "indexExpression": {"hexValue": "30", "id": 6236, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4108:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "4095:15:29", "typeDescriptions": {"typeIdentifier": "t_struct$_SettleAmount_$51405_memory_ptr", "typeString": "struct SettleAmount memory"}}, "id": 6238, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "netCashChange", "nodeType": "MemberAccess", "referencedDeclaration": 51404, "src": "4095:29:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 6232, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6198, "src": "4072:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6233, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 51424, "src": "4072:18:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6234, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 40754, "src": "4072:22:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 6239, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4072:53:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "4051:74:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6241, "nodeType": "ExpressionStatement", "src": "4051:74:29"}]}, {"assignments": [6244, 6246], "declarations": [{"constant": false, "id": 6244, "mutability": "mutable", "name": "settledAssetCash", "nodeType": "VariableDeclaration", "scope": 6288, "src": "4147:23:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6243, "name": "int256", "nodeType": "ElementaryTypeName", "src": "4147:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 6246, "mutability": "mutable", "name": "blockTimeUTC0", "nodeType": "VariableDeclaration", "scope": 6288, "src": "4172:21:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6245, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4172:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6258, "initialValue": {"arguments": [{"expression": {"id": 6249, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6198, "src": "4270:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6250, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 51430, "src": "4270:19:29", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"expression": {"id": 6251, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6198, "src": "4307:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6252, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 51418, "src": "4307:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$51511_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 6253, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 51504, "src": "4307:27:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 6254, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6198, "src": "4352:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6255, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 51426, "src": "4352:26:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6256, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6200, "src": "4396:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6247, "name": "SettleBitmapAssets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 34672, "src": "4209:18:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_SettleBitmapAssets_$34672_$", "typeString": "type(library SettleBitmapAssets)"}}, "id": 6248, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "settleBitmappedCashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 34606, "src": "4209:43:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_int256_$_t_uint256_$", "typeString": "function (address,uint256,uint256,uint256) returns (int256,uint256)"}}, "id": 6257, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4209:210:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_uint256_$", "typeString": "tuple(int256,uint256)"}}, "nodeType": "VariableDeclarationStatement", "src": "4146:273:29"}, {"expression": {"id": 6267, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 6259, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6198, "src": "4429:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6261, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 51424, "src": "4429:18:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6265, "name": "settledAssetCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6244, "src": "4473:16:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 6262, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6198, "src": "4450:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6263, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 51424, "src": "4450:18:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6264, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 40754, "src": "4450:22:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 6266, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4450:40:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "4429:61:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6268, "nodeType": "ExpressionStatement", "src": "4429:61:29"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6276, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6270, "name": "blockTimeUTC0", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6246, "src": "4592:13:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"expression": {"arguments": [{"id": 6273, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "4614:6:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint40_$", "typeString": "type(uint40)"}, "typeName": {"id": 6272, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "4614:6:29", "typeDescriptions": {}}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_type$_t_uint40_$", "typeString": "type(uint40)"}], "id": 6271, "name": "type", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -27, "src": "4609:4:29", "typeDescriptions": {"typeIdentifier": "t_function_metatype_pure$__$returns$__$", "typeString": "function () pure"}}, "id": 6274, "isConstant": false, "isLValue": false, "isPure": true, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4609:12:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_magic_meta_type_t_uint40", "typeString": "type(uint40)"}}, "id": 6275, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "max", "nodeType": "MemberAccess", "src": "4609:16:29", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "src": "4592:33:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 6269, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "4584:7:29", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 6277, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4584:42:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6278, "nodeType": "ExpressionStatement", "src": "4584:42:29"}, {"expression": {"id": 6286, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 6279, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6198, "src": "4636:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6281, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 51426, "src": "4636:26:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6284, "name": "blockTimeUTC0", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6246, "src": "4672:13:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 6283, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "4665:6:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint40_$", "typeString": "type(uint40)"}, "typeName": {"id": 6282, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "4665:6:29", "typeDescriptions": {}}}, "id": 6285, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4665:21:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "src": "4636:50:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6287, "nodeType": "ExpressionStatement", "src": "4636:50:29"}]}, "id": 6289, "implemented": true, "kind": "function", "modifiers": [], "name": "_settleNTokenPortfolio", "nodeType": "FunctionDefinition", "parameters": {"id": 6201, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6198, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 6289, "src": "2804:29:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 6197, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51431, "src": "2804:15:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 6200, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 6289, "src": "2835:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6199, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2835:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "2803:50:29"}, "returnParameters": {"id": 6202, "nodeType": "ParameterList", "parameters": [], "src": "2862:0:29"}, "scope": 7620, "src": "2772:1921:29", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 6348, "nodeType": "Block", "src": "5018:1333:29", "statements": [{"assignments": [6303], "declarations": [{"constant": false, "id": 6303, "mutability": "mutable", "name": "rateOracleTimeWindow", "nodeType": "VariableDeclaration", "scope": 6348, "src": "5028:28:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6302, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5028:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6308, "initialValue": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"expression": {"id": 6304, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6296, "src": "5059:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6305, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 51418, "src": "5059:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$51511_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 6306, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "getRateOracleTimeWindow", "nodeType": "MemberAccess", "referencedDeclaration": 27022, "src": "5059:40:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_CashGroupParameters_$51511_memory_ptr_$returns$_t_uint256_$bound_to$_t_struct$_CashGroupParameters_$51511_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory) pure returns (uint256)"}}, "id": 6307, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5059:42:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "5028:73:29"}, {"assignments": [6310], "declarations": [{"constant": false, "id": 6310, "mutability": "mutable", "name": "settlementDate", "nodeType": "VariableDeclaration", "scope": 6348, "src": "5199:22:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6309, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5199:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6315, "initialValue": {"arguments": [{"id": 6313, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6294, "src": "5250:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6311, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 28547, "src": "5224:8:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$28547_$", "typeString": "type(library DateTime)"}}, "id": 6312, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 27940, "src": "5224:25:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 6314, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5224:36:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "5199:61:29"}, {"body": {"id": 6346, "nodeType": "Block", "src": "5905:440:29", "statements": [{"expression": {"arguments": [{"id": 6333, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6292, "src": "5984:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"baseExpression": {"expression": {"expression": {"id": 6334, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6296, "src": "6089:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6335, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 51420, "src": "6089:21:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$51465_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 6336, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 51457, "src": "6089:34:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$51524_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 6338, "indexExpression": {"id": 6337, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6317, "src": "6124:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6089:37:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$51524_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 6339, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 51515, "src": "6089:46:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6340, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6294, "src": "6153:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"hexValue": "66616c7365", "id": 6341, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "6245:5:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "false"}, {"id": 6342, "name": "rateOracleTimeWindow", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6303, "src": "6268:20:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6343, "name": "settlementDate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6310, "src": "6306:14:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"baseExpression": {"id": 6329, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6299, "src": "5919:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 6331, "indexExpression": {"id": 6330, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6317, "src": "5935:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "5919:18:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 6332, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadMarketWithSettlementDate", "nodeType": "MemberAccess", "referencedDeclaration": 30210, "src": "5919:47:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_MarketParameters_$51541_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$_t_uint256_$_t_uint256_$returns$__$bound_to$_t_struct$_MarketParameters_$51541_memory_ptr_$", "typeString": "function (struct MarketParameters memory,uint256,uint256,uint256,bool,uint256,uint256) view"}}, "id": 6344, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5919:415:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6345, "nodeType": "ExpressionStatement", "src": "5919:415:29"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6325, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6320, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6317, "src": "5853:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"expression": {"expression": {"id": 6321, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6296, "src": "5857:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6322, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 51420, "src": "5857:21:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$51465_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 6323, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 51457, "src": "5857:34:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$51524_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 6324, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "5857:41:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5853:45:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 6347, "initializationExpression": {"assignments": [6317], "declarations": [{"constant": false, "id": 6317, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 6347, "src": "5838:9:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6316, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5838:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6319, "initialValue": {"hexValue": "31", "id": 6318, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "5850:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "nodeType": "VariableDeclarationStatement", "src": "5838:13:29"}, "loopExpression": {"expression": {"id": 6327, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "5900:3:29", "subExpression": {"id": 6326, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6317, "src": "5900:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6328, "nodeType": "ExpressionStatement", "src": "5900:3:29"}, "nodeType": "ForStatement", "src": "5833:512:29"}]}, "documentation": {"id": 6290, "nodeType": "StructuredDocumentation", "src": "4699:121:29", "text": "@notice Special method to get previous markets, normal usage would not reference previous markets\n in this way"}, "id": 6349, "implemented": true, "kind": "function", "modifiers": [], "name": "_getPreviousMarkets", "nodeType": "FunctionDefinition", "parameters": {"id": 6300, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6292, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 6349, "src": "4863:18:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6291, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4863:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 6294, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 6349, "src": "4891:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6293, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4891:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 6296, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 6349, "src": "4918:29:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 6295, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51431, "src": "4918:15:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 6299, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 6349, "src": "4957:41:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 6297, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51541, "src": "4957:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 6298, "nodeType": "ArrayTypeName", "src": "4957:18:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}], "src": "4853:151:29"}, "returnParameters": {"id": 6301, "nodeType": "ParameterList", "parameters": [], "src": "5018:0:29"}, "scope": 7620, "src": "4825:1526:29", "stateMutability": "view", "virtual": false, "visibility": "private"}, {"body": {"id": 6423, "nodeType": "Block", "src": "6754:1164:29", "statements": [{"body": {"id": 6415, "nodeType": "Block", "src": "7040:694:29", "statements": [{"assignments": [6378], "declarations": [{"constant": false, "id": 6378, "mutability": "mutable", "name": "asset", "nodeType": "VariableDeclaration", "scope": 6415, "src": "7054:27:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$51524_memory_ptr", "typeString": "struct PortfolioAsset"}, "typeName": {"id": 6377, "name": "PortfolioAsset", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51524, "src": "7054:14:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$51524_storage_ptr", "typeString": "struct PortfolioAsset"}}, "visibility": "internal"}], "id": 6384, "initialValue": {"baseExpression": {"expression": {"expression": {"id": 6379, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6352, "src": "7084:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6380, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 51420, "src": "7084:21:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$51465_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 6381, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 51457, "src": "7084:34:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$51524_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 6383, "indexExpression": {"id": 6382, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6365, "src": "7119:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "7084:37:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$51524_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "nodeType": "VariableDeclarationStatement", "src": "7054:67:29"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6390, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 6386, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6378, "src": "7326:5:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$51524_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 6387, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "assetType", "nodeType": "MemberAccess", "referencedDeclaration": 51517, "src": "7326:15:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 6388, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19613, "src": "7345:9:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$19613_$", "typeString": "type(library Constants)"}}, "id": 6389, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "FCASH_ASSET_TYPE", "nodeType": "MemberAccess", "referencedDeclaration": 19543, "src": "7345:26:29", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "src": "7326:45:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 6385, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "7318:7:29", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 6391, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7318:54:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6392, "nodeType": "ExpressionStatement", "src": "7318:54:29"}, {"expression": {"arguments": [{"expression": {"id": 6396, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6352, "src": "7439:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6397, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 51430, "src": "7439:19:29", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 6398, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6357, "src": "7476:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 6399, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6378, "src": "7504:5:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$51524_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 6400, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 51515, "src": "7504:14:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 6401, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6352, "src": "7536:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6402, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 51426, "src": "7536:26:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 6403, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6378, "src": "7580:5:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$51524_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 6404, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "notional", "nodeType": "MemberAccess", "referencedDeclaration": 51519, "src": "7580:14:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 6393, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 32903, "src": "7387:19:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$32903_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 6395, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "addifCashAsset", "nodeType": "MemberAccess", "referencedDeclaration": 32600, "src": "7387:34:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (address,uint256,uint256,uint256,int256) returns (int256)"}}, "id": 6405, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7387:221:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6406, "nodeType": "ExpressionStatement", "src": "7387:221:29"}, {"expression": {"arguments": [{"id": 6412, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6365, "src": "7721:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 6407, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6352, "src": "7687:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6410, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 51420, "src": "7687:21:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$51465_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 6411, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "deleteAsset", "nodeType": "MemberAccess", "referencedDeclaration": 33871, "src": "7687:33:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PortfolioState_$51465_memory_ptr_$_t_uint256_$returns$__$bound_to$_t_struct$_PortfolioState_$51465_memory_ptr_$", "typeString": "function (struct PortfolioState memory,uint256) pure"}}, "id": 6413, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7687:36:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6414, "nodeType": "ExpressionStatement", "src": "7687:36:29"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6373, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6368, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6365, "src": "6988:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"expression": {"expression": {"id": 6369, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6352, "src": "6992:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6370, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 51420, "src": "6992:21:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$51465_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 6371, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 51457, "src": "6992:34:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$51524_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 6372, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "6992:41:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "6988:45:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 6416, "initializationExpression": {"assignments": [6365], "declarations": [{"constant": false, "id": 6365, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 6416, "src": "6973:9:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6364, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6973:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6367, "initialValue": {"hexValue": "31", "id": 6366, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6985:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "nodeType": "VariableDeclarationStatement", "src": "6973:13:29"}, "loopExpression": {"expression": {"id": 6375, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "7035:3:29", "subExpression": {"id": 6374, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6365, "src": "7035:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6376, "nodeType": "ExpressionStatement", "src": "7035:3:29"}, "nodeType": "ForStatement", "src": "6968:766:29"}, {"expression": {"arguments": [{"id": 6418, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6352, "src": "7876:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 6419, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6355, "src": "7884:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"id": 6420, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6359, "src": "7901:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 6417, "name": "_getNTokenNegativefCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6607, "src": "7841:34:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_nTokenPortfolio_$51431_memory_ptr_$_t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr_$_t_uint256_$returns$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,struct MarketParameters memory[] memory,uint256) view returns (int256)"}}, "id": 6421, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7841:70:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 6363, "id": 6422, "nodeType": "Return", "src": "7834:77:29"}]}, "documentation": {"id": 6350, "nodeType": "StructuredDocumentation", "src": "6357:180:29", "text": "@notice Check the net fCash assets set by the portfolio and withhold cash to account for\n the PV of negative ifCash. Also sets the ifCash assets into the nToken mapping."}, "id": 6424, "implemented": true, "kind": "function", "modifiers": [], "name": "_withholdAndSetfCashAssets", "nodeType": "FunctionDefinition", "parameters": {"id": 6360, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6352, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 6424, "src": "6587:29:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 6351, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51431, "src": "6587:15:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 6355, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 6424, "src": "6626:41:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 6353, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51541, "src": "6626:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 6354, "nodeType": "ArrayTypeName", "src": "6626:18:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}, {"constant": false, "id": 6357, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 6424, "src": "6677:18:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6356, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6677:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 6359, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 6424, "src": "6705:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6358, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6705:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "6577:151:29"}, "returnParameters": {"id": 6363, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6362, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 6424, "src": "6746:6:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6361, "name": "int256", "nodeType": "ElementaryTypeName", "src": "6746:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "6745:8:29"}, "scope": 7620, "src": "6542:1376:29", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 6606, "nodeType": "Block", "src": "8391:2610:29", "statements": [{"assignments": [6438], "declarations": [{"constant": false, "id": 6438, "mutability": "mutable", "name": "assetsBitmap", "nodeType": "VariableDeclaration", "scope": 6606, "src": "8401:20:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 6437, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "8401:7:29", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "id": 6447, "initialValue": {"arguments": [{"expression": {"id": 6441, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6427, "src": "8460:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6442, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 51430, "src": "8460:19:29", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"expression": {"id": 6443, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6427, "src": "8481:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6444, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 51418, "src": "8481:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$51511_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 6445, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 51504, "src": "8481:27:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 6439, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 32903, "src": "8424:19:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$32903_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 6440, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getAssetsBitmap", "nodeType": "MemberAccess", "referencedDeclaration": 32267, "src": "8424:35:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bytes32_$", "typeString": "function (address,uint256) view returns (bytes32)"}}, "id": 6446, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8424:85:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "VariableDeclarationStatement", "src": "8401:108:29"}, {"assignments": [6449], "declarations": [{"constant": false, "id": 6449, "mutability": "mutable", "name": "oracleRateBuffer", "nodeType": "VariableDeclaration", "scope": 6606, "src": "8731:24:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6448, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "8731:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6464, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6463, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"arguments": [{"baseExpression": {"expression": {"id": 6454, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6427, "src": "8784:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6455, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "parameters", "nodeType": "MemberAccess", "referencedDeclaration": 51428, "src": "8784:17:29", "typeDescriptions": {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}}, "id": 6458, "indexExpression": {"expression": {"id": 6456, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19613, "src": "8802:9:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$19613_$", "typeString": "type(library Constants)"}}, "id": 6457, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "CASH_WITHHOLDING_BUFFER", "nodeType": "MemberAccess", "referencedDeclaration": 19585, "src": "8802:33:29", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "8784:52:29", "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 6453, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "8778:5:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 6452, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "8778:5:29", "typeDescriptions": {}}}, "id": 6459, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8778:59:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 6451, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "8770:7:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 6450, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "8770:7:29", "typeDescriptions": {}}}, "id": 6460, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8770:68:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"expression": {"id": 6461, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19613, "src": "8841:9:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$19613_$", "typeString": "type(library Constants)"}}, "id": 6462, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "TEN_BASIS_POINTS", "nodeType": "MemberAccess", "referencedDeclaration": 19527, "src": "8841:26:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "8770:97:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "8731:136:29"}, {"assignments": [6466], "declarations": [{"constant": false, "id": 6466, "mutability": "mutable", "name": "oracleRateBlockTime", "nodeType": "VariableDeclaration", "scope": 6606, "src": "8877:27:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6465, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "8877:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6478, "initialValue": {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6470, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 6467, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6430, "src": "8907:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 6468, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "8907:22:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 6469, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "8933:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "8907:27:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseExpression": {"arguments": [{"expression": {"id": 6474, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19613, "src": "8963:9:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$19613_$", "typeString": "type(library Constants)"}}, "id": 6475, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 19461, "src": "8963:17:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6472, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6432, "src": "8949:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6473, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 52256, "src": "8949:13:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 6476, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8949:32:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6477, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "Conditional", "src": "8907:74:29", "trueExpression": {"id": 6471, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6432, "src": "8937:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "8877:104:29"}, {"assignments": [6480], "declarations": [{"constant": false, "id": 6480, "mutability": "mutable", "name": "bitNum", "nodeType": "VariableDeclaration", "scope": 6606, "src": "8992:14:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6479, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "8992:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6484, "initialValue": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 6481, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6438, "src": "9009:12:29", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 6482, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getNextBitNum", "nodeType": "MemberAccess", "referencedDeclaration": 40539, "src": "9009:26:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_uint256_$bound_to$_t_bytes32_$", "typeString": "function (bytes32) pure returns (uint256)"}}, "id": 6483, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9009:28:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "8992:45:29"}, {"body": {"id": 6597, "nodeType": "Block", "src": "9067:1840:29", "statements": [{"assignments": [6489], "declarations": [{"constant": false, "id": 6489, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 6597, "src": "9165:16:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6488, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "9165:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6496, "initialValue": {"arguments": [{"expression": {"id": 6492, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6427, "src": "9215:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6493, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 51426, "src": "9215:26:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6494, "name": "bitNum", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6480, "src": "9243:6:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6490, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 28547, "src": "9184:8:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$28547_$", "typeString": "type(library DateTime)"}}, "id": 6491, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getMaturityFromBitNum", "nodeType": "MemberAccess", "referencedDeclaration": 28546, "src": "9184:30:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 6495, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9184:66:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "9165:85:29"}, {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 6509, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6500, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 6497, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6430, "src": "9449:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 6498, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "9449:22:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 6499, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "9475:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "9449:27:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"arguments": [{"expression": {"expression": {"id": 6503, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6427, "src": "9548:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6504, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 51418, "src": "9548:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$51511_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 6505, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 51506, "src": "9548:31:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6506, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6489, "src": "9601:8:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6507, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6432, "src": "9631:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6501, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 28547, "src": "9496:8:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$28547_$", "typeString": "type(library DateTime)"}}, "id": 6502, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "isValidMarketMaturity", "nodeType": "MemberAccess", "referencedDeclaration": 28106, "src": "9496:30:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$", "typeString": "function (uint256,uint256,uint256) pure returns (bool)"}}, "id": 6508, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9496:162:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "9449:209:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 6526, "nodeType": "IfStatement", "src": "9428:470:29", "trueBody": {"id": 6525, "nodeType": "Block", "src": "9673:225:29", "statements": [{"expression": {"id": 6516, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 6510, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6438, "src": "9753:12:29", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6513, "name": "bitNum", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6480, "src": "9788:6:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"hexValue": "66616c7365", "id": 6514, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "9796:5:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "false"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bool", "typeString": "bool"}], "expression": {"id": 6511, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6438, "src": "9768:12:29", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 6512, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBit", "nodeType": "MemberAccess", "referencedDeclaration": 40255, "src": "9768:19:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint256_$_t_bool_$returns$_t_bytes32_$bound_to$_t_bytes32_$", "typeString": "function (bytes32,uint256,bool) pure returns (bytes32)"}}, "id": 6515, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9768:34:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "src": "9753:49:29", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 6517, "nodeType": "ExpressionStatement", "src": "9753:49:29"}, {"expression": {"id": 6522, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 6518, "name": "bitNum", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6480, "src": "9820:6:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 6519, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6438, "src": "9829:12:29", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 6520, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getNextBitNum", "nodeType": "MemberAccess", "referencedDeclaration": 40539, "src": "9829:26:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_uint256_$bound_to$_t_bytes32_$", "typeString": "function (bytes32) pure returns (uint256)"}}, "id": 6521, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9829:28:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "9820:37:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6523, "nodeType": "ExpressionStatement", "src": "9820:37:29"}, {"id": 6524, "nodeType": "Continue", "src": "9875:8:29"}]}}, {"assignments": [6528], "declarations": [{"constant": false, "id": 6528, "mutability": "mutable", "name": "notional", "nodeType": "VariableDeclaration", "scope": 6597, "src": "9912:15:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6527, "name": "int256", "nodeType": "ElementaryTypeName", "src": "9912:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 6538, "initialValue": {"arguments": [{"expression": {"id": 6531, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6427, "src": "10005:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6532, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 51430, "src": "10005:19:29", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"expression": {"id": 6533, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6427, "src": "10046:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6534, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 51418, "src": "10046:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$51511_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 6535, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 51504, "src": "10046:27:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 6536, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6489, "src": "10095:8:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6529, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 32903, "src": "9946:19:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$32903_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 6530, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getifCashNotional", "nodeType": "MemberAccess", "referencedDeclaration": 32338, "src": "9946:37:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (address,uint256,uint256) view returns (int256)"}}, "id": 6537, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9946:175:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "9912:209:29"}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 6541, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6539, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6528, "src": "10207:8:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "30", "id": 6540, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10218:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "10207:12:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 6582, "nodeType": "IfStatement", "src": "10203:521:29", "trueBody": {"id": 6581, "nodeType": "Block", "src": "10221:503:29", "statements": [{"assignments": [6543], "declarations": [{"constant": false, "id": 6543, "mutability": "mutable", "name": "oracleRate", "nodeType": "VariableDeclaration", "scope": 6581, "src": "10239:18:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6542, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "10239:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6550, "initialValue": {"arguments": [{"id": 6547, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6489, "src": "10297:8:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6548, "name": "oracleRateBlockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6466, "src": "10307:19:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 6544, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6427, "src": "10260:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6545, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 51418, "src": "10260:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$51511_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 6546, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "calculateOracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 27350, "src": "10260:36:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_CashGroupParameters_$51511_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_CashGroupParameters_$51511_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory,uint256,uint256) view returns (uint256)"}}, "id": 6549, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10260:67:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "10239:88:29"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6553, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6551, "name": "oracleRateBuffer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6449, "src": "10350:16:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 6552, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6543, "src": "10369:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "10350:29:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 6566, "nodeType": "Block", "src": "10442:86:29", "statements": [{"expression": {"id": 6564, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 6559, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6543, "src": "10464:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6562, "name": "oracleRateBuffer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6449, "src": "10492:16:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6560, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6543, "src": "10477:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6561, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 52256, "src": "10477:14:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 6563, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10477:32:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "10464:45:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6565, "nodeType": "ExpressionStatement", "src": "10464:45:29"}]}, "id": 6567, "nodeType": "IfStatement", "src": "10346:182:29", "trueBody": {"id": 6558, "nodeType": "Block", "src": "10381:55:29", "statements": [{"expression": {"id": 6556, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 6554, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6543, "src": "10403:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"hexValue": "30", "id": 6555, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10416:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "10403:14:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6557, "nodeType": "ExpressionStatement", "src": "10403:14:29"}]}}, {"expression": {"id": 6579, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 6568, "name": "totalCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6435, "src": "10546:20:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"id": 6573, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6528, "src": "10649:8:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 6574, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6489, "src": "10659:8:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6575, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6432, "src": "10669:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6576, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6543, "src": "10680:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6571, "name": "AssetHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 35860, "src": "10615:12:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_AssetHandler_$35860_$", "typeString": "type(library AssetHandler)"}}, "id": 6572, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getPresentfCashValue", "nodeType": "MemberAccess", "referencedDeclaration": 35287, "src": "10615:33:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (int256,uint256,uint256,uint256) pure returns (int256)"}}, "id": 6577, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10615:76:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 6569, "name": "totalCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6435, "src": "10569:20:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6570, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 40728, "src": "10569:24:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 6578, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10569:140:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "10546:163:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6580, "nodeType": "ExpressionStatement", "src": "10546:163:29"}]}}, {"expression": {"id": 6589, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 6583, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6438, "src": "10796:12:29", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6586, "name": "bitNum", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6480, "src": "10831:6:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"hexValue": "66616c7365", "id": 6587, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "10839:5:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "false"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bool", "typeString": "bool"}], "expression": {"id": 6584, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6438, "src": "10811:12:29", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 6585, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBit", "nodeType": "MemberAccess", "referencedDeclaration": 40255, "src": "10811:19:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint256_$_t_bool_$returns$_t_bytes32_$bound_to$_t_bytes32_$", "typeString": "function (bytes32,uint256,bool) pure returns (bytes32)"}}, "id": 6588, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10811:34:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "src": "10796:49:29", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 6590, "nodeType": "ExpressionStatement", "src": "10796:49:29"}, {"expression": {"id": 6595, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 6591, "name": "bitNum", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6480, "src": "10859:6:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 6592, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6438, "src": "10868:12:29", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 6593, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getNextBitNum", "nodeType": "MemberAccess", "referencedDeclaration": 40539, "src": "10868:26:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_uint256_$bound_to$_t_bytes32_$", "typeString": "function (bytes32) pure returns (uint256)"}}, "id": 6594, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10868:28:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "10859:37:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6596, "nodeType": "ExpressionStatement", "src": "10859:37:29"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6487, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6485, "name": "bitNum", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6480, "src": "9054:6:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 6486, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "9064:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "9054:11:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 6598, "nodeType": "WhileStatement", "src": "9047:1860:29"}, {"expression": {"arguments": [{"id": 6603, "name": "totalCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6435, "src": "10973:20:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"expression": {"id": 6599, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6427, "src": "10924:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6600, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 51418, "src": "10924:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$51511_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 6601, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "assetRate", "nodeType": "MemberAccess", "referencedDeclaration": 51508, "src": "10924:26:29", "typeDescriptions": {"typeIdentifier": "t_struct$_AssetRateParameters_$51502_memory_ptr", "typeString": "struct AssetRateParameters memory"}}, "id": 6602, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertFromUnderlying", "nodeType": "MemberAccess", "referencedDeclaration": 26138, "src": "10924:48:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_AssetRateParameters_$51502_memory_ptr_$_t_int256_$returns$_t_int256_$bound_to$_t_struct$_AssetRateParameters_$51502_memory_ptr_$", "typeString": "function (struct AssetRateParameters memory,int256) pure returns (int256)"}}, "id": 6604, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10924:70:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 6436, "id": 6605, "nodeType": "Return", "src": "10917:77:29"}]}, "documentation": {"id": 6425, "nodeType": "StructuredDocumentation", "src": "7924:243:29", "text": "@notice If a nToken incurs a negative fCash residual as a result of lending, this means\n that we are going to need to withhold some amount of cash so that market makers can purchase and\n clear the debts off the balance sheet."}, "id": 6607, "implemented": true, "kind": "function", "modifiers": [], "name": "_getNTokenNegativefCashWithholding", "nodeType": "FunctionDefinition", "parameters": {"id": 6433, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6427, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 6607, "src": "8225:29:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 6426, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51431, "src": "8225:15:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 6430, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 6607, "src": "8264:41:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 6428, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51541, "src": "8264:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 6429, "nodeType": "ArrayTypeName", "src": "8264:18:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}, {"constant": false, "id": 6432, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 6607, "src": "8315:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6431, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "8315:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "8215:123:29"}, "returnParameters": {"id": 6436, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6435, "mutability": "mutable", "name": "totalCashWithholding", "nodeType": "VariableDeclaration", "scope": 6607, "src": "8362:27:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6434, "name": "int256", "nodeType": "ElementaryTypeName", "src": "8362:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "8361:29:29"}, "scope": 7620, "src": "8172:2829:29", "stateMutability": "view", "virtual": false, "visibility": "internal"}, {"body": {"id": 6693, "nodeType": "Block", "src": "11250:1145:29", "statements": [{"assignments": [6624], "declarations": [{"constant": false, "id": 6624, "mutability": "mutable", "name": "netAssetCashAvailable", "nodeType": "VariableDeclaration", "scope": 6693, "src": "11260:28:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6623, "name": "int256", "nodeType": "ElementaryTypeName", "src": "11260:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 6625, "nodeType": "VariableDeclarationStatement", "src": "11260:28:29"}, {"assignments": [6627], "declarations": [{"constant": false, "id": 6627, "mutability": "mutable", "name": "assetCashWithholding", "nodeType": "VariableDeclaration", "scope": 6693, "src": "11298:27:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6626, "name": "int256", "nodeType": "ElementaryTypeName", "src": "11298:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 6628, "nodeType": "VariableDeclarationStatement", "src": "11298:27:29"}, {"condition": {"id": 6629, "name": "isFirstInit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6618, "src": "11340:11:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 6664, "nodeType": "Block", "src": "11452:336:29", "statements": [{"expression": {"arguments": [{"id": 6644, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6609, "src": "11489:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 6645, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6614, "src": "11497:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 6643, "name": "_settleNTokenPortfolio", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6289, "src": "11466:22:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$51431_memory_ptr_$_t_uint256_$returns$__$", "typeString": "function (struct nTokenPortfolio memory,uint256)"}}, "id": 6646, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11466:41:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6647, "nodeType": "ExpressionStatement", "src": "11466:41:29"}, {"expression": {"arguments": [{"id": 6649, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6616, "src": "11541:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6650, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6614, "src": "11553:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6651, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6609, "src": "11564:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 6652, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6612, "src": "11572:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}], "id": 6648, "name": "_getPreviousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6349, "src": "11521:19:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$_t_struct$_nTokenPortfolio_$51431_memory_ptr_$_t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr_$returns$__$", "typeString": "function (uint256,uint256,struct nTokenPortfolio memory,struct MarketParameters memory[] memory) view"}}, "id": 6653, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11521:67:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6654, "nodeType": "ExpressionStatement", "src": "11521:67:29"}, {"expression": {"id": 6662, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 6655, "name": "assetCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6627, "src": "11602:20:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6657, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6609, "src": "11669:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 6658, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6612, "src": "11693:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"id": 6659, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6616, "src": "11726:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6660, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6614, "src": "11754:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 6656, "name": "_withholdAndSetfCashAssets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6424, "src": "11625:26:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$51431_memory_ptr_$_t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,struct MarketParameters memory[] memory,uint256,uint256) returns (int256)"}}, "id": 6661, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11625:152:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "11602:175:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6663, "nodeType": "ExpressionStatement", "src": "11602:175:29"}]}, "id": 6665, "nodeType": "IfStatement", "src": "11336:452:29", "trueBody": {"id": 6642, "nodeType": "Block", "src": "11353:93:29", "statements": [{"expression": {"id": 6640, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 6630, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6609, "src": "11367:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6632, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 51426, "src": "11367:26:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"id": 6637, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6614, "src": "11424:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6635, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 28547, "src": "11403:8:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$28547_$", "typeString": "type(library DateTime)"}}, "id": 6636, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getTimeUTC0", "nodeType": "MemberAccess", "referencedDeclaration": 27964, "src": "11403:20:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 6638, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11403:31:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 6634, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "11396:6:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint40_$", "typeString": "type(uint40)"}, "typeName": {"id": 6633, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "11396:6:29", "typeDescriptions": {}}}, "id": 6639, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11396:39:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "src": "11367:68:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6641, "nodeType": "ExpressionStatement", "src": "11367:68:29"}]}}, {"expression": {"id": 6672, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 6666, "name": "netAssetCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6624, "src": "11915:21:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6670, "name": "assetCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6627, "src": "11967:20:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 6667, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6609, "src": "11939:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6668, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 51424, "src": "11939:18:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6669, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subNoNeg", "nodeType": "MemberAccess", "referencedDeclaration": 40811, "src": "11939:27:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 6671, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11939:49:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "11915:73:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6673, "nodeType": "ExpressionStatement", "src": "11915:73:29"}, {"expression": {"id": 6678, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 6674, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6609, "src": "12043:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6676, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 51424, "src": "12043:18:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 6677, "name": "assetCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6627, "src": "12064:20:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "12043:41:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6679, "nodeType": "ExpressionStatement", "src": "12043:41:29"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 6687, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6681, "name": "netAssetCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6624, "src": "12239:21:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"arguments": [{"expression": {"id": 6684, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19613, "src": "12270:9:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$19613_$", "typeString": "type(library Constants)"}}, "id": 6685, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "DEPOSIT_PERCENT_BASIS", "nodeType": "MemberAccess", "referencedDeclaration": 19579, "src": "12270:31:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 6683, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "12263:6:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_int256_$", "typeString": "type(int256)"}, "typeName": {"id": 6682, "name": "int256", "nodeType": "ElementaryTypeName", "src": "12263:6:29", "typeDescriptions": {}}}, "id": 6686, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12263:39:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "12239:63:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "494d3a20696e73756666696369656e742063617368", "id": 6688, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "12316:23:29", "typeDescriptions": {"typeIdentifier": "t_stringliteral_9d6734fa91f5216063c151ded537fbf863e668ee43f07e7d73b264c914b71d1a", "typeString": "literal_string \"IM: insufficient cash\""}, "value": "IM: insufficient cash"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_9d6734fa91f5216063c151ded537fbf863e668ee43f07e7d73b264c914b71d1a", "typeString": "literal_string \"IM: insufficient cash\""}], "id": 6680, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "12218:7:29", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 6689, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12218:131:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6690, "nodeType": "ExpressionStatement", "src": "12218:131:29"}, {"expression": {"id": 6691, "name": "netAssetCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6624, "src": "12367:21:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 6622, "id": 6692, "nodeType": "Return", "src": "12360:28:29"}]}, "id": 6694, "implemented": true, "kind": "function", "modifiers": [], "name": "_calculateNetAssetCashAvailable", "nodeType": "FunctionDefinition", "parameters": {"id": 6619, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6609, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 6694, "src": "11057:29:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 6608, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51431, "src": "11057:15:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 6612, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 6694, "src": "11096:41:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 6610, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51541, "src": "11096:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 6611, "nodeType": "ArrayTypeName", "src": "11096:18:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}, {"constant": false, "id": 6614, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 6694, "src": "11147:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6613, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "11147:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 6616, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 6694, "src": "11174:18:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6615, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "11174:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 6618, "mutability": "mutable", "name": "isFirstInit", "nodeType": "VariableDeclaration", "scope": 6694, "src": "11202:16:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 6617, "name": "bool", "nodeType": "ElementaryTypeName", "src": "11202:4:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "src": "11047:177:29"}, "returnParameters": {"id": 6622, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6621, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 6694, "src": "11242:6:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6620, "name": "int256", "nodeType": "ElementaryTypeName", "src": "11242:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "11241:8:29"}, "scope": 7620, "src": "11007:1388:29", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 6739, "nodeType": "Block", "src": "12821:524:29", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6709, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 6706, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6698, "src": "12908:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 6707, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "12908:22:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"hexValue": "33", "id": 6708, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "12934:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_3_by_1", "typeString": "int_const 3"}, "value": "3"}, "src": "12908:27:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "494d3a20736978206d6f6e7468206572726f72", "id": 6710, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "12937:21:29", "typeDescriptions": {"typeIdentifier": "t_stringliteral_3ae6f9a9a68da3c3b609502f0cb312a58fe9bb16d8f24a919bfdfee189d0b62b", "typeString": "literal_string \"IM: six month error\""}, "value": "IM: six month error"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_3ae6f9a9a68da3c3b609502f0cb312a58fe9bb16d8f24a919bfdfee189d0b62b", "typeString": "literal_string \"IM: six month error\""}], "id": 6705, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "12900:7:29", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 6711, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12900:59:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6712, "nodeType": "ExpressionStatement", "src": "12900:59:29"}, {"expression": {"arguments": [{"expression": {"baseExpression": {"id": 6715, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6698, "src": "13038:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 6717, "indexExpression": {"hexValue": "31", "id": 6716, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13054:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "13038:18:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 6718, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 51528, "src": "13038:27:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"baseExpression": {"id": 6719, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6698, "src": "13083:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 6721, "indexExpression": {"hexValue": "32", "id": 6720, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13099:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "13083:18:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 6722, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 51528, "src": "13083:27:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"baseExpression": {"id": 6723, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6698, "src": "13128:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 6725, "indexExpression": {"hexValue": "31", "id": 6724, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13144:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "13128:18:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 6726, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 51538, "src": "13128:29:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"baseExpression": {"id": 6727, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6698, "src": "13175:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 6729, "indexExpression": {"hexValue": "32", "id": 6728, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13191:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "13175:18:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 6730, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 51538, "src": "13175:29:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6736, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6731, "name": "referenceTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6700, "src": "13287:13:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6735, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"hexValue": "32", "id": 6732, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13303:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"expression": {"id": 6733, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19613, "src": "13307:9:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$19613_$", "typeString": "type(library Constants)"}}, "id": 6734, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 19461, "src": "13307:17:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13303:21:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13287:37:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6713, "name": "CashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 27908, "src": "12989:9:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_CashGroup_$27908_$", "typeString": "type(library CashGroup)"}}, "id": 6714, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "interpolateOracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 27223, "src": "12989:31:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256,uint256,uint256,uint256,uint256) pure returns (uint256)"}}, "id": 6737, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12989:349:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 6704, "id": 6738, "nodeType": "Return", "src": "12970:368:29"}]}, "documentation": {"id": 6695, "nodeType": "StructuredDocumentation", "src": "12401:263:29", "text": "@notice The six month implied rate is zero if there have never been any markets initialized\n otherwise the market will be the interpolation between the old 6 month and 1 year markets\n which are now sitting at 3 month and 9 month time to maturity"}, "id": 6740, "implemented": true, "kind": "function", "modifiers": [], "name": "_getSixMonthImpliedRate", "nodeType": "FunctionDefinition", "parameters": {"id": 6701, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6698, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 6740, "src": "12711:41:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 6696, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51541, "src": "12711:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 6697, "nodeType": "ArrayTypeName", "src": "12711:18:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}, {"constant": false, "id": 6700, "mutability": "mutable", "name": "referenceTime", "nodeType": "VariableDeclaration", "scope": 6740, "src": "12762:21:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6699, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "12762:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "12701:88:29"}, "returnParameters": {"id": 6704, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6703, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 6740, "src": "12812:7:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6702, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "12812:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "12811:9:29"}, "scope": 7620, "src": "12669:676:29", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 6828, "nodeType": "Block", "src": "14206:1069:29", "statements": [{"assignments": [6755], "declarations": [{"constant": false, "id": 6755, "mutability": "mutable", "name": "rateAnchor", "nodeType": "VariableDeclaration", "scope": 6828, "src": "14216:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6754, "name": "int256", "nodeType": "ElementaryTypeName", "src": "14216:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 6761, "initialValue": {"arguments": [{"id": 6758, "name": "annualizedAnchorRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6749, "src": "14274:20:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6759, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6745, "src": "14296:14:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6756, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 30461, "src": "14236:6:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Market_$30461_$", "typeString": "type(library Market)"}}, "id": 6757, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getExchangeRateFromImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 29439, "src": "14236:37:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (uint256,uint256) pure returns (int256)"}}, "id": 6760, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14236:75:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "14216:95:29"}, {"assignments": [6763], "declarations": [{"constant": false, "id": 6763, "mutability": "mutable", "name": "exchangeRate", "nodeType": "VariableDeclaration", "scope": 6828, "src": "14429:19:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6762, "name": "int256", "nodeType": "ElementaryTypeName", "src": "14429:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 6769, "initialValue": {"arguments": [{"id": 6766, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6743, "src": "14489:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6767, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6745, "src": "14501:14:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6764, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 30461, "src": "14451:6:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Market_$30461_$", "typeString": "type(library Market)"}}, "id": 6765, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getExchangeRateFromImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 29439, "src": "14451:37:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (uint256,uint256) pure returns (int256)"}}, "id": 6768, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14451:65:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "14429:87:29"}, {"assignments": [6771], "declarations": [{"constant": false, "id": 6771, "mutability": "mutable", "name": "expValue", "nodeType": "VariableDeclaration", "scope": 6828, "src": "14527:15:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}, "typeName": {"id": 6770, "name": "int128", "nodeType": "ElementaryTypeName", "src": "14527:6:29", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "visibility": "internal"}], "id": 6783, "initialValue": {"arguments": [{"arguments": [{"id": 6780, "name": "rateScalar", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6747, "src": "14686:10:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"components": [{"arguments": [{"id": 6776, "name": "rateAnchor", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6755, "src": "14654:10:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 6774, "name": "exchangeRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6763, "src": "14637:12:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6775, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 40728, "src": "14637:16:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 6777, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14637:28:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 6778, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "14636:30:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6779, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mulInRatePrecision", "nodeType": "MemberAccess", "referencedDeclaration": 40851, "src": "14636:49:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 6781, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14636:61:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 6772, "name": "ABDKMath64x64", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 40199, "src": "14545:13:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_ABDKMath64x64_$40199_$", "typeString": "type(library ABDKMath64x64)"}}, "id": 6773, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "fromInt", "nodeType": "MemberAccess", "referencedDeclaration": 37482, "src": "14545:21:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int128_$", "typeString": "function (int256) pure returns (int128)"}}, "id": 6782, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14545:162:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "nodeType": "VariableDeclarationStatement", "src": "14527:180:29"}, {"expression": {"id": 6791, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 6784, "name": "expValue", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6771, "src": "14765:8:29", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6787, "name": "expValue", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6771, "src": "14794:8:29", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, {"expression": {"id": 6788, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19613, "src": "14804:9:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$19613_$", "typeString": "type(library Constants)"}}, "id": 6789, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RATE_PRECISION_64x64", "nodeType": "MemberAccess", "referencedDeclaration": 19530, "src": "14804:30:29", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int128", "typeString": "int128"}, {"typeIdentifier": "t_int128", "typeString": "int128"}], "expression": {"id": 6785, "name": "ABDKMath64x64", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 40199, "src": "14776:13:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_ABDKMath64x64_$40199_$", "typeString": "type(library ABDKMath64x64)"}}, "id": 6786, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 37914, "src": "14776:17:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int128_$_t_int128_$returns$_t_int128_$", "typeString": "function (int128,int128) pure returns (int128)"}}, "id": 6790, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14776:59:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "src": "14765:70:29", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "id": 6792, "nodeType": "ExpressionStatement", "src": "14765:70:29"}, {"expression": {"id": 6798, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 6793, "name": "expValue", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6771, "src": "14874:8:29", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6796, "name": "expValue", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6771, "src": "14903:8:29", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int128", "typeString": "int128"}], "expression": {"id": 6794, "name": "ABDKMath64x64", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 40199, "src": "14885:13:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_ABDKMath64x64_$40199_$", "typeString": "type(library ABDKMath64x64)"}}, "id": 6795, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "exp", "nodeType": "MemberAccess", "referencedDeclaration": 39765, "src": "14885:17:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int128_$returns$_t_int128_$", "typeString": "function (int128) pure returns (int128)"}}, "id": 6797, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14885:27:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "src": "14874:38:29", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "id": 6799, "nodeType": "ExpressionStatement", "src": "14874:38:29"}, {"assignments": [6801], "declarations": [{"constant": false, "id": 6801, "mutability": "mutable", "name": "proportion", "nodeType": "VariableDeclaration", "scope": 6828, "src": "15007:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}, "typeName": {"id": 6800, "name": "int128", "nodeType": "ElementaryTypeName", "src": "15007:6:29", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "visibility": "internal"}], "id": 6813, "initialValue": {"arguments": [{"id": 6804, "name": "expValue", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6771, "src": "15045:8:29", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, {"arguments": [{"id": 6807, "name": "expValue", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6771, "src": "15073:8:29", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, {"commonType": {"typeIdentifier": "t_rational_18446744073709551616_by_1", "typeString": "int_const 18446744073709551616"}, "id": 6810, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "32", "id": 6808, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "15083:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "3634", "id": 6809, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "15086:2:29", "typeDescriptions": {"typeIdentifier": "t_rational_64_by_1", "typeString": "int_const 64"}, "value": "64"}, "src": "15083:5:29", "typeDescriptions": {"typeIdentifier": "t_rational_18446744073709551616_by_1", "typeString": "int_const 18446744073709551616"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int128", "typeString": "int128"}, {"typeIdentifier": "t_rational_18446744073709551616_by_1", "typeString": "int_const 18446744073709551616"}], "expression": {"id": 6805, "name": "ABDKMath64x64", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 40199, "src": "15055:13:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_ABDKMath64x64_$40199_$", "typeString": "type(library ABDKMath64x64)"}}, "id": 6806, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 37623, "src": "15055:17:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int128_$_t_int128_$returns$_t_int128_$", "typeString": "function (int128,int128) pure returns (int128)"}}, "id": 6811, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15055:34:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int128", "typeString": "int128"}, {"typeIdentifier": "t_int128", "typeString": "int128"}], "expression": {"id": 6802, "name": "ABDKMath64x64", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 40199, "src": "15027:13:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_ABDKMath64x64_$40199_$", "typeString": "type(library ABDKMath64x64)"}}, "id": 6803, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 37914, "src": "15027:17:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int128_$_t_int128_$returns$_t_int128_$", "typeString": "function (int128,int128) pure returns (int128)"}}, "id": 6812, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15027:63:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "nodeType": "VariableDeclarationStatement", "src": "15007:83:29"}, {"expression": {"id": 6821, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 6814, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6801, "src": "15145:10:29", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 6817, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6801, "src": "15176:10:29", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, {"expression": {"id": 6818, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19613, "src": "15188:9:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$19613_$", "typeString": "type(library Constants)"}}, "id": 6819, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RATE_PRECISION_64x64", "nodeType": "MemberAccess", "referencedDeclaration": 19530, "src": "15188:30:29", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int128", "typeString": "int128"}, {"typeIdentifier": "t_int128", "typeString": "int128"}], "expression": {"id": 6815, "name": "ABDKMath64x64", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 40199, "src": "15158:13:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_ABDKMath64x64_$40199_$", "typeString": "type(library ABDKMath64x64)"}}, "id": 6816, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 37695, "src": "15158:17:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int128_$_t_int128_$returns$_t_int128_$", "typeString": "function (int128,int128) pure returns (int128)"}}, "id": 6820, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15158:61:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "src": "15145:74:29", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}, "id": 6822, "nodeType": "ExpressionStatement", "src": "15145:74:29"}, {"expression": {"arguments": [{"id": 6825, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6801, "src": "15257:10:29", "typeDescriptions": {"typeIdentifier": "t_int128", "typeString": "int128"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int128", "typeString": "int128"}], "expression": {"id": 6823, "name": "ABDKMath64x64", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 40199, "src": "15237:13:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_ABDKMath64x64_$40199_$", "typeString": "type(library ABDKMath64x64)"}}, "id": 6824, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "toInt", "nodeType": "MemberAccess", "referencedDeclaration": 37498, "src": "15237:19:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int128_$returns$_t_int64_$", "typeString": "function (int128) pure returns (int64)"}}, "id": 6826, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15237:31:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int64", "typeString": "int64"}}, "functionReturnParameters": 6753, "id": 6827, "nodeType": "Return", "src": "15230:38:29"}]}, "documentation": {"id": 6741, "nodeType": "StructuredDocumentation", "src": "13351:651:29", "text": "@notice Calculates a market proportion via the implied rate. The formula is:\n    exchangeRate = e ^ (impliedRate * timeToMaturity)\n    exchangeRate = (1 / rateScalar) * ln(proportion / (1 - proportion)) + rateAnchor\n    proportion / (1 - proportion) = e^((exchangeRate - rateAnchor) * rateScalar)\n    exp = e^((exchangeRate - rateAnchor) * rateScalar)\n    proportion / (1 - proportion) = exp\n    exp * (1 - proportion) = proportion\n    exp - exp * proportion = proportion\n    exp = proportion + exp * proportion\n    exp = proportion * (1 + exp)\n    proportion = exp / (1 + exp)"}, "id": 6829, "implemented": true, "kind": "function", "modifiers": [], "name": "_getProportionFromOracleRate", "nodeType": "FunctionDefinition", "parameters": {"id": 6750, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6743, "mutability": "mutable", "name": "oracleRate", "nodeType": "VariableDeclaration", "scope": 6829, "src": "14054:18:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6742, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "14054:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 6745, "mutability": "mutable", "name": "timeToMaturity", "nodeType": "VariableDeclaration", "scope": 6829, "src": "14082:22:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6744, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "14082:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 6747, "mutability": "mutable", "name": "rateScalar", "nodeType": "VariableDeclaration", "scope": 6829, "src": "14114:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6746, "name": "int256", "nodeType": "ElementaryTypeName", "src": "14114:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 6749, "mutability": "mutable", "name": "annualizedAnchorRate", "nodeType": "VariableDeclaration", "scope": 6829, "src": "14141:28:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6748, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "14141:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "14044:131:29"}, "returnParameters": {"id": 6753, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6752, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 6829, "src": "14198:6:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6751, "name": "int256", "nodeType": "ElementaryTypeName", "src": "14198:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "14197:8:29"}, "scope": 7620, "src": "14007:1268:29", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 6866, "nodeType": "Block", "src": "15977:339:29", "statements": [{"assignments": [6846], "declarations": [{"constant": false, "id": 6846, "mutability": "mutable", "name": "rateAnchor", "nodeType": "VariableDeclaration", "scope": 6866, "src": "15987:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6845, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15987:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 6852, "initialValue": {"arguments": [{"id": 6849, "name": "annualizedAnchorRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6838, "src": "16045:20:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 6850, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6840, "src": "16067:14:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6847, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 30461, "src": "16007:6:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Market_$30461_$", "typeString": "type(library Market)"}}, "id": 6848, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getExchangeRateFromImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 29439, "src": "16007:37:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (uint256,uint256) pure returns (int256)"}}, "id": 6851, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16007:75:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "15987:95:29"}, {"assignments": [6854], "declarations": [{"constant": false, "id": 6854, "mutability": "mutable", "name": "oracleRate", "nodeType": "VariableDeclaration", "scope": 6866, "src": "16092:18:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6853, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16092:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6863, "initialValue": {"arguments": [{"id": 6857, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6832, "src": "16148:11:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 6858, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6834, "src": "16173:22:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 6859, "name": "rateScalar", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6836, "src": "16209:10:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 6860, "name": "rateAnchor", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6846, "src": "16233:10:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 6861, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6840, "src": "16257:14:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 6855, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 30461, "src": "16113:6:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Market_$30461_$", "typeString": "type(library Market)"}}, "id": 6856, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 29384, "src": "16113:21:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$_t_int256_$_t_int256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (int256,int256,int256,int256,uint256) pure returns (uint256)"}}, "id": 6862, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16113:168:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "16092:189:29"}, {"expression": {"id": 6864, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6854, "src": "16299:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 6844, "id": 6865, "nodeType": "Return", "src": "16292:17:29"}]}, "documentation": {"id": 6830, "nodeType": "StructuredDocumentation", "src": "15281:459:29", "text": "@dev Returns the oracle rate given the market ratios of fCash to cash. The annualizedAnchorRate\n is used to calculate a rate anchor. Since a rate anchor varies with timeToMaturity and annualizedAnchorRate\n does not, this method will return consistent values regardless of the timeToMaturity of when initialize\n markets is called. This can be helpful if a currency needs to be initialized mid quarter when it is\n newly launched."}, "id": 6867, "implemented": true, "kind": "function", "modifiers": [], "name": "_calculateOracleRate", "nodeType": "FunctionDefinition", "parameters": {"id": 6841, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6832, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 6867, "src": "15784:18:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6831, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15784:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 6834, "mutability": "mutable", "name": "underlyingCashToMarket", "nodeType": "VariableDeclaration", "scope": 6867, "src": "15812:29:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6833, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15812:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 6836, "mutability": "mutable", "name": "rateScalar", "nodeType": "VariableDeclaration", "scope": 6867, "src": "15851:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6835, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15851:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 6838, "mutability": "mutable", "name": "annualizedAnchorRate", "nodeType": "VariableDeclaration", "scope": 6867, "src": "15878:28:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6837, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "15878:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 6840, "mutability": "mutable", "name": "timeToMaturity", "nodeType": "VariableDeclaration", "scope": 6867, "src": "15916:22:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6839, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "15916:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "15774:170:29"}, "returnParameters": {"id": 6844, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6843, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 6867, "src": "15968:7:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6842, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "15968:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "15967:9:29"}, "scope": 7620, "src": "15745:571:29", "stateMutability": "pure", "virtual": false, "visibility": "internal"}, {"body": {"id": 6954, "nodeType": "Block", "src": "16794:1347:29", "statements": [{"assignments": [6880], "declarations": [{"constant": false, "id": 6880, "mutability": "mutable", "name": "longMaturity", "nodeType": "VariableDeclaration", "scope": 6954, "src": "16804:20:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6879, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16804:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6883, "initialValue": {"expression": {"id": 6881, "name": "longMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6874, "src": "16827:10:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 6882, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 51528, "src": "16827:19:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "16804:42:29"}, {"assignments": [6885], "declarations": [{"constant": false, "id": 6885, "mutability": "mutable", "name": "longRate", "nodeType": "VariableDeclaration", "scope": 6954, "src": "16856:16:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6884, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16856:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6888, "initialValue": {"expression": {"id": 6886, "name": "longMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6874, "src": "16875:10:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 6887, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 51538, "src": "16875:21:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "16856:40:29"}, {"assignments": [6890], "declarations": [{"constant": false, "id": 6890, "mutability": "mutable", "name": "newMaturity", "nodeType": "VariableDeclaration", "scope": 6954, "src": "16967:19:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6889, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16967:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6896, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6895, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 6891, "name": "longMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6874, "src": "16989:10:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 6892, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 51528, "src": "16989:19:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"expression": {"id": 6893, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19613, "src": "17011:9:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$19613_$", "typeString": "type(library Constants)"}}, "id": 6894, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 19461, "src": "17011:17:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "16989:39:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "16967:61:29"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6900, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6898, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6870, "src": "17046:13:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"id": 6899, "name": "longMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6880, "src": "17062:12:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17046:28:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "494d3a20696e746572706f6c6174696f6e206572726f72", "id": 6901, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "17076:25:29", "typeDescriptions": {"typeIdentifier": "t_stringliteral_6a0dd34aedecaa1e1d26490a08433b07ec30bfee75ad530560f22fe0683a486f", "typeString": "literal_string \"IM: interpolation error\""}, "value": "IM: interpolation error"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_6a0dd34aedecaa1e1d26490a08433b07ec30bfee75ad530560f22fe0683a486f", "typeString": "literal_string \"IM: interpolation error\""}], "id": 6897, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "17038:7:29", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 6902, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17038:64:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 6903, "nodeType": "ExpressionStatement", "src": "17038:64:29"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6906, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6904, "name": "longRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6885, "src": "17283:8:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"id": 6905, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6872, "src": "17295:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17283:21:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 6952, "nodeType": "Block", "src": "17579:556:29", "statements": [{"assignments": [6927], "declarations": [{"constant": false, "id": 6927, "mutability": "mutable", "name": "diff", "nodeType": "VariableDeclaration", "scope": 6952, "src": "17753:12:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6926, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "17753:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 6942, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6940, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6938, "name": "longMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6880, "src": "17938:12:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 6939, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6870, "src": "17953:13:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17938:28:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6935, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6933, "name": "newMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6890, "src": "17832:11:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 6934, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6870, "src": "17846:13:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17832:27:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6930, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6928, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6872, "src": "17785:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 6929, "name": "longRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6885, "src": "17797:8:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17785:20:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 6931, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "17784:22:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6932, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 52290, "src": "17784:47:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 6936, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17784:76:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6937, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 52312, "src": "17784:153:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 6941, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17784:183:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "17753:214:29"}, {"expression": {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6945, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6943, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6872, "src": "18085:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 6944, "name": "diff", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6927, "src": "18097:4:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "18085:16:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseExpression": {"hexValue": "30", "id": 6949, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "18123:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "id": 6950, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "Conditional", "src": "18085:39:29", "trueExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6948, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6946, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6872, "src": "18104:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 6947, "name": "diff", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6927, "src": "18116:4:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "18104:16:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 6878, "id": 6951, "nodeType": "Return", "src": "18078:46:29"}]}, "id": 6953, "nodeType": "IfStatement", "src": "17279:856:29", "trueBody": {"id": 6925, "nodeType": "Block", "src": "17306:267:29", "statements": [{"expression": {"arguments": [{"id": 6922, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6872, "src": "17552:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6919, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6917, "name": "longMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6880, "src": "17497:12:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 6918, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6870, "src": "17512:13:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17497:28:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6914, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6912, "name": "newMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6890, "src": "17391:11:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 6913, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6870, "src": "17405:13:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17391:27:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 6909, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 6907, "name": "longRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6885, "src": "17344:8:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 6908, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6872, "src": "17355:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17344:20:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 6910, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "17343:22:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6911, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 52290, "src": "17343:47:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 6915, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17343:76:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6916, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 52312, "src": "17343:153:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 6920, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17343:183:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 6921, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 52234, "src": "17343:208:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 6923, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17343:219:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 6878, "id": 6924, "nodeType": "Return", "src": "17320:242:29"}]}}]}, "documentation": {"id": 6868, "nodeType": "StructuredDocumentation", "src": "16322:296:29", "text": "@notice Returns the linear interpolation between two market rates. The formula is\n slope = (longMarket.oracleRate - shortMarket.oracleRate) / (longMarket.maturity - shortMarket.maturity)\n interpolatedRate = slope * (assetMaturity - shortMarket.maturity) + shortMarket.oracleRate"}, "id": 6955, "implemented": true, "kind": "function", "modifiers": [], "name": "_interpolateFutureRate", "nodeType": "FunctionDefinition", "parameters": {"id": 6875, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6870, "mutability": "mutable", "name": "shortMaturity", "nodeType": "VariableDeclaration", "scope": 6955, "src": "16664:21:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6869, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16664:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 6872, "mutability": "mutable", "name": "shortRate", "nodeType": "VariableDeclaration", "scope": 6955, "src": "16695:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6871, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16695:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 6874, "mutability": "mutable", "name": "longMarket", "nodeType": "VariableDeclaration", "scope": 6955, "src": "16722:34:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 6873, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51541, "src": "16722:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "src": "16654:108:29"}, "returnParameters": {"id": 6878, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6877, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 6955, "src": "16785:7:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6876, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16785:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "16784:9:29"}, "scope": 7620, "src": "16623:1518:29", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 7015, "nodeType": "Block", "src": "18433:766:29", "statements": [{"assignments": [6972], "declarations": [{"constant": false, "id": 6972, "mutability": "mutable", "name": "assetCashToMarket", "nodeType": "VariableDeclaration", "scope": 7015, "src": "18527:24:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6971, "name": "int256", "nodeType": "ElementaryTypeName", "src": "18527:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 6981, "initialValue": {"arguments": [{"expression": {"id": 6978, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19613, "src": "18610:9:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$19613_$", "typeString": "type(library Constants)"}}, "id": 6979, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "DEPOSIT_PERCENT_BASIS", "nodeType": "MemberAccess", "referencedDeclaration": 19579, "src": "18610:31:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"arguments": [{"id": 6975, "name": "depositShare", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6960, "src": "18592:12:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 6973, "name": "netAssetCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6958, "src": "18566:21:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6974, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 40672, "src": "18566:25:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 6976, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18566:39:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6977, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 40702, "src": "18566:43:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 6980, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18566:76:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "18527:115:29"}, {"expression": {"id": 6986, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 6982, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6964, "src": "18652:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 6984, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalAssetCash", "nodeType": "MemberAccess", "referencedDeclaration": 51532, "src": "18652:24:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 6985, "name": "assetCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6972, "src": "18679:17:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "18652:44:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6987, "nodeType": "ExpressionStatement", "src": "18652:44:29"}, {"expression": {"id": 6992, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 6988, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6964, "src": "18706:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 6990, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalLiquidity", "nodeType": "MemberAccess", "referencedDeclaration": 51534, "src": "18706:24:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 6991, "name": "assetCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6972, "src": "18733:17:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "18706:44:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 6993, "nodeType": "ExpressionStatement", "src": "18706:44:29"}, {"expression": {"arguments": [{"expression": {"expression": {"id": 6999, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6966, "src": "18883:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7000, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 51418, "src": "18883:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$51511_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7001, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 51504, "src": "18883:27:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 7002, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6964, "src": "18924:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7003, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 51528, "src": "18924:18:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7004, "name": "assetType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6962, "src": "18956:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7005, "name": "assetCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6972, "src": "19017:17:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 6994, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6966, "src": "18839:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 6997, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 51420, "src": "18839:21:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$51465_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 6998, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "addAsset", "nodeType": "MemberAccess", "referencedDeclaration": 33224, "src": "18839:30:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PortfolioState_$51465_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$returns$__$bound_to$_t_struct$_PortfolioState_$51465_memory_ptr_$", "typeString": "function (struct PortfolioState memory,uint256,uint256,uint256,int256) pure"}}, "id": 7006, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18839:205:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7007, "nodeType": "ExpressionStatement", "src": "18839:205:29"}, {"expression": {"arguments": [{"id": 7012, "name": "assetCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6972, "src": "19174:17:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"expression": {"id": 7008, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6966, "src": "19127:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7009, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 51418, "src": "19127:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$51511_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7010, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "assetRate", "nodeType": "MemberAccess", "referencedDeclaration": 51508, "src": "19127:26:29", "typeDescriptions": {"typeIdentifier": "t_struct$_AssetRateParameters_$51502_memory_ptr", "typeString": "struct AssetRateParameters memory"}}, "id": 7011, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertToUnderlying", "nodeType": "MemberAccess", "referencedDeclaration": 26110, "src": "19127:46:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_AssetRateParameters_$51502_memory_ptr_$_t_int256_$returns$_t_int256_$bound_to$_t_struct$_AssetRateParameters_$51502_memory_ptr_$", "typeString": "function (struct AssetRateParameters memory,int256) pure returns (int256)"}}, "id": 7013, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19127:65:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 6970, "id": 7014, "nodeType": "Return", "src": "19120:72:29"}]}, "documentation": {"id": 6956, "nodeType": "StructuredDocumentation", "src": "18147:40:29", "text": "@dev This is here to clear the stack"}, "id": 7016, "implemented": true, "kind": "function", "modifiers": [], "name": "_setLiquidityAmount", "nodeType": "FunctionDefinition", "parameters": {"id": 6967, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6958, "mutability": "mutable", "name": "netAssetCashAvailable", "nodeType": "VariableDeclaration", "scope": 7016, "src": "18230:28:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6957, "name": "int256", "nodeType": "ElementaryTypeName", "src": "18230:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 6960, "mutability": "mutable", "name": "depositShare", "nodeType": "VariableDeclaration", "scope": 7016, "src": "18268:19:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6959, "name": "int256", "nodeType": "ElementaryTypeName", "src": "18268:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 6962, "mutability": "mutable", "name": "assetType", "nodeType": "VariableDeclaration", "scope": 7016, "src": "18297:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 6961, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "18297:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 6964, "mutability": "mutable", "name": "newMarket", "nodeType": "VariableDeclaration", "scope": 7016, "src": "18324:33:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 6963, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51541, "src": "18324:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 6966, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 7016, "src": "18367:29:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 6965, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51431, "src": "18367:15:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}], "src": "18220:182:29"}, "returnParameters": {"id": 6970, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 6969, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 7016, "src": "18425:6:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 6968, "name": "int256", "nodeType": "ElementaryTypeName", "src": "18425:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "18424:8:29"}, "scope": 7620, "src": "18192:1007:29", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 7038, "nodeType": "Block", "src": "19786:134:29", "statements": [{"expression": {"arguments": [{"arguments": [{"id": 7034, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7021, "src": "19901:10:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 7031, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19613, "src": "19872:9:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$19613_$", "typeString": "type(library Constants)"}}, "id": 7032, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RATE_PRECISION", "nodeType": "MemberAccess", "referencedDeclaration": 19504, "src": "19872:24:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7033, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 40728, "src": "19872:28:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7035, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19872:40:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"arguments": [{"id": 7028, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7021, "src": "19843:10:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 7026, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7019, "src": "19803:22:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7027, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 40672, "src": "19803:39:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7029, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19803:51:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7030, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 40702, "src": "19803:68:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7036, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19803:110:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 7025, "id": 7037, "nodeType": "Return", "src": "19796:117:29"}]}, "documentation": {"id": 7017, "nodeType": "StructuredDocumentation", "src": "19205:70:29", "text": "@notice Calculates the fCash amount given the cash and proportion:"}, "id": 7039, "implemented": true, "kind": "function", "modifiers": [], "name": "_calculatefCashAmountFromProportion", "nodeType": "FunctionDefinition", "parameters": {"id": 7022, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7019, "mutability": "mutable", "name": "underlyingCashToMarket", "nodeType": "VariableDeclaration", "scope": 7039, "src": "19693:29:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7018, "name": "int256", "nodeType": "ElementaryTypeName", "src": "19693:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 7021, "mutability": "mutable", "name": "proportion", "nodeType": "VariableDeclaration", "scope": 7039, "src": "19732:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7020, "name": "int256", "nodeType": "ElementaryTypeName", "src": "19732:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "19683:72:29"}, "returnParameters": {"id": 7025, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7024, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 7039, "src": "19778:6:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7023, "name": "int256", "nodeType": "ElementaryTypeName", "src": "19778:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "19777:8:29"}, "scope": 7620, "src": "19639:281:29", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 7154, "nodeType": "Block", "src": "20304:1542:29", "statements": [{"assignments": [7046], "declarations": [{"constant": false, "id": 7046, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 7154, "src": "20314:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7045, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "20314:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7049, "initialValue": {"expression": {"id": 7047, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "20334:5:29", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 7048, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "20334:15:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "20314:35:29"}, {"assignments": [7051], "declarations": [{"constant": false, "id": 7051, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 7154, "src": "20359:29:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 7050, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51431, "src": "20359:15:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}], "id": 7052, "nodeType": "VariableDeclarationStatement", "src": "20359:29:29"}, {"expression": {"arguments": [{"id": 7056, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7042, "src": "20433:10:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 7053, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7051, "src": "20398:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7055, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadNTokenPortfolioStateful", "nodeType": "MemberAccess", "referencedDeclaration": 31597, "src": "20398:34:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$51431_memory_ptr_$_t_uint16_$returns$__$bound_to$_t_struct$_nTokenPortfolio_$51431_memory_ptr_$", "typeString": "function (struct nTokenPortfolio memory,uint16)"}}, "id": 7057, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20398:46:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7058, "nodeType": "ExpressionStatement", "src": "20398:46:29"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7065, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"expression": {"expression": {"id": 7060, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7051, "src": "20462:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7061, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 51420, "src": "20462:21:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$51465_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 7062, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 51457, "src": "20462:34:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$51524_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 7063, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "20462:41:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 7064, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "20506:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "20462:45:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "4e6f206e546f6b656e20617373657473", "id": 7066, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "20509:18:29", "typeDescriptions": {"typeIdentifier": "t_stringliteral_3f454b94fcbc66ce724be53e6bee2bef2feb299f8e10b25dd5701c1f07cf7e69", "typeString": "literal_string \"No nToken assets\""}, "value": "No nToken assets"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_3f454b94fcbc66ce724be53e6bee2bef2feb299f8e10b25dd5701c1f07cf7e69", "typeString": "literal_string \"No nToken assets\""}], "id": 7059, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "20454:7:29", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7067, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20454:74:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7068, "nodeType": "ExpressionStatement", "src": "20454:74:29"}, {"assignments": [7070], "declarations": [{"constant": false, "id": 7070, "mutability": "mutable", "name": "referenceTime", "nodeType": "VariableDeclaration", "scope": 7154, "src": "20606:21:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7069, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "20606:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7075, "initialValue": {"arguments": [{"id": 7073, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7046, "src": "20656:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7071, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 28547, "src": "20630:8:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$28547_$", "typeString": "type(library DateTime)"}}, "id": 7072, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 27940, "src": "20630:25:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 7074, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20630:36:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "20606:60:29"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7080, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 7077, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7051, "src": "20684:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7078, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 51426, "src": "20684:26:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"id": 7079, "name": "referenceTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7070, "src": "20714:13:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "20684:43:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "4d75737420696e697469616c697a65206d61726b657473", "id": 7081, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "20729:25:29", "typeDescriptions": {"typeIdentifier": "t_stringliteral_2d3ce58f5f1882899a483daf0da39579536f02aba47b3d464458c1db805c3796", "typeString": "literal_string \"Must initialize markets\""}, "value": "Must initialize markets"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_2d3ce58f5f1882899a483daf0da39579536f02aba47b3d464458c1db805c3796", "typeString": "literal_string \"Must initialize markets\""}], "id": 7076, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "20676:7:29", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7082, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20676:79:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7083, "nodeType": "ExpressionStatement", "src": "20676:79:29"}, {"assignments": [7085], "declarations": [{"constant": false, "id": 7085, "mutability": "mutable", "name": "minSweepCashTime", "nodeType": "VariableDeclaration", "scope": 7154, "src": "20841:24:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7084, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "20841:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7103, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7101, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"arguments": [{"baseExpression": {"expression": {"id": 7093, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7051, "src": "20942:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7094, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "parameters", "nodeType": "MemberAccess", "referencedDeclaration": 51428, "src": "20942:17:29", "typeDescriptions": {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}}, "id": 7097, "indexExpression": {"expression": {"id": 7095, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19613, "src": "20960:9:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$19613_$", "typeString": "type(library Constants)"}}, "id": 7096, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RESIDUAL_PURCHASE_TIME_BUFFER", "nodeType": "MemberAccess", "referencedDeclaration": 19588, "src": "20960:39:29", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "20942:58:29", "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 7092, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "20936:5:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 7091, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "20936:5:29", "typeDescriptions": {}}}, "id": 7098, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20936:65:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 7090, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "20928:7:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 7089, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "20928:7:29", "typeDescriptions": {}}}, "id": 7099, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20928:74:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"hexValue": "31", "id": 7100, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "21005:7:29", "subdenomination": "hours", "typeDescriptions": {"typeIdentifier": "t_rational_3600_by_1", "typeString": "int_const 3600"}, "value": "1"}, "src": "20928:84:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 7086, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7051, "src": "20880:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7087, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 51426, "src": "20880:26:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7088, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 52234, "src": "20880:30:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 7102, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20880:146:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "20841:185:29"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7107, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7105, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7046, "src": "21044:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 7106, "name": "minSweepCashTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7085, "src": "21056:16:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "21044:28:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "496e76616c696420737765657020636173682074696d65", "id": 7108, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "21074:25:29", "typeDescriptions": {"typeIdentifier": "t_stringliteral_0da3c3ff12aa49d5aa15cc95f721ced561aef8adc1df935610ef80f728c1bff6", "typeString": "literal_string \"Invalid sweep cash time\""}, "value": "Invalid sweep cash time"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_0da3c3ff12aa49d5aa15cc95f721ced561aef8adc1df935610ef80f728c1bff6", "typeString": "literal_string \"Invalid sweep cash time\""}], "id": 7104, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "21036:7:29", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7109, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21036:64:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7110, "nodeType": "ExpressionStatement", "src": "21036:64:29"}, {"assignments": [7112], "declarations": [{"constant": false, "id": 7112, "mutability": "mutable", "name": "assetCashWithholding", "nodeType": "VariableDeclaration", "scope": 7154, "src": "21111:27:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7111, "name": "int256", "nodeType": "ElementaryTypeName", "src": "21111:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7122, "initialValue": {"arguments": [{"id": 7114, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7051, "src": "21205:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"arguments": [{"hexValue": "30", "id": 7118, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "21252:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}], "id": 7117, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "21229:22:29", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (struct MarketParameters memory[] memory)"}, "typeName": {"baseType": {"id": 7115, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51541, "src": "21233:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 7116, "nodeType": "ArrayTypeName", "src": "21233:18:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}}, "id": 7119, "isConstant": false, "isLValue": false, "isPure": true, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21229:25:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"id": 7120, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7046, "src": "21328:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7113, "name": "_getNTokenNegativefCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6607, "src": "21153:34:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_nTokenPortfolio_$51431_memory_ptr_$_t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr_$_t_uint256_$returns$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,struct MarketParameters memory[] memory,uint256) view returns (int256)"}}, "id": 7121, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21153:198:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "21111:240:29"}, {"assignments": [7124], "declarations": [{"constant": false, "id": 7124, "mutability": "mutable", "name": "cashIntoMarkets", "nodeType": "VariableDeclaration", "scope": 7154, "src": "21362:22:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7123, "name": "int256", "nodeType": "ElementaryTypeName", "src": "21362:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7130, "initialValue": {"arguments": [{"id": 7128, "name": "assetCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7112, "src": "21415:20:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 7125, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7051, "src": "21387:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7126, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 51424, "src": "21387:18:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7127, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subNoNeg", "nodeType": "MemberAccess", "referencedDeclaration": 40811, "src": "21387:27:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7129, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21387:49:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "21362:74:29"}, {"expression": {"arguments": [{"expression": {"id": 7134, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7051, "src": "21501:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7135, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 51430, "src": "21501:19:29", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"expression": {"id": 7136, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7051, "src": "21534:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7137, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 51418, "src": "21534:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$51511_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7138, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 51504, "src": "21534:27:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 7139, "name": "assetCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7112, "src": "21575:20:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 7131, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 21941, "src": "21446:14:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BalanceHandler_$21941_$", "typeString": "type(library BalanceHandler)"}}, "id": 7133, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBalanceStorageForNToken", "nodeType": "MemberAccess", "referencedDeclaration": 21585, "src": "21446:41:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_int256_$returns$__$", "typeString": "function (address,uint256,int256)"}}, "id": 7140, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21446:159:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7141, "nodeType": "ExpressionStatement", "src": "21446:159:29"}, {"expression": {"arguments": [{"id": 7145, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7042, "src": "21747:10:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 7146, "name": "cashIntoMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7124, "src": "21759:15:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 7142, "name": "nTokenMintAction", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11341, "src": "21719:16:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenMintAction_$11341_$", "typeString": "type(library nTokenMintAction)"}}, "id": 7144, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "nTokenMint", "nodeType": "MemberAccess", "referencedDeclaration": 10798, "src": "21719:27:29", "typeDescriptions": {"typeIdentifier": "t_function_delegatecall_nonpayable$_t_uint16_$_t_int256_$returns$_t_int256_$", "typeString": "function (uint16,int256) returns (int256)"}}, "id": 7147, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21719:56:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7148, "nodeType": "ExpressionStatement", "src": "21719:56:29"}, {"eventCall": {"arguments": [{"id": 7150, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7042, "src": "21811:10:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 7151, "name": "cashIntoMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7124, "src": "21823:15:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 7149, "name": "SweepCashIntoMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6142, "src": "21790:20:29", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_uint16_$_t_int256_$returns$__$", "typeString": "function (uint16,int256)"}}, "id": 7152, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21790:49:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7153, "nodeType": "EmitStatement", "src": "21785:54:29"}]}, "documentation": {"id": 7040, "nodeType": "StructuredDocumentation", "src": "19926:315:29", "text": "@notice Sweeps nToken cash balance into markets after accounting for cash withholding. Can be\n done after fCash residuals are purchased to ensure that markets have maximum liquidity.\n @param currencyId currency of markets to initialize\n @dev emit:CashSweepIntoMarkets\n @dev auth:none"}, "functionSelector": "bb6dd58e", "id": 7155, "implemented": true, "kind": "function", "modifiers": [], "name": "sweepCashIntoMarkets", "nodeType": "FunctionDefinition", "parameters": {"id": 7043, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7042, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 7155, "src": "20276:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 7041, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "20276:6:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}], "src": "20275:19:29"}, "returnParameters": {"id": 7044, "nodeType": "ParameterList", "parameters": [], "src": "20304:0:29"}, "scope": 7620, "src": "20246:1600:29", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 7574, "nodeType": "Block", "src": "22220:9788:29", "statements": [{"assignments": [7164], "declarations": [{"constant": false, "id": 7164, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 7574, "src": "22230:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7163, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "22230:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7167, "initialValue": {"expression": {"id": 7165, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "22250:5:29", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 7166, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "22250:15:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "22230:35:29"}, {"assignments": [7169], "declarations": [{"constant": false, "id": 7169, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 7574, "src": "22275:29:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 7168, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51431, "src": "22275:15:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}], "id": 7170, "nodeType": "VariableDeclarationStatement", "src": "22275:29:29"}, {"expression": {"arguments": [{"id": 7174, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7158, "src": "22349:10:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 7171, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "22314:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7173, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadNTokenPortfolioStateful", "nodeType": "MemberAccess", "referencedDeclaration": 31597, "src": "22314:34:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$51431_memory_ptr_$_t_uint16_$returns$__$bound_to$_t_struct$_nTokenPortfolio_$51431_memory_ptr_$", "typeString": "function (struct nTokenPortfolio memory,uint16)"}}, "id": 7175, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22314:46:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7176, "nodeType": "ExpressionStatement", "src": "22314:46:29"}, {"assignments": [7180], "declarations": [{"constant": false, "id": 7180, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 7574, "src": "22370:41:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 7178, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51541, "src": "22370:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 7179, "nodeType": "ArrayTypeName", "src": "22370:18:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}], "id": 7188, "initialValue": {"arguments": [{"expression": {"expression": {"id": 7184, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "22449:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7185, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 51418, "src": "22449:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$51511_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7186, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 51506, "src": "22449:31:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7183, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "22426:22:29", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (struct MarketParameters memory[] memory)"}, "typeName": {"baseType": {"id": 7181, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51541, "src": "22430:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 7182, "nodeType": "ArrayTypeName", "src": "22430:18:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}}, "id": 7187, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22426:55:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "22370:111:29"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7194, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"expression": {"id": 7190, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "22579:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7191, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 51418, "src": "22579:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$51511_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7192, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 51506, "src": "22579:31:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 7193, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "22614:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "22579:36:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "494d3a206e6f206d61726b65747320746f20696e6974", "id": 7195, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "22617:24:29", "typeDescriptions": {"typeIdentifier": "t_stringliteral_eced7728e7c12743e7eaef0993c325956a61b4ad601efe4693df3f1cccc9396b", "typeString": "literal_string \"IM: no markets to init\""}, "value": "IM: no markets to init"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_eced7728e7c12743e7eaef0993c325956a61b4ad601efe4693df3f1cccc9396b", "typeString": "literal_string \"IM: no markets to init\""}], "id": 7189, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "22571:7:29", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7196, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22571:71:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7197, "nodeType": "ExpressionStatement", "src": "22571:71:29"}, {"condition": {"id": 7198, "name": "isFirstInit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7160, "src": "22738:11:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 7210, "nodeType": "IfStatement", "src": "22734:119:29", "trueBody": {"id": 7209, "nodeType": "Block", "src": "22751:102:29", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7205, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"expression": {"expression": {"id": 7200, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "22773:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7201, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 51420, "src": "22773:21:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$51465_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 7202, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 51457, "src": "22773:34:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$51524_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 7203, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "22773:41:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 7204, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "22818:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "22773:46:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "494d3a206e6f7420666972737420696e6974", "id": 7206, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "22821:20:29", "typeDescriptions": {"typeIdentifier": "t_stringliteral_bbcaa2bde0172b9004792c3d4299c962eece96a494ac56d615b00b378fa74c56", "typeString": "literal_string \"IM: not first init\""}, "value": "IM: not first init"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_bbcaa2bde0172b9004792c3d4299c962eece96a494ac56d615b00b378fa74c56", "typeString": "literal_string \"IM: not first init\""}], "id": 7199, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "22765:7:29", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7207, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22765:77:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7208, "nodeType": "ExpressionStatement", "src": "22765:77:29"}]}}, {"assignments": [7212], "declarations": [{"constant": false, "id": 7212, "mutability": "mutable", "name": "netAssetCashAvailable", "nodeType": "VariableDeclaration", "scope": 7574, "src": "22863:28:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7211, "name": "int256", "nodeType": "ElementaryTypeName", "src": "22863:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7220, "initialValue": {"arguments": [{"id": 7214, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "22939:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 7215, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7180, "src": "22959:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"id": 7216, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7164, "src": "22988:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7217, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7158, "src": "23011:10:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 7218, "name": "isFirstInit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7160, "src": "23035:11:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 7213, "name": "_calculateNetAssetCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6694, "src": "22894:31:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$51431_memory_ptr_$_t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$_t_bool_$returns$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,struct MarketParameters memory[] memory,uint256,uint256,bool) returns (int256)"}}, "id": 7219, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22894:162:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "22863:193:29"}, {"assignments": [7222], "declarations": [{"constant": false, "id": 7222, "mutability": "mutable", "name": "parameters", "nodeType": "VariableDeclaration", "scope": 7574, "src": "23067:38:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}, "typeName": {"id": 7221, "name": "GovernanceParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 6155, "src": "23067:20:29", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_storage_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}}, "visibility": "internal"}], "id": 7229, "initialValue": {"arguments": [{"id": 7224, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7158, "src": "23145:10:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"expression": {"id": 7225, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "23157:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7226, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 51418, "src": "23157:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$51511_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7227, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 51506, "src": "23157:31:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7223, "name": "_getGovernanceParameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6196, "src": "23120:24:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_struct$_GovernanceParameters_$6155_memory_ptr_$", "typeString": "function (uint256,uint256) view returns (struct InitializeMarketsAction.GovernanceParameters memory)"}}, "id": 7228, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23120:69:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "nodeType": "VariableDeclarationStatement", "src": "23067:122:29"}, {"assignments": [7231], "declarations": [{"constant": false, "id": 7231, "mutability": "mutable", "name": "newMarket", "nodeType": "VariableDeclaration", "scope": 7574, "src": "23200:33:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 7230, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51541, "src": "23200:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "id": 7232, "nodeType": "VariableDeclarationStatement", "src": "23200:33:29"}, {"assignments": [7234], "declarations": [{"constant": false, "id": 7234, "mutability": "mutable", "name": "oracleRate", "nodeType": "VariableDeclaration", "scope": 7574, "src": "23296:18:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7233, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23296:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7235, "nodeType": "VariableDeclarationStatement", "src": "23296:18:29"}, {"body": {"id": 7536, "nodeType": "Block", "src": "23386:8005:29", "statements": [{"expression": {"id": 7263, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7248, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7231, "src": "23444:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7250, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 51528, "src": "23444:18:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7260, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7258, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "23548:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"hexValue": "31", "id": 7259, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "23552:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "23548:5:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7256, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 28547, "src": "23523:8:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$28547_$", "typeString": "type(library DateTime)"}}, "id": 7257, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getTradedMarket", "nodeType": "MemberAccess", "referencedDeclaration": 28036, "src": "23523:24:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 7261, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23523:31:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"id": 7253, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7164, "src": "23491:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7251, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 28547, "src": "23465:8:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$28547_$", "typeString": "type(library DateTime)"}}, "id": 7252, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 27940, "src": "23465:25:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 7254, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23465:36:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7255, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 52234, "src": "23465:40:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 7262, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23465:103:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "23444:124:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7264, "nodeType": "ExpressionStatement", "src": "23444:124:29"}, {"assignments": [7266], "declarations": [{"constant": false, "id": 7266, "mutability": "mutable", "name": "underlyingCashToMarket", "nodeType": "VariableDeclaration", "scope": 7536, "src": "23583:29:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7265, "name": "int256", "nodeType": "ElementaryTypeName", "src": "23583:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7280, "initialValue": {"arguments": [{"id": 7268, "name": "netAssetCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7212, "src": "23672:21:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"baseExpression": {"expression": {"id": 7269, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7222, "src": "23715:10:29", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 7270, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "depositShares", "nodeType": "MemberAccess", "referencedDeclaration": 6145, "src": "23715:24:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 7272, "indexExpression": {"id": 7271, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "23740:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "23715:27:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7276, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 7273, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19613, "src": "23764:9:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$19613_$", "typeString": "type(library Constants)"}}, "id": 7274, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "MIN_LIQUIDITY_TOKEN_INDEX", "nodeType": "MemberAccess", "referencedDeclaration": 19546, "src": "23764:35:29", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"id": 7275, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "23802:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "23764:39:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7277, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7231, "src": "23855:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 7278, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "23886:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}], "id": 7267, "name": "_setLiquidityAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7016, "src": "23631:19:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$_t_uint256_$_t_struct$_MarketParameters_$51541_memory_ptr_$_t_struct$_nTokenPortfolio_$51431_memory_ptr_$returns$_t_int256_$", "typeString": "function (int256,int256,uint256,struct MarketParameters memory,struct nTokenPortfolio memory) pure returns (int256)"}}, "id": 7279, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23631:279:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "23583:327:29"}, {"assignments": [7282], "declarations": [{"constant": false, "id": 7282, "mutability": "mutable", "name": "timeToMaturity", "nodeType": "VariableDeclaration", "scope": 7536, "src": "23925:22:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7281, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23925:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7288, "initialValue": {"arguments": [{"id": 7286, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7164, "src": "23973:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 7283, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7231, "src": "23950:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7284, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 51528, "src": "23950:18:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7285, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 52256, "src": "23950:22:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 7287, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23950:33:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "23925:58:29"}, {"assignments": [7290], "declarations": [{"constant": false, "id": 7290, "mutability": "mutable", "name": "rateScalar", "nodeType": "VariableDeclaration", "scope": 7536, "src": "23997:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7289, "name": "int256", "nodeType": "ElementaryTypeName", "src": "23997:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7299, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7296, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7294, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "24048:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"hexValue": "31", "id": 7295, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "24052:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "24048:5:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7297, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7282, "src": "24055:14:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 7291, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "24017:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7292, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 51418, "src": "24017:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$51511_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7293, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "getRateScalar", "nodeType": "MemberAccess", "referencedDeclaration": 26852, "src": "24017:30:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_CashGroupParameters_$51511_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_int256_$bound_to$_t_struct$_CashGroupParameters_$51511_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory,uint256,uint256) pure returns (int256)"}}, "id": 7298, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "24017:53:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "23997:73:29"}, {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 7330, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 7318, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 7310, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7300, "name": "isFirstInit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7160, "src": "24619:11:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 7308, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7303, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7301, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "24741:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "31", "id": 7302, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "24746:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "24741:6:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7307, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 7304, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7180, "src": "24751:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 7305, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "24751:22:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "32", "id": 7306, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "24777:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "src": "24751:27:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "24741:37:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 7309, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "24740:39:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "24619:160:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7316, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7311, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "24885:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"expression": {"expression": {"expression": {"id": 7312, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "24890:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7313, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 51420, "src": "24890:21:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$51465_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 7314, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 51457, "src": "24890:34:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$51524_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 7315, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "24890:41:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "24885:46:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 7317, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "24884:48:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "24619:313:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 7328, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7321, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7319, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "25065:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "31", "id": 7320, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "25070:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "25065:6:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7327, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"baseExpression": {"id": 7322, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7180, "src": "25075:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 7324, "indexExpression": {"hexValue": "32", "id": 7323, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "25091:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "25075:18:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7325, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 51538, "src": "25075:29:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 7326, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "25108:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "25075:34:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "25065:44:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 7329, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "25064:46:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "24619:491:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 7521, "nodeType": "Block", "src": "26068:5129:29", "statements": [{"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7376, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7374, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "26330:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 7375, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "26335:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "26330:6:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7387, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7385, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "26610:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "31", "id": 7386, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "26615:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "26610:6:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 7422, "nodeType": "Block", "src": "27320:1479:29", "statements": [{"assignments": [7400], "declarations": [{"constant": false, "id": 7400, "mutability": "mutable", "name": "shortMarketMaturity", "nodeType": "VariableDeclaration", "scope": 7422, "src": "28103:27:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7399, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "28103:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7411, "initialValue": {"arguments": [{"arguments": [{"id": 7408, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "28223:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7406, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 28547, "src": "28198:8:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$28547_$", "typeString": "type(library DateTime)"}}, "id": 7407, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getTradedMarket", "nodeType": "MemberAccess", "referencedDeclaration": 28036, "src": "28198:24:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 7409, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "28198:27:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"id": 7403, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7164, "src": "28183:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7401, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 28547, "src": "28157:8:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$28547_$", "typeString": "type(library DateTime)"}}, "id": 7402, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 27940, "src": "28157:25:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 7404, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "28157:36:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7405, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 52234, "src": "28157:40:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 7410, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "28157:69:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "28103:123:29"}, {"expression": {"id": 7420, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7412, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7234, "src": "28248:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7414, "name": "shortMarketMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7400, "src": "28309:19:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7415, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7234, "src": "28626:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"baseExpression": {"id": 7416, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7180, "src": "28740:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 7418, "indexExpression": {"id": 7417, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "28756:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "28740:18:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}], "id": 7413, "name": "_interpolateFutureRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6955, "src": "28261:22:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_struct$_MarketParameters_$51541_memory_ptr_$returns$_t_uint256_$", "typeString": "function (uint256,uint256,struct MarketParameters memory) pure returns (uint256)"}}, "id": 7419, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "28261:519:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "28248:532:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7421, "nodeType": "ExpressionStatement", "src": "28248:532:29"}]}, "id": 7423, "nodeType": "IfStatement", "src": "26606:2193:29", "trueBody": {"id": 7398, "nodeType": "Block", "src": "26618:696:29", "statements": [{"expression": {"id": 7396, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7388, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7234, "src": "27134:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7390, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7180, "src": "27196:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"arguments": [{"id": 7393, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7164, "src": "27263:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7391, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 28547, "src": "27237:8:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$28547_$", "typeString": "type(library DateTime)"}}, "id": 7392, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 27940, "src": "27237:25:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 7394, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27237:36:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7389, "name": "_getSixMonthImpliedRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6740, "src": "27147:23:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (struct MarketParameters memory[] memory,uint256) pure returns (uint256)"}}, "id": 7395, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27147:148:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "27134:161:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7397, "nodeType": "ExpressionStatement", "src": "27134:161:29"}]}}, "id": 7424, "nodeType": "IfStatement", "src": "26326:2473:29", "trueBody": {"id": 7384, "nodeType": "Block", "src": "26338:262:29", "statements": [{"expression": {"id": 7382, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7377, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7234, "src": "26539:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"baseExpression": {"id": 7378, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7180, "src": "26552:15:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$51541_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 7380, "indexExpression": {"hexValue": "31", "id": 7379, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "26568:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "26552:18:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7381, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 51538, "src": "26552:29:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "26539:42:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7383, "nodeType": "ExpressionStatement", "src": "26539:42:29"}]}}, {"assignments": [7426], "declarations": [{"constant": false, "id": 7426, "mutability": "mutable", "name": "proportion", "nodeType": "VariableDeclaration", "scope": 7521, "src": "29113:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7425, "name": "int256", "nodeType": "ElementaryTypeName", "src": "29113:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7439, "initialValue": {"arguments": [{"id": 7428, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7234, "src": "29207:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7429, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7282, "src": "29243:14:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7430, "name": "rateScalar", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7290, "src": "29283:10:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"arguments": [{"baseExpression": {"expression": {"id": 7433, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7222, "src": "29327:10:29", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 7434, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "annualizedAnchorRates", "nodeType": "MemberAccess", "referencedDeclaration": 6151, "src": "29327:32:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 7436, "indexExpression": {"id": 7435, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "29360:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "29327:35:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 7432, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "29319:7:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 7431, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "29319:7:29", "typeDescriptions": {}}}, "id": 7437, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "29319:44:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7427, "name": "_getProportionFromOracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6829, "src": "29153:28:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_int256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (uint256,uint256,int256,uint256) pure returns (int256)"}}, "id": 7438, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "29153:264:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "29113:304:29"}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 7445, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7440, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7426, "src": "29905:10:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"baseExpression": {"expression": {"id": 7441, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7222, "src": "29918:10:29", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 7442, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "leverageThresholds", "nodeType": "MemberAccess", "referencedDeclaration": 6148, "src": "29918:29:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 7444, "indexExpression": {"id": 7443, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "29948:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "29918:32:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "29905:45:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 7496, "nodeType": "Block", "src": "30581:135:29", "statements": [{"expression": {"id": 7494, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7487, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7231, "src": "30603:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7489, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 51530, "src": "30603:20:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7491, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7266, "src": "30662:22:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7492, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7426, "src": "30686:10:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 7490, "name": "_calculatefCashAmountFromProportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7039, "src": "30626:35:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7493, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "30626:71:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "30603:94:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7495, "nodeType": "ExpressionStatement", "src": "30603:94:29"}]}, "id": 7497, "nodeType": "IfStatement", "src": "29901:815:29", "trueBody": {"id": 7486, "nodeType": "Block", "src": "29952:623:29", "statements": [{"expression": {"id": 7451, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7446, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7426, "src": "29974:10:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"baseExpression": {"expression": {"id": 7447, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7222, "src": "29987:10:29", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 7448, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "leverageThresholds", "nodeType": "MemberAccess", "referencedDeclaration": 6148, "src": "29987:29:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 7450, "indexExpression": {"id": 7449, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "30017:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "29987:32:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "29974:45:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7452, "nodeType": "ExpressionStatement", "src": "29974:45:29"}, {"expression": {"id": 7460, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7453, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7231, "src": "30041:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7455, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 51530, "src": "30041:20:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7457, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7266, "src": "30100:22:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7458, "name": "proportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7426, "src": "30124:10:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 7456, "name": "_calculatefCashAmountFromProportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7039, "src": "30064:35:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7459, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "30064:71:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "30041:94:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7461, "nodeType": "ExpressionStatement", "src": "30041:94:29"}, {"expression": {"id": 7477, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 7462, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7234, "src": "30158:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"id": 7464, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7231, "src": "30217:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7465, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 51530, "src": "30217:20:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7466, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7266, "src": "30263:22:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7467, "name": "rateScalar", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7290, "src": "30311:10:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"arguments": [{"baseExpression": {"expression": {"id": 7470, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7222, "src": "30355:10:29", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 7471, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "annualizedAnchorRates", "nodeType": "MemberAccess", "referencedDeclaration": 6151, "src": "30355:32:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 7473, "indexExpression": {"id": 7472, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "30388:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "30355:35:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 7469, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "30347:7:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 7468, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "30347:7:29", "typeDescriptions": {}}}, "id": 7474, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "30347:44:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7475, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7282, "src": "30449:14:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7463, "name": "_calculateOracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6867, "src": "30171:20:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$_t_int256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (int256,int256,int256,uint256,uint256) pure returns (uint256)"}}, "id": 7476, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "30171:314:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "30158:327:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7478, "nodeType": "ExpressionStatement", "src": "30158:327:29"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7482, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7480, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7234, "src": "30516:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 7481, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "30530:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "30516:15:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "4f7261636c652072617465206f766572666c6f77", "id": 7483, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "30533:22:29", "typeDescriptions": {"typeIdentifier": "t_stringliteral_23d0a49e299abba1ef8dfb174e16735ce5b23ca44b6c0498417f6fe3d740d7b1", "typeString": "literal_string \"Oracle rate overflow\""}, "value": "Oracle rate overflow"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_23d0a49e299abba1ef8dfb174e16735ce5b23ca44b6c0498417f6fe3d740d7b1", "typeString": "literal_string \"Oracle rate overflow\""}], "id": 7479, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "30508:7:29", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7484, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "30508:48:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7485, "nodeType": "ExpressionStatement", "src": "30508:48:29"}]}}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 7501, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 7498, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7231, "src": "30926:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7499, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 51530, "src": "30926:20:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "31", "id": 7500, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "30949:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "30926:24:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 7508, "nodeType": "IfStatement", "src": "30922:54:29", "trueBody": {"expression": {"id": 7506, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7502, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7231, "src": "30952:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7504, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 51530, "src": "30952:20:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"hexValue": "31", "id": 7505, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "30975:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "30952:24:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7507, "nodeType": "ExpressionStatement", "src": "30952:24:29"}}, {"expression": {"id": 7513, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7509, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7231, "src": "30995:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7511, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 51538, "src": "30995:20:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 7512, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7234, "src": "31018:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "30995:33:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7514, "nodeType": "ExpressionStatement", "src": "30995:33:29"}, {"expression": {"id": 7519, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7515, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7231, "src": "31143:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7517, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "previousTradeTime", "nodeType": "MemberAccess", "referencedDeclaration": 51540, "src": "31143:27:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 7518, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7164, "src": "31173:9:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "31143:39:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7520, "nodeType": "ExpressionStatement", "src": "31143:39:29"}]}, "id": 7522, "nodeType": "IfStatement", "src": "24598:6599:29", "trueBody": {"id": 7373, "nodeType": "Block", "src": "25125:937:29", "statements": [{"assignments": [7332], "declarations": [{"constant": false, "id": 7332, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 7373, "src": "25353:18:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 7331, "name": "int256", "nodeType": "ElementaryTypeName", "src": "25353:6:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 7340, "initialValue": {"arguments": [{"id": 7334, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7266, "src": "25410:22:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"baseExpression": {"expression": {"id": 7335, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7222, "src": "25434:10:29", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 7336, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "proportions", "nodeType": "MemberAccess", "referencedDeclaration": 6154, "src": "25434:22:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 7338, "indexExpression": {"id": 7337, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "25457:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "25434:25:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 7333, "name": "_calculatefCashAmountFromProportion", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7039, "src": "25374:35:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 7339, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25374:86:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "25353:107:29"}, {"expression": {"id": 7345, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7341, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7231, "src": "25479:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7343, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 51530, "src": "25479:20:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 7344, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7332, "src": "25502:11:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "25479:34:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7346, "nodeType": "ExpressionStatement", "src": "25479:34:29"}, {"expression": {"id": 7363, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7347, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7231, "src": "25531:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7349, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 51538, "src": "25531:20:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 7351, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7332, "src": "25596:11:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7352, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7266, "src": "25629:22:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 7353, "name": "rateScalar", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7290, "src": "25673:10:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"arguments": [{"baseExpression": {"expression": {"id": 7356, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7222, "src": "25713:10:29", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$6155_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 7357, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "annualizedAnchorRates", "nodeType": "MemberAccess", "referencedDeclaration": 6151, "src": "25713:32:29", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 7359, "indexExpression": {"id": 7358, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "25746:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "25713:35:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 7355, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "25705:7:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 7354, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "25705:7:29", "typeDescriptions": {}}}, "id": 7360, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25705:44:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7361, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7282, "src": "25803:14:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 7350, "name": "_calculateOracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6867, "src": "25554:20:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$_t_int256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (int256,int256,int256,uint256,uint256) pure returns (uint256)"}}, "id": 7362, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25554:281:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "25531:304:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7364, "nodeType": "ExpressionStatement", "src": "25531:304:29"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7369, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 7366, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7231, "src": "25995:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7367, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 51538, "src": "25995:20:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 7368, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "26018:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "25995:24:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "494d3a20696d706c6965642072617465206661696c6564", "id": 7370, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "26021:25:29", "typeDescriptions": {"typeIdentifier": "t_stringliteral_f67a3c8a35da69c45d1ed45fabcbc3676eda7020663e1b262f347036fe2c14e4", "typeString": "literal_string \"IM: implied rate failed\""}, "value": "IM: implied rate failed"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_f67a3c8a35da69c45d1ed45fabcbc3676eda7020663e1b262f347036fe2c14e4", "typeString": "literal_string \"IM: implied rate failed\""}], "id": 7365, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "25987:7:29", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 7371, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25987:60:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7372, "nodeType": "ExpressionStatement", "src": "25987:60:29"}]}}, {"expression": {"id": 7528, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 7523, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7231, "src": "31273:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7525, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "lastImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 51536, "src": "31273:25:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 7526, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7231, "src": "31301:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7527, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 51538, "src": "31301:20:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "31273:48:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7529, "nodeType": "ExpressionStatement", "src": "31273:48:29"}, {"expression": {"arguments": [{"id": 7531, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7231, "src": "31350:9:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 7532, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7158, "src": "31361:10:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 7533, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "31373:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}], "id": 7530, "name": "finalizeMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7619, "src": "31335:14:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$51541_memory_ptr_$_t_uint256_$_t_struct$_nTokenPortfolio_$51431_memory_ptr_$returns$__$", "typeString": "function (struct MarketParameters memory,uint256,struct nTokenPortfolio memory)"}}, "id": 7534, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "31335:45:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7535, "nodeType": "ExpressionStatement", "src": "31335:45:29"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7244, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 7240, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "23344:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"expression": {"id": 7241, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "23348:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7242, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 51418, "src": "23348:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$51511_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 7243, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 51506, "src": "23348:31:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "23344:35:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 7537, "initializationExpression": {"assignments": [7237], "declarations": [{"constant": false, "id": 7237, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 7537, "src": "23329:9:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7236, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23329:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7239, "initialValue": {"hexValue": "30", "id": 7238, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "23341:1:29", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "23329:13:29"}, "loopExpression": {"expression": {"id": 7246, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "23381:3:29", "subExpression": {"id": 7245, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7237, "src": "23381:1:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 7247, "nodeType": "ExpressionStatement", "src": "23381:3:29"}, "nodeType": "ForStatement", "src": "23324:8067:29"}, {"assignments": [null, null, 7539, null], "declarations": [null, null, {"constant": false, "id": 7539, "mutability": "mutable", "name": "assetArrayLength", "nodeType": "VariableDeclaration", "scope": 7574, "src": "31505:22:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}, "typeName": {"id": 7538, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "31505:5:29", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "visibility": "internal"}, null], "id": 7546, "initialValue": {"arguments": [{"expression": {"id": 7543, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "31608:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7544, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 51430, "src": "31608:19:29", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "expression": {"expression": {"id": 7540, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "31574:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7541, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 51420, "src": "31574:21:29", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$51465_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 7542, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storeAssets", "nodeType": "MemberAccess", "referencedDeclaration": 33535, "src": "31574:33:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_PortfolioState_$51465_memory_ptr_$_t_address_$returns$_t_bool_$_t_bytes32_$_t_uint8_$_t_uint40_$bound_to$_t_struct$_PortfolioState_$51465_memory_ptr_$", "typeString": "function (struct PortfolioState memory,address) returns (bool,bytes32,uint8,uint40)"}}, "id": 7545, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "31574:54:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_bool_$_t_bytes32_$_t_uint8_$_t_uint40_$", "typeString": "tuple(bool,bytes32,uint8,uint40)"}}, "nodeType": "VariableDeclarationStatement", "src": "31428:200:29"}, {"expression": {"arguments": [{"expression": {"id": 7550, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "31693:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7551, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 51430, "src": "31693:19:29", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 7552, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7158, "src": "31726:10:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 7553, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "31750:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7554, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 51424, "src": "31750:18:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 7547, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 21941, "src": "31638:14:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BalanceHandler_$21941_$", "typeString": "type(library BalanceHandler)"}}, "id": 7549, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBalanceStorageForNToken", "nodeType": "MemberAccess", "referencedDeclaration": 21585, "src": "31638:41:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_int256_$returns$__$", "typeString": "function (address,uint256,int256)"}}, "id": 7555, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "31638:140:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7556, "nodeType": "ExpressionStatement", "src": "31638:140:29"}, {"expression": {"arguments": [{"expression": {"id": 7560, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "31848:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7561, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 51430, "src": "31848:19:29", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 7562, "name": "assetArrayLength", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7539, "src": "31881:16:29", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, {"expression": {"id": 7563, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7169, "src": "31911:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7564, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 51426, "src": "31911:26:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint8", "typeString": "uint8"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7557, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 32214, "src": "31788:13:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$32214_$", "typeString": "type(library nTokenHandler)"}}, "id": 7559, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setArrayLengthAndInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 31052, "src": "31788:46:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint8_$_t_uint256_$returns$__$", "typeString": "function (address,uint8,uint256)"}}, "id": 7565, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "31788:159:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7566, "nodeType": "ExpressionStatement", "src": "31788:159:29"}, {"eventCall": {"arguments": [{"arguments": [{"id": 7570, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7158, "src": "31989:10:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "id": 7569, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "31982:6:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint16_$", "typeString": "type(uint16)"}, "typeName": {"id": 7568, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "31982:6:29", "typeDescriptions": {}}}, "id": 7571, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "31982:18:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "id": 7567, "name": "MarketsInitialized", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 6136, "src": "31963:18:29", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_uint16_$returns$__$", "typeString": "function (uint16)"}}, "id": 7572, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "31963:38:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7573, "nodeType": "EmitStatement", "src": "31958:43:29"}]}, "documentation": {"id": 7156, "nodeType": "StructuredDocumentation", "src": "21852:290:29", "text": "@notice Initialize the market for a given currency id, done once a quarter\n @param currencyId currency of markets to initialize\n @param isFirstInit true if this is the first time the markets have been initialized\n @dev emit:MarketsInitialized\n @dev auth:none"}, "functionSelector": "d0e064c0", "id": 7575, "implemented": true, "kind": "function", "modifiers": [], "name": "initializeMarkets", "nodeType": "FunctionDefinition", "parameters": {"id": 7161, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7158, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 7575, "src": "22174:17:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 7157, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "22174:6:29", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 7160, "mutability": "mutable", "name": "isFirstInit", "nodeType": "VariableDeclaration", "scope": 7575, "src": "22193:16:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 7159, "name": "bool", "nodeType": "ElementaryTypeName", "src": "22193:4:29", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "src": "22173:37:29"}, "returnParameters": {"id": 7162, "nodeType": "ParameterList", "parameters": [], "src": "22220:0:29"}, "scope": 7620, "src": "22147:9861:29", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 7618, "nodeType": "Block", "src": "32160:452:29", "statements": [{"assignments": [7585], "declarations": [{"constant": false, "id": 7585, "mutability": "mutable", "name": "settlementDate", "nodeType": "VariableDeclaration", "scope": 7618, "src": "32226:22:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7584, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "32226:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 7594, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 7593, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"expression": {"id": 7588, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "32277:5:29", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 7589, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "32277:15:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7586, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 28547, "src": "32251:8:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$28547_$", "typeString": "type(library DateTime)"}}, "id": 7587, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 27940, "src": "32251:25:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 7590, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "32251:42:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"expression": {"id": 7591, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19613, "src": "32296:9:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$19613_$", "typeString": "type(library Constants)"}}, "id": 7592, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 19461, "src": "32296:17:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "32251:62:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "32226:87:29"}, {"expression": {"arguments": [{"id": 7598, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7579, "src": "32360:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 7599, "name": "settlementDate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7585, "src": "32372:14:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 7595, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7577, "src": "32323:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7597, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "setMarketStorageForInitialize", "nodeType": "MemberAccess", "referencedDeclaration": 29969, "src": "32323:36:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$51541_memory_ptr_$_t_uint256_$_t_uint256_$returns$__$bound_to$_t_struct$_MarketParameters_$51541_memory_ptr_$", "typeString": "function (struct MarketParameters memory,uint256,uint256)"}}, "id": 7600, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "32323:64:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 7601, "nodeType": "ExpressionStatement", "src": "32323:64:29"}, {"expression": {"arguments": [{"expression": {"id": 7605, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7581, "src": "32446:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7606, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 51430, "src": "32446:19:29", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 7607, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7579, "src": "32479:10:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 7608, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7577, "src": "32503:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7609, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 51528, "src": "32503:15:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 7610, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7581, "src": "32532:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 7611, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 51426, "src": "32532:26:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"arguments": [], "expression": {"argumentTypes": [], "expression": {"expression": {"id": 7612, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 7577, "src": "32572:6:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 7613, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 51530, "src": "32572:17:29", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7614, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 40768, "src": "32572:21:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 7615, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "32572:23:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 7602, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 32903, "src": "32398:19:29", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$32903_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 7604, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "addifCashAsset", "nodeType": "MemberAccess", "referencedDeclaration": 32600, "src": "32398:34:29", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (address,uint256,uint256,uint256,int256) returns (int256)"}}, "id": 7616, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "32398:207:29", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 7617, "nodeType": "ExpressionStatement", "src": "32398:207:29"}]}, "id": 7619, "implemented": true, "kind": "function", "modifiers": [], "name": "finalizeMarket", "nodeType": "FunctionDefinition", "parameters": {"id": 7582, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 7577, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 7619, "src": "32047:30:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 7576, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51541, "src": "32047:16:29", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$51541_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 7579, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 7619, "src": "32087:18:29", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7578, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "32087:7:29", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 7581, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 7619, "src": "32115:29:29", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 7580, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51431, "src": "32115:15:29", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$51431_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}], "src": "32037:113:29"}, "returnParameters": {"id": 7583, "nodeType": "ParameterList", "parameters": [], "src": "32160:0:29"}, "scope": 7620, "src": "32014:598:29", "stateMutability": "nonpayable", "virtual": false, "visibility": "internal"}], "scope": 7621, "src": "1454:31160:29"}], "src": "41:32574:29"}, "compiler": {"version": "0.7.6+commit.7338295f", "evm_version": "istanbul", "optimizer": {"enabled": true, "runs": 200}}, "contractName": "InitializeMarketsAction", "deployedBytecode": "73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063bb6dd58e14610045578063d0e064c014610067575b600080fd5b81801561005157600080fd5b50610065610060366004614f24565b610087565b005b81801561007357600080fd5b50610065610082366004614f3e565b610274565b42610090614d69565b61009a81846106f0565b602081015151516100c65760405162461bcd60e51b81526004016100bd906150c7565b60405180910390fd5b60006100d183610709565b905080826080015110156100f75760405162461bcd60e51b81526004016100bd9061500d565b60a08201516080830151600091610115919060021a610e100261072c565b90508084116101365760405162461bcd60e51b81526004016100bd90614f78565b604080516000808252602082019092526101749085908361016d565b61015a614db2565b8152602001906001900390816101525790505b508761078f565b9050600061018f8286606001516108ef90919063ffffffff16565b60c08601518651519192506101a89161ffff168461090b565b604051632128561360e11b815273__$892f367d396be2b92d3b049e6e62920984$__90634250ac26906101e1908a9085906004016152ea565b60206040518083038186803b1580156101f957600080fd5b505af415801561020d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102319190614f0c565b507f120b36bd1b47ae64f0f3ea6eb0fbfba209b2c780a31864e382d9957377a9f94687826040516102639291906152ea565b60405180910390a150505050505050565b4261027d614d69565b61028781856106f0565b80516020015160009067ffffffffffffffff811180156102a657600080fd5b506040519080825280602002602001820160405280156102e057816020015b6102cd614db2565b8152602001906001900390816102c55790505b508251602001519091506103065760405162461bcd60e51b81526004016100bd90615260565b83156103305760208201515151156103305760405162461bcd60e51b81526004016100bd906151b0565b60006103438383868961ffff168961092e565b9050600061035d8761ffff168560000151602001516109c0565b9050610367614db2565b6000805b86516020015181101561066057610396610387826001016109fc565b6103908a610709565b9061072c565b6020840152835180516000916103c991889190859081106103b357fe5b602002602001015184600260ff1601878c610aa0565b905060006103e48a8660200151610b0590919063ffffffff16565b89519091506000906103fa906001860184610b62565b90508b806104145750836001148015610414575088516002145b80610425575060208a015151518410155b80610453575083600114801561045357508860028151811061044357fe5b602002602001015160c001516000145b156104d457600061047b848960600151878151811061046e57fe5b6020026020010151610bd4565b9050808760400181815250506104ab8185848b60400151898151811061049d57fe5b602002602001015187610bf1565b60c088018190526104ce5760405162461bcd60e51b81526004016100bd90615290565b5061063c565b836104f957886001815181106104e657fe5b602002602001015160c001519450610556565b836001141561051b576105148961050f8d610709565b610c1b565b9450610556565b6000610532610529866109fc565b6103908e610709565b905061055281878c888151811061054557fe5b6020026020010151610cb4565b9550505b600061057b8684848b60400151898151811061056e57fe5b6020026020010151610d4b565b90508760200151858151811061058d57fe5b602002602001015181131561060757876020015185815181106105ac57fe5b602002602001015190506105c08482610bd4565b8760400181815250506105e3876040015185848b60400151898151811061049d57fe5b9550856106025760405162461bcd60e51b81526004016100bd90614fdf565b610617565b6106118482610bd4565b60408801525b60018760400151121561062c57600160408801525b5060c0860185905260e086018b90525b60c086015160a08701526106558661ffff8f168c610ded565b50505060010161036b565b50600061067e8760c001518860200151610e3690919063ffffffff16565b509250505061069a8760c001518b61ffff16896060015161090b565b6106ad8760c00151828960800151611075565b7fcffeff9accc9171f01fec36e09a1a06f0160ce50a8c4c0a2adff9cec562adf088a6040516106dc91906152db565b60405180910390a150505050505050505050565b6106fa82826110e8565b6107038161118b565b90915250565b60006276a70082101561071b57600080fd5b6276a700825b06820390505b919050565b600082820183811015610786576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000806107ac8560c0015186600001516000015161ffff166111ae565b60a0860151855191925060011a620f42400290600090156107d9576107d4856276a700610b05565b6107db565b845b905060006107e8846111e3565b90505b80156108d1576000610801896080015183611208565b90508751600014801561082057508851602001516108209082896112bb565b156108445761083185836000611360565b945061083c856111e3565b9150506107eb565b60c089015189515160009161085d9161ffff16846113ab565b905060008112156108b15789516000906108789084876113f0565b90508086111561088a57506000610897565b6108948187610b05565b90505b6108ad6108a683858c856114cf565b8990611515565b9750505b6108bd86846000611360565b95506108c8866111e3565b925050506107eb565b8751604001516108e1908661152b565b9450505050505b9392505050565b60006108fb8383611515565b9050600081121561078957600080fd5b600081121561091957600080fd5b610929838383600080600061155c565b505050565b600080600083156109535761094286611672565b64ffffffffff166080890152610978565b61095d888761168e565b61096985878a8a611768565b610975888887896117f8565b90505b606088015161098790826108ef565b6060890182905291506305f5e10082136109b35760405162461bcd60e51b81526004016100bd90615181565b5090505b95945050505050565b6109c8614dfa565b6109d0614dfa565b6109da8484611881565b602083015281526109eb84846118b9565b606083015260408201529392505050565b60008160011415610a1157506276a700610727565b8160021415610a24575062ed4e00610727565b8160031415610a3857506301da9c00610727565b8160041415610a4c57506303b53800610727565b8160051415610a6057506309450c00610727565b8160061415610a74575063128a1800610727565b8160071415610a8857506325143000610727565b60405162461bcd60e51b81526004016100bd90615073565b600080610abb6305f5e100610ab589896118e3565b90611931565b606085018190526080850181905283515160208087015190860151929350610aea929161ffff16908885611962565b825160400151610afa9082611a5f565b979650505050505050565b600082821115610b5c576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082600111158015610b79575083602001518311155b610b8257600080fd5b606084015160806008600019860102019060ff90821c16633b9aca00026000610bbb610bad86611a8a565b610ab5846301da9c006118e3565b905060008113610bca57600080fd5b9695505050505050565b6000610786610be7633b9aca0084611515565b610ab585856118e3565b600080610bfe8484611aa4565b90506000610c0f8888888588611b0f565b98975050505050505050565b6000600383511015610c3f5760405162461bcd60e51b81526004016100bd9061509a565b61078683600181518110610c4f57fe5b60200260200101516020015184600281518110610c6857fe5b60200260200101516020015185600181518110610c8157fe5b602002602001015160c0015186600281518110610c9a57fe5b602090810291909101015160c0015162ed4e008701611bcc565b602081015160c0820151600091906276a7008201828710610ce75760405162461bcd60e51b81526004016100bd9061511a565b858210610d1657610d0c86610390898603610d068387038c8703611c2a565b90611c83565b93505050506108e8565b6000610d2c888503610d06858a038b8603611c2a565b9050808711610d3c576000610d40565b8087035b9450505050506108e8565b600080610d588386611aa4565b90506000610d668787611aa4565b90506000610d86610d8187610d7b8587611515565b90611cea565b611d03565b9050610d9881621dcd6560491b611d36565b9050610da381611d89565b90506000610dbe82610db984600160401b611dde565b611d36565b9050610dd081621dcd6560491b611e11565b9050610ddb81611e47565b60070b9450505050505b949350505050565b60006276a700610dfc42610709565b019050610e0a848483611e50565b610e2f8260c001518486602001518560800151610e2a8960400151611eb7565b611ec5565b5050505050565b6000808080808080805b895151811015610ec75760008a600001518281518110610e5c57fe5b60200260200101519050600380811115610e7257fe5b8160a001516003811115610e8257fe5b1415610e8d57600080fd5b60028160a001516003811115610e9f57fe5b14158015610eaf57506060810151155b15610ebe57610ebe8b8361202f565b50600101610e40565b5060005b895151811015610f6a5760008a600001518281518110610ee757fe5b6020026020010151905060026003811115610efe57fe5b8160a001516003811115610f0e57fe5b1415610f2257608081015160009055610f61565b60018160a001516003811115610f3457fe5b1415610f4d57608081015180610f4a838261217f565b50505b610f59818686866122a8565b919650945092505b50600101610ecb565b5060608901516000610f7a61230b565b6001600160a01b038b1660009081526020829052604081209192505b8c60200151518110156110445760008d602001518281518110610fb557fe5b60200260200101519050806060015160001415610fd2575061103c565b60028160a001516003811115610fe457fe5b14158015611002575060038160a001516003811115610fff57fe5b14155b61100b57600080fd5b611017818989896122a8565b919950975095506110348184876010811061102e57fe5b0161217f565b600185019450505b600101610f96565b506010831115801561105b575064ffffffffff8411155b61106457600080fd5b50939a929950975095509350505050565b63ffffffff811061108557600080fd5b600061108f612318565b6001600160a01b039094166000908152602094909452506040909220805460ff909216600160501b0260ff60501b1963ffffffff909416600160301b0269ffffffff000000000000199093169290921792909216179055565b6110f58161ffff16612325565b6001600160a01b031660c08301819052600090819081906111159061234b565b9450945094505050600061112c8660c001516123b4565b505060808701859052604087018190526001600160d81b0319831660a088015260c087015190915061116090846000612415565b602087015260c08601516111789061ffff87166124a8565b5050506060909601959095525050505050565b611193614e22565b60006111a28361ffff16612531565b90506108e8838261257d565b6000806111b96125c0565b6001600160a01b038516600090815260209182526040808220868352909252205491505092915050565b6000816111f257506000610727565b6111fb826125cd565b60ff036001019050919050565b60008161121457600080fd5b61010082111561122357600080fd5b600061122e84611672565b90506000605a84116112495750620151808302019050610789565b60878411611271575060591983016207e900908102908206909103016276a700019050610789565b60c3841161129a5750608619830162278d00908102908206909103016301da9c00019050610789565b5060c21983016276a70090810290820690910301630b1fa800019050610789565b60008084116112dc5760405162461bcd60e51b81526004016100bd90615044565b60078411156112fd5760405162461bcd60e51b81526004016100bd90615151565b6276a700830615611310575060006108e8565b600061131b83610709565b905060015b8581116113545761133a611333826109fc565b839061072c565b85141561134c576001925050506108e8565b600101611320565b50600095945050505050565b60006001831015801561137557506101008311155b61137e57600080fd5b81156113975750600160ff1b60001983011c83176108e8565b50600160ff1b60001983011c1983166108e8565b6000806113b6612666565b6001600160a01b03861660009081526020918252604080822087835283528082208683529092522054600f90810b900b9150509392505050565b600080600061140486602001518686612673565b9150915060006114138761273b565b90508161142c578651610d0c9061ffff1687838861274f565b600061143786610709565b90506000611447611333866109fc565b9050600061145f8a6000015161ffff1683868b61274f565b905060008087600114156114845789915061147d8c604001516127ee565b90506114b3565b61149a61149360018a036109fc565b869061072c565b91506114b08c6000015161ffff1683888d61274f565b90505b6114c0828583868f611bcc565b985050505050505050506108e8565b6000846114de57506000610de5565b60006114ea8585610b05565b905060006114f8828561287f565b9050633b9aca0081131561150b57600080fd5b610afa8782611cea565b8082038281131560008312151461078957600080fd5b600080610de58460200151610ab586604001516115566402540be400886118e390919063ffffffff16565b906118e3565b60006115666128e7565b6001600160a01b0388166000908152602082815260408083208a845290915290209091506001600160571b031986128015906115a957506001600160571b038613155b6115b257600080fd5b600085121580156115ca57506001600160501b038513155b6115d357600080fd5b63ffffffff8411156115e457600080fd5b805469ffffffffffffffffffff19166001600160501b0386161763ffffffff60501b1916600160501b63ffffffff861602176001600160a81b0316600160a81b6affffffffffffffffffffff600a89900b1602178155611643836128f4565b815466ffffffffffffff91909116600160701b0266ffffffffffffff60701b1990911617905550505050505050565b60006201518082101561168457600080fd5b6201518082610721565b600061169982610709565b9050808360800151106116be5760405162461bcd60e51b81526004016100bd906151dc565b60006116ce846020015184612922565b90506116ff816000815181106116e057fe5b6020026020010151602001518560600151612b0690919063ffffffff16565b60608501525060c0830151835151608085015160009283926117289261ffff9091169087612b1c565b6060870151919350915061173c9083612b06565b606086015264ffffffffff81111561175357600080fd5b64ffffffffff16608090940193909352505050565b6000611777836000015161273b565b9050600061178485610709565b905060015b602085015151518110156117ef576117e78786602001516000015183815181106117af57fe5b60200260200101516020015188600087878a88815181106117cc57fe5b6020026020010151612c41909695949392919063ffffffff16565b600101611789565b50505050505050565b600060015b60208601515151811015611875576000866020015160000151828151811061182157fe5b60200260200101519050600160ff1681604001511461183f57600080fd5b61185c8760c001518683602001518a608001518560600151611ec5565b50602087015161186c908361202f565b506001016117fd565b506109b785858461078f565b606080600061188e612c78565b60008681526020829052604081209192506118ac9082908790612c85565b9097909650945050505050565b60608060006118c6612e24565b60008681526020829052604090209091506118ac81866001612c85565b8181026000198314156119135781158061190557508282828161190257fe5b05145b61190e57600080fd5b610789565b82158061192857508183828161192557fe5b05145b61078957600080fd5b6000816000191480156119475750600160ff1b83145b1561195157600080fd5b81838161195a57fe5b059392505050565b84516119719085858585612e31565b1561197b57610e2f565b6040850151156119a8576000611998866020015186868686612e31565b905080156119a65750610e2f565b505b6119b182612f42565b156119c45760008112156119c457600080fd5b6001600160571b031981128015906119e357506001600160571b038113155b6119ec57600080fd5b84602001515185604001511415611a1057611a0a8560200151612f58565b60208601525b60008560200151866040015181518110611a2657fe5b6020908102919091018101519586528501939093526040808501929092526060840152600060a090930192909252500180516001019052565b600080610de58460400151610ab56402540be400610ab58789602001516118e390919063ffffffff16565b60006001600160ff1b03821115611aa057600080fd5b5090565b600080611ac1611abc6301da9c00610d068787611c2a565b613011565b90506000611ad582621dcd6560491b611d36565b90506000611ae282611d89565b90506000611af682621dcd6560491b611e11565b9050611b0181611e47565b60070b979650505050505050565b6000806000611b22888888886000613028565b9150915080611b36576000925050506109b7565b6000611b4183611d03565b90506000611b5582621dcd6560491b611d36565b90506000611b62826130de565b90506000611b7e611b7983621dcd6560491b611e11565b613118565b67ffffffffffffffff1690506000611b9e89610d06846301da9c00611c2a565b905063ffffffff811115611bbc5760009750505050505050506109b7565b9c9b505050505050505050505050565b6000818610611bda57600080fd5b848210611be657600080fd5b838310611c0c57611c0584610390888803610d068388038b8803611c2a565b90506109b7565b611c05611c23878703610d068688038a8703611c2a565b8590610b05565b600082611c3957506000610789565b82820282848281611c4657fe5b04146107865760405162461bcd60e51b81526004018080602001828103825260218152602001806152ff6021913960400191505060405180910390fd5b6000808211611cd9576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611ce257fe5b049392505050565b6000610786611cf984846118e3565b633b9aca00611931565b6000677fffffffffffffff198212158015611d265750677fffffffffffffff8213155b611d2f57600080fd5b5060401b90565b600081600f0b60001415611d4957600080fd5b600082600f0b604085600f0b901b81611d5e57fe5b05905060016001607f1b03198112801590611d80575060016001607f1b038113155b61078657600080fd5b6000600160461b82600f0b12611d9e57600080fd5b683fffffffffffffffff1982600f0b1215611dbb57506000610727565b610789608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d613134565b6000600f83810b9083900b0160016001607f1b03198112801590611d80575060016001607f1b0381131561078657600080fd5b6000600f83810b9083900b0260401d60016001607f1b03198112801590611d80575060016001607f1b0381131561078657600080fd5b600f0b60401d90565b6000611e5a613be2565b60008481526020828152604080832088830151845282528083208684529091529081902090860151606087015160a088015160c089015160e08a01519596509394611ea9948694939291613bef565b610e2f818660800151613d03565b6000610789600019836118e3565b600080611ed287876111ae565b90506000611ede612666565b6001600160a01b0389166000908152602082815260408083208b845282528083208a8452909152812091925080611f15888a613d4c565b9150915080611f2357600080fd5b611f2d8583613e57565b15611fbc578254600090611f49908990600f90810b900b612b06565b905060016001607f1b03198112801590611f6a575060016001607f1b038113155b611f7357600080fd5b83546001600160801b0319166001600160801b03600f83900b1617845580611fa457611fa186846000611360565b95505b611faf8c8c88613e87565b95506109b7945050505050565b86156120205760016001607f1b03198712801590611fe1575060016001607f1b038713155b611fea57600080fd5b82546001600160801b0319166001600160801b03600f89900b1617835561201385836001611360565b94506120208b8b87613e87565b50949998505050505050505050565b815151811061203d57600080fd5b600082606001511161204e57600080fd5b60008260000151828151811061206057fe5b602002602001015190506002600381111561207757fe5b8160a00151600381111561208757fe5b141580156120a5575060038160a0015160038111156120a257fe5b14155b6120ae57600080fd5b606083018051600019019052600080805b855151811015612121576000866000015182815181106120db57fe5b60200260200101519050828160800151118015612108575060028160a00151600381111561210557fe5b14155b1561211857806080015192508193505b506001016120bf565b508184141561213a575050600260a0919091015261217b565b60008560000151838151811061214c57fe5b602090810291909101015160808581018051918301805190915252600160a09182015260029401939093525050505b5050565b81511580159061219257508151613fff10155b61219b57600080fd5b816020015160001080156121b85750602082015164ffffffffff10155b6121c157600080fd5b816040015160001080156121da57506040820151600810155b6121e357600080fd5b60608201516001600160571b03191380159061220a575060608201516001600160571b0312155b61221357600080fd5b8151815460208401516040850151606090950151600a0b6affffffffffffffffffffff16600160401b0272ffffffffffffffffffffff00000000000000001960ff909616600160381b0267ff000000000000001964ffffffffff909316620100000266ffffffffff00001961ffff90961661ffff19909516949094179490941692909217169190911792909216919091179055565b6000806000806122b788613ee1565b90508415806122c557508085115b156122ce578094505b86806122de575060008860600151125b965061ffff8616156122ef57600080fd5b50509451939560109390931c60f09490941b9390931793509150565b600080610789600d613f48565b6000806107896002613f48565b600080612330613f61565b6000938452602052505060409020546001600160a01b031690565b60008060008060008061235c612318565b6001600160a01b039097166000908152602097909752505060409094205461ffff81169563ffffffff62010000830481169650600160301b830416945060ff600160501b8304169350600160581b90910460d81b9150565b6000806000806123c2613f6e565b6001600160a01b0395909516600090815260209590955250506040909220546bffffffffffffffffffffffff811693600160601b82046001600160801b03169350600160e01b90910463ffffffff169150565b61241d614e4e565b612425614e4e565b60ff84166124345790506108e8565b61243e8585613f7b565b815260ff841660608201528267ffffffffffffffff8111801561246057600080fd5b5060405190808252806020026020018201604052801561249a57816020015b612487614e76565b81526020019060019003908161247f5790505b506020820152949350505050565b60008060008060006124b86128e7565b6001600160a01b0388166000908152602082815260408083208a8452909152902080546001600160501b0381169650600160501b810463ffffffff1695509192509061251390600160701b900466ffffffffffffff16613fa4565b9054600160a81b9004600a90810b900b989497509295509193505050565b612539614eb6565b600080600061254785613fb2565b604080516060810182526001600160a01b039093168352602083019390935260ff16600a0a918101919091529350505050919050565b612585614e22565b60006125948461ffff16614075565b6040805160808101825261ffff96909616865260ff821660208701528501939093525050606082015290565b600080610789600b613f48565b6000816125d957600080fd5b600160801b82106125ec57608091821c91015b600160401b82106125ff57604091821c91015b640100000000821061261357602091821c91015b62010000821061262557601091821c91015b610100821061263657600891821c91015b6010821061264657600491821c91015b6004821061265657600291821c91015b6002821061072757600101919050565b600080610789600c613f48565b600080600085116126965760405162461bcd60e51b81526004016100bd90615044565b60078511156126b75760405162461bcd60e51b81526004016100bd90615151565b60006126c284610709565b905060015b86811161271a5760006126e36126dc836109fc565b849061072c565b9050868114156126fb57509250600091506127339050565b8681111561271157509250600191506127339050565b506001016126c7565b5060405162461bcd60e51b81526004016100bd90615233565b935093915050565b6060015161012c60089190911c60ff160290565b60008061275a613be2565b905060006276a70061276b85610709565b6000898152602085815260408083208b84528252808320949093018083529390522080549192509063ffffffff600160a01b8204811691600160c01b8104821691600160e01b90910416816127d25760405162461bcd60e51b81526004016100bd90614faf565b6127df8184848c8c614092565b9b9a5050505050505050505050565b80516000906001600160a01b031661280857506000610727565b600082600001516001600160a01b031663dd30a6666040518163ffffffff1660e01b815260040160206040518083038186803b15801561284757600080fd5b505afa15801561285b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107869190614f0c565b600080612897611abc6301da9c00610d068688611c2a565b90506128a981621dcd6560491b611d36565b90506128bc6128b782614125565b611d89565b90506128ce81621dcd6560491b611e11565b905060006128db82611e47565b60070b95945050505050565b6000806107896006613f48565b60008065ffffffffffff83111561291457602f612910846125cd565b0390505b82811c60081b179050919050565b606061292c614eb6565b60006129388585614147565b9050612942614db2565b8151612952575091506107899050565b6000805b875151811015612afa5760008860000151828151811061297257fe5b60200260200101519050600061298782613ee1565b905088811115612998575050612af2565b81600001518685815181106129a957fe5b602002602001015160000151146129de5760018401935081600001518685815181106129d157fe5b6020908102919091010151525b6129f1826000015183602001518b61426c565b96506000600160ff1683604001511415612a26576060830151612a1590899061152b565b9050612a218b8561202f565b612aa8565b612a338360400151612f42565b15612aa857612a4c8684600001518560200151856143cf565b6000612a658460600151886143e390919063ffffffff16565b602086015191935091508b1015612a8657612a818c868361448b565b612aa6565b612a9a612a938a8361152b565b8390612b06565b9150612aa68c8661202f565b505b612ad281888781518110612ab857fe5b602002602001015160200151612b0690919063ffffffff16565b878681518110612ade57fe5b602002602001015160200181815250505050505b600101612956565b50919695505050505050565b8181018281121560008312151461078957600080fd5b6000806000612b2b87876111ae565b9050612b3684611672565b915084821015612b4557600080fd5b6000612b518684613d4c565b50905080612b60575050612c38565b6000612b6b836111e3565b90505b8015801590612b7d5750818111155b15612bc7576000612b8e8883611208565b9050612ba6612b9f8b8b848b614541565b8790612b06565b9550612bb484836000611360565b9350612bbf846111e3565b915050612b6e565b60005b8115612c28576000612bdc8984611208565b9050600080612beb8884613d4c565b9150915080612bf957600080fd5b612c0584836001611360565b9350612c1387866000611360565b9650612c1e876111e3565b9450505050612bca565b612c338a8a83613e87565b505050505b94509492505050565b612c4e87878786856145dc565b612c678760e001518860a001518960c001518588614092565b60c090970196909652505050505050565b6000806107896004613f48565b6060806000808567ffffffffffffffff81118015612ca257600080fd5b50604051908082528060200260200182016040528015612ccc578160200160208202803683370190505b50905060008667ffffffffffffffff81118015612ce857600080fd5b50604051908082528060200260200182016040528015612d12578160200160208202803683370190505b50905060005b87811015612e16578884600e8110612d2c57fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16838281518110612d5a57fe5b60209081029190910101526001909301928884600e8110612d7757fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16828281518110612da557fe5b60209081029190910101526001909301928615612e0e576000838281518110612dca57fe5b6020026020010151138015612df257506000828281518110612de857fe5b6020026020010151135b612e0e5760405162461bcd60e51b81526004016100bd90615206565b600101612d18565b509097909650945050505050565b6000806107896005613f48565b6000805b8651811015612f35576000878281518110612e4c57fe5b60200260200101519050848160400151141580612e6a575080518714155b80612e79575085816020015114155b15612e845750612f2d565b60028160a001516003811115612e9657fe5b14158015612eb4575060038160a001516003811115612eb157fe5b14155b612ebd57600080fd5b6060810151600090612ecf9086612b06565b9050612eda86612f42565b15612eed576000811215612eed57600080fd5b6001600160571b03198112801590612f0c57506001600160571b038113155b612f1557600080fd5b6060820152600160a090910181905291506109b79050565b600101612e35565b5060009695505050505050565b6000600282108015906107895750506008101590565b606060008251600014612f6f578251600202612f72565b60015b905060008167ffffffffffffffff81118015612f8d57600080fd5b50604051908082528060200260200182016040528015612fc757816020015b612fb4614e76565b815260200190600190039081612fac5790505b50905060005b845181101561300957848181518110612fe257fe5b6020026020010151828281518110612ff657fe5b6020908102919091010152600101612fcd565b509392505050565b6000677fffffffffffffff821115611d2f57600080fd5b6000808061303688856108ef565b9050600061304e6130478a8a612b06565b8390614697565b9050633938700081131561306a576000809350935050506130d4565b600080613076836146b0565b915091508061308f5760008095509550505050506130d4565b60006130a58961309f858d614697565b90612b06565b9050633b9aca008112156130c4576000809650965050505050506130d4565b9550600194506130d49350505050565b9550959350505050565b60008082600f0b136130ef57600080fd5b60806130fa83614752565b600f0b6fb17217f7d1cf79abc9e3b39803f2f6af02901c9050919050565b60008082600f0b121561312a57600080fd5b50600f0b60401d90565b6000600160461b82600f0b1261314957600080fd5b683fffffffffffffffff1982600f0b121561316657506000610727565b6001607f1b60006001603f1b8416600f0b13156131945770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b13156131c1577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b13156131ee577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b131561321b5770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b1315613248577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b131561327557700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b13156132a25770010163da9fb33356d84a66ae336dcdfa3f0260801c5b600083600160381b16600f0b13156132cb57700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b13156132f75770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b1315613323577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b131561334f57700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b131561337b577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b13156133a757700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b13156133d35770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b13156133ff577001000162e525ee054754457d59952920260260801c5b600083600160301b16600f0b13156134285770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b1315613453577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b131561347e57700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b13156134a95770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b13156134d457700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b13156134ff5770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b131561352a577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b131561355557700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b1315613580577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b13156135aa57700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b13156135d45770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b13156135fe577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b13156136285770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315613652577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b131561367c57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b13156136a65770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b13156136d057700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b13156136f95770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315613722577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b131561374b57700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b1315613774577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b131561379d57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b13156137c65770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b13156137ef577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b13156138185770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b1315613840577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b131561386857700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b13156138905770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b13156138b857700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b13156138e05770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315613908577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b131561393057700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b1315613958577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b131561397f57700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b13156139a65770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b13156139cd577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b13156139f45770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315613a1b577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b1315613a4257700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b1315613a695770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b1315613a9057700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b1315613ab65770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b1315613adc577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b1315613b0257700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b1315613b28577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b1315613b4e57700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b1315613b745770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315613b9a577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b1315613bc05770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c60016001607f1b0381111561078957600080fd5b600080610789600a613f48565b60008512158015613c0757506001600160501b038513155b613c1057600080fd5b60008412158015613c2857506001600160501b038413155b613c3157600080fd5b826000108015613c45575063ffffffff8311155b613c4e57600080fd5b816000108015613c62575063ffffffff8211155b613c6b57600080fd5b63ffffffff811115613c7c57600080fd5b855469ffffffffffffffffffff19166001600160501b039586161769ffffffffffffffffffff60501b1916600160501b94909516939093029390931763ffffffff60a01b1916600160a01b63ffffffff928316021763ffffffff60c01b1916600160c01b93821693909302929092176001600160e01b0316600160e01b9190921602179055565b60008112158015613d1b57506001600160501b038113155b613d2457600080fd5b600191909101805469ffffffffffffffffffff19166001600160501b03909216919091179055565b6000806000613d5a85611672565b905062015180840615613d74576000809250925050613e50565b838110613d88576000809250925050613e50565b6201518081850304605a8111613da557925060019150613e509050565b6101688111613de4576000620151806207e900840604820160591901905060068104605a0160068281613dd457fe5b0660001494509450505050613e50565b6108708111613e145760006201518062278d00840604820161016719019050601e8104608701601e8281613dd457fe5b611de28111613e44576000620151806276a700840604820161086f19019050605a810460c301605a8281613dd457fe5b61010060009350935050505b9250929050565b600060018210158015613e6c57506101008211155b613e7557600080fd5b50600019011b600160ff1b9081161490565b6014613e928261482d565b1115613eb05760405162461bcd60e51b81526004016100bd906150f1565b6000613eba6125c0565b6001600160a01b039094166000908152602094855260408082209482529390945250912055565b6000808260400151118015613efb57506040820151600810155b613f0457600080fd5b6040820151600210613f1b57506020810151610727565b6000613f2d60018460400151036109fc565b60208401519091506108e8906276a700906103909084610b05565b6000620f4240826010811115613f5a57fe5b0192915050565b6000806107896003613f48565b600080610789600e613f48565b60606000613f8984846148fd565b90506001815111613f9b579050610789565b61078681614a1f565b600881901c60ff9091161b90565b6000806000806000613fc386614bd8565b909250905060006001600160a01b038316613fe85750600090506402540be40061406a565b826001600160a01b0316631ee108336040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561402357600080fd5b505af1158015614037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061405b9190614f0c565b90506000811361406a57600080fd5b969195509350915050565b600080614080614c0f565b60009384526020525050604090205490565b60008083116140a057600080fd5b818611156140af5750836109b7565b60006140bb8388610b05565b9050838111156140ce57859150506109b7565b60006140e285610d0684633b9aca00611c2a565b905060006140f4633b9aca0083610b05565b90506000614117633b9aca00610d0661410d8b86611c2a565b6103908d88611c2a565b9a9950505050505050505050565b6000600f82900b60016001607f1b0319141561414057600080fd5b5060000390565b8151516060906000908190614191576040805160008082526020820190925290614187565b614174614ee0565b81526020019060019003908161416c5790505b5092505050610789565b8451515b600019810190156141ec576000866000015182815181106141b257fe5b60200260200101519050856141c682613ee1565b11156141d257506141e7565b805183146141e557805160019094019392505b505b614195565b5060008267ffffffffffffffff8111801561420657600080fd5b5060405190808252806020026020018201604052801561424057816020015b61422d614ee0565b8152602001906001900390816142255790505b50905082156109b757818160008151811061425757fe5b60209081029190910101515295945050505050565b614274614eb6565b6000806142818686614c1c565b9150915081600014156143a457600061429987613fb2565b91945090925090506001600160a01b038116156143a25760006142ba614c65565b905085158015906142d0575064ffffffffff8611155b6142d957600080fd5b8360001280156142f057506001600160801b038413155b6142f957600080fd5b6000888152602082815260408083208a845290915290819020805464ffffffffff191664ffffffffff89161774ffffffffffffffffffffffffffffffff00000000001916650100000000006001600160801b038816021760ff60a81b1916600160a81b60ff871602178155905188908a907f0fdfa6885701e2f1f42e4187b9231cf81c1fe23671ef64fa46f34ddb56c1dc18906143979089906152c7565b60405180910390a350505b505b6040805160608101825260008152602081019390935260ff909116600a0a9082015290509392505050565b6143dd8484846001856145dc565b50505050565b600080826143f657506000905080613e50565b6000831361440357600080fd5b6144228460800151610ab58587606001516118e390919063ffffffff16565b91506144438460800151610ab58587604001516118e390919063ffffffff16565b608085015190915061445590846108ef565b6080850152604084015161446990826108ef565b6040850152606084015161447d90836108ef565b6060850152613e5084614c72565b60008360000151838151811061449d57fe5b6020026020010151905082600014614528576000846000015160018503815181106144c457fe5b60200260200101519050816000015181600001511480156144ec575081602001518160200151145b80156144fc575060408101516001145b156145265760608101516145109084612b06565b6060820152600160a0820152614526858561202f565b505b600160408201819052606082019290925260a001525050565b60008061454c612666565b6001600160a01b0387166000908152602082815260408083208984528252808320888452909152812054919250600f91820b90910b9061458d87878761426c565b9050614599818361152b565b6001600160a01b03989098166000908152602093845260408082209882529784528781209681529590925250505091902080546001600160801b03191690555090565b60006145e6613be2565b6000868152602082815260408083208884528252808320868452825291829020808a5290890187905280546001600160501b03808216938b0193909352600160501b810490921660608a015263ffffffff600160a01b8304811660a08b0152600160c01b8304811660c08b0152600160e01b90920490911660e08901529091508084156146855760018201546001600160501b0316608089015261468d565b600060808901525b5050505050505050565b60006107866146aa84633b9aca006118e3565b83611931565b600080633b9aca008314156146ca5750600090508061474d565b60006146e46146dd633b9aca0086611515565b8590614697565b905060006146f182611d03565b9050600081600f0b1361470c5760008093509350505061474d565b600061474061473b61472f614720856130de565b6814b927f32bffb83338614cca565b621dcd6560491b611e11565b611e47565b60070b9450600193505050505b915091565b60008082600f0b1361476357600080fd5b6000600f83900b600160401b811261477d576040918201911d5b6401000000008112614791576020918201911d5b6201000081126147a3576010918201911d5b61010081126147b4576008918201911d5b601081126147c4576004918201911d5b600481126147d4576002918201911d5b600281126147e3576001820191505b603f19820160401b600f85900b607f8490031b6001603f1b5b60008113156148225790800260ff81901c8281029390930192607f011c9060011d6147fc565b509095945050505050565b600181901c7f5555555555555555555555555555555555555555555555555555555555555555908116911601600281901c7f3333333333333333333333333333333333333333333333333333333333333333908116911601600481901c7f07070707070707070707070707070707070707070707070707070707070707079190911601600881901c7e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f908116911601601081901c01602081901c01604081901c01608081901c60ff90811691160190565b606060108260ff16111561491057600080fd5b600061491a61230b565b6001600160a01b038516600090815260208290526040812091925060ff851667ffffffffffffffff8111801561494f57600080fd5b5060405190808252806020026020018201604052801561498957816020015b614976614e76565b81526020019060019003908161496e5790505b50905060005b8560ff16811015614a155760008382601081106149a857fe5b01905060008383815181106149b957fe5b602090810291909101810151835461ffff8116825264ffffffffff620100008204169282019290925260ff600160381b8304166040820152600160401b909104600a90810b900b6060820152608001919091525060010161498f565b5095945050505050565b805160008167ffffffffffffffff81118015614a3a57600080fd5b50604051908082528060200260200182016040528015614a64578160200160208202803683370190505b50905060005b82811015614ac1576000848281518110614a8057fe5b60200260200101519050614aa1816000015182602001518360400151614cfd565b838381518110614aad57fe5b602090810291909101015250600101614a6a565b5060015b828110156143dd57805b600081118015614b075750828181518110614ae657fe5b6020026020010151836001830381518110614afd57fe5b6020026020010151115b15614bcf57828181518110614b1857fe5b6020026020010151836001830381518110614b2f57fe5b6020026020010151846001840381518110614b4657fe5b60200260200101858481518110614b5957fe5b6020026020010182815250828152505050848181518110614b7657fe5b6020026020010151856001830381518110614b8d57fe5b6020026020010151866001840381518110614ba457fe5b60200260200101878481518110614bb757fe5b60209081029190910101919091525260001901614acf565b50600101614ac5565b6000806000614be5614d58565b600094855260205250506040909120546001600160a01b03811692600160a01b90910460ff169150565b6000806107896009613f48565b6000806000614c29614c65565b6000958652602090815260408087209587529490525050509020546501000000000081046001600160801b031691600160a81b90910460ff1690565b6000806107896008613f48565b6000614c7d82614d65565b905060008160000160189054906101000a900463ffffffff169050614cbc82846040015185606001518660a001518563ffffffff168860e00151613bef565b610929828460800151613d03565b6000600f82810b9084900b0360016001607f1b03198112801590611d80575060016001607f1b0381131561078657600080fd5b6000613fff841115614d0e57600080fd5b64ffffffffff831115614d2057600080fd5b6008821115614d2e57600080fd5b5067ffff000000000000603084901b1665ffffffffff00600884901b161760ff8216179392505050565b600080610789600f613f48565b5190565b6040518060e00160405280614d7c614e22565b8152602001614d89614e4e565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b60405180610100016040528060008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6040805160808101825260008082526020820152908101614e41614eb6565b8152600060209091015290565b6040518060800160405280606081526020016060815260200160008152602001600081525090565b6040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160006003811115614eb157fe5b905290565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b803561ffff8116811461072757600080fd5b600060208284031215614f1d578081fd5b5051919050565b600060208284031215614f35578081fd5b61078682614efa565b60008060408385031215614f50578081fd5b614f5983614efa565b915060208301358015158114614f6d578182fd5b809150509250929050565b60208082526017908201527f496e76616c696420737765657020636173682074696d65000000000000000000604082015260600190565b60208082526016908201527513585c9ad95d081b9bdd081a5b9a5d1a585b1a5e995960521b604082015260600190565b6020808252601490820152734f7261636c652072617465206f766572666c6f7760601b604082015260600190565b60208082526017908201527f4d75737420696e697469616c697a65206d61726b657473000000000000000000604082015260600190565b60208082526015908201527410d1ce881b9bc81b585c9ad95d1cc81b1a5cdd1959605a1b604082015260600190565b6020808252600d908201526c092dcecc2d8d2c840d2dcc8caf609b1b604082015260600190565b60208082526013908201527224a69d1039b4bc1036b7b73a341032b93937b960691b604082015260600190565b60208082526010908201526f4e6f206e546f6b656e2061737365747360801b604082015260600190565b6020808252600f908201526e4f766572206d61782061737365747360881b604082015260600190565b60208082526017908201527f494d3a20696e746572706f6c6174696f6e206572726f72000000000000000000604082015260600190565b60208082526016908201527510d1ce881b585c9ad95d081a5b99195e08189bdd5b9960521b604082015260600190565b6020808252601590820152740929a7440d2dce6eaccccd2c6d2cadce840c6c2e6d605b1b604082015260600190565b60208082526012908201527112534e881b9bdd08199a5c9cdd081a5b9a5d60721b604082015260600190565b60208082526010908201526f494d3a20696e76616c69642074696d6560801b604082015260600190565b60208082526013908201527250543a20696e69742076616c7565207a65726f60681b604082015260600190565b60208082526013908201527210d1ce881b9bc81b585c9ad95d08199bdd5b99606a1b604082015260600190565b60208082526016908201527512534e881b9bc81b585c9ad95d1cc81d1bc81a5b9a5d60521b604082015260600190565b60208082526017908201527f494d3a20696d706c6965642072617465206661696c6564000000000000000000604082015260600190565b6001600160801b0391909116815260200190565b61ffff91909116815260200190565b61ffff92909216825260208201526040019056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220ffd87b76e073e2cb77cadf6a6ea7f2c83e9be7d79267e02d2dc3571b49595d9f64736f6c63430007060033", "deployedSourceMap": "1454:31160:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20246:1600;;;;;;;;;;-1:-1:-1;20246:1600:29;;;;;:::i;:::-;;:::i;:::-;;22147:9861;;;;;;;;;;-1:-1:-1;22147:9861:29;;;;;:::i;:::-;;:::i;20246:1600::-;20334:15;20359:29;;:::i;:::-;20398:46;:6;20433:10;20398:34;:46::i;:::-;20462:21;;;;:34;:41;20454:74;;;;-1:-1:-1;;;20454:74:29;;;;;;;:::i;:::-;;;;;;;;;20606:21;20630:36;20656:9;20630:25;:36::i;:::-;20606:60;;20714:13;20684:6;:26;;;:43;;20676:79;;;;-1:-1:-1;;;20676:79:29;;;;;;;:::i;:::-;20942:17;;;;20880:26;;;;20841:24;;20880:146;;:26;6207:1:47;20942:58:29;21005:7;20928:84;20880:30;:146::i;:::-;20841:185;;21056:16;21044:9;:28;21036:64;;;;-1:-1:-1;;;21036:64:29;;;;;;;:::i;:::-;21229:25;;;21111:27;21229:25;;;;;;;;;21153:198;;21205:6;;21111:27;21229:25;;;;;:::i;:::-;;;;;;;;;;;;;;;;;21328:9;21153:34;:198::i;:::-;21111:240;;21362:22;21387:49;21415:20;21387:6;:18;;;:27;;:49;;;;:::i;:::-;21501:19;;;;21534:16;;:27;21362:74;;-1:-1:-1;21446:159:29;;;;21575:20;21446:41;:159::i;:::-;21719:56;;-1:-1:-1;;;21719:56:29;;:16;;:27;;:56;;21747:10;;21759:15;;21719:56;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;21790:49;21811:10;21823:15;21790:49;;;;;;;:::i;:::-;;;;;;;;20246:1600;;;;;;;:::o;22147:9861::-;22250:15;22275:29;;:::i;:::-;22314:46;:6;22349:10;22314:34;:46::i;:::-;22449:16;;:31;;;22370:41;;22426:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;22579:16:29;;:31;;;22370:111;;-1:-1:-1;22571:71:29;;;;-1:-1:-1;;;22571:71:29;;;;;;;:::i;:::-;22738:11;22734:119;;;22773:21;;;;:34;:41;:46;22765:77;;;;-1:-1:-1;;;22765:77:29;;;;;;;:::i;:::-;22863:28;22894:162;22939:6;22959:15;22988:9;23011:10;22894:162;;23035:11;22894:31;:162::i;:::-;22863:193;;23067:38;23120:69;23145:10;23120:69;;23157:6;:16;;;:31;;;23120:24;:69::i;:::-;23067:122;;23200:33;;:::i;:::-;23296:18;;23324:8067;23348:16;;:31;;;23344:35;;23324:8067;;;23465:103;23523:31;23548:1;23552;23548:5;23523:24;:31::i;:::-;23465:36;23491:9;23465:25;:36::i;:::-;:40;;:103::i;:::-;23444:18;;;:124;23715:24;;:27;;23583:29;;23631:279;;23672:21;;23715:24;23740:1;;23715:27;;;;;;;;;;;;23802:1;5069::47;23764:39:29;;;23855:9;23886:6;23631:19;:279::i;:::-;23583:327;;23925:22;23950:33;23973:9;23950;:18;;;:22;;:33;;;;:::i;:::-;24017:16;;23925:58;;-1:-1:-1;23997:17:29;;24017:53;;24052:1;24048:5;;23925:58;24017:30;:53::i;:::-;23997:73;;24619:11;:160;;;;24741:1;24746;24741:6;:37;;;;;24751:15;:22;24777:1;24751:27;24741:37;24619:313;;;-1:-1:-1;24890:21:29;;;;:34;:41;24885:46;;;24619:313;:491;;;;25065:1;25070;25065:6;:44;;;;;25075:15;25091:1;25075:18;;;;;;;;;;;;;;:29;;;25108:1;25075:34;25065:44;24598:6599;;;25353:18;25374:86;25410:22;25434:10;:22;;;25457:1;25434:25;;;;;;;;;;;;;;25374:35;:86::i;:::-;25353:107;;25502:11;25479:9;:20;;:34;;;;;25554:281;25596:11;25629:22;25673:10;25713;:32;;;25746:1;25713:35;;;;;;;;;;;;;;25803:14;25554:20;:281::i;:::-;25531:20;;;:304;;;25987:60;;;;-1:-1:-1;;;25987:60:29;;;;;;;:::i;:::-;24598:6599;;;;26330:6;26326:2473;;26552:15;26568:1;26552:18;;;;;;;;;;;;;;:29;;;26539:42;;26326:2473;;;26610:1;26615;26610:6;26606:2193;;;27147:148;27196:15;27237:36;27263:9;27237:25;:36::i;:::-;27147:23;:148::i;:::-;27134:161;;26606:2193;;;28103:27;28157:69;28198:27;28223:1;28198:24;:27::i;:::-;28157:36;28183:9;28157:25;:36::i;:69::-;28103:123;;28261:519;28309:19;28626:10;28740:15;28756:1;28740:18;;;;;;;;;;;;;;28261:22;:519::i;:::-;28248:532;;26606:2193;;29113:17;29153:264;29207:10;29243:14;29283:10;29327;:32;;;29360:1;29327:35;;;;;;;;;;;;;;29153:28;:264::i;:::-;29113:304;;29918:10;:29;;;29948:1;29918:32;;;;;;;;;;;;;;29905:10;:45;29901:815;;;29987:10;:29;;;30017:1;29987:32;;;;;;;;;;;;;;29974:45;;30064:71;30100:22;30124:10;30064:35;:71::i;:::-;30041:9;:20;;:94;;;;;30171:314;30217:9;:20;;;30263:22;30311:10;30355;:32;;;30388:1;30355:35;;;;;;;30171:314;30158:327;-1:-1:-1;30516:15:29;30508:48;;;;-1:-1:-1;;;30508:48:29;;;;;;;:::i;:::-;29901:815;;;30626:71;30662:22;30686:10;30626:35;:71::i;:::-;30603:20;;;:94;29901:815;30949:1;30926:9;:20;;;:24;30922:54;;;30975:1;30952:20;;;:24;30922:54;-1:-1:-1;30995:20:29;;;:33;;;31143:27;;;:39;;;24598:6599;31301:20;;;;31273:25;;;:48;31335:45;31301:9;31335:45;;;31373:6;31335:14;:45::i;:::-;-1:-1:-1;;;23381:3:29;;23324:8067;;;;31505:22;31574:54;31608:6;:19;;;31574:6;:21;;;:33;;:54;;;;:::i;:::-;31428:200;;;;;31638:140;31693:6;:19;;;31726:10;31638:140;;31750:6;:18;;;31638:41;:140::i;:::-;31788:159;31848:6;:19;;;31881:16;31911:6;:26;;;31788:46;:159::i;:::-;31963:38;31989:10;31963:38;;;;;;:::i;:::-;;;;;;;;22147:9861;;;;;;;;;;:::o;15082:248:62:-;15200:50;15231:6;15239:10;15200:30;:50::i;:::-;15279:44;15312:10;15279:32;:44::i;:::-;15260:63;;;-1:-1:-1;15082:248:62:o;330:193:60:-;398:7;2839:9:47;425:30:60;;;417:39;;;;;;2839:9:47;486::60;:29;;473:9;:43;466:50;;330:193;;;;:::o;2682:175:6:-;2740:7;2771:5;;;2794:6;;;;2786:46;;;;;-1:-1:-1;;;2786:46:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;2849:1;-1:-1:-1;2682:175:6;;;;;:::o;8172:2829:29:-;8362:27;8401:20;8424:85;8460:6;:19;;;8481:6;:16;;;:27;;;8424:85;;:35;:85::i;:::-;8784:17;;;;8907:22;;8401:108;;-1:-1:-1;6144:1:47;8784:52:29;4391:16:47;8770:97:29;;8731:24;;8907:27;:74;;8949:32;:9;2839::47;8949:13:29;:32::i;:::-;8907:74;;;8937:9;8907:74;8877:104;;8992:14;9009:28;:12;:26;:28::i;:::-;8992:45;;9047:1860;9054:11;;9047:1860;;9165:16;9184:66;9215:6;:26;;;9243:6;9184:30;:66::i;:::-;9165:85;;9449:15;:22;9475:1;9449:27;:209;;;;-1:-1:-1;9548:16:29;;:31;;;9496:162;;9601:8;9631:9;9496:30;:162::i;:::-;9428:470;;;9768:34;:12;9788:6;9796:5;9768:19;:34::i;:::-;9753:49;;9829:28;:12;:26;:28::i;:::-;9820:37;;9875:8;;;9428:470;10005:19;;;;10046:16;;:27;9912:15;;9946:175;;;;10095:8;9946:37;:175::i;:::-;9912:209;;10218:1;10207:8;:12;10203:521;;;10260:16;;10239:18;;10260:67;;10297:8;10307:19;10260:36;:67::i;:::-;10239:88;;10369:10;10350:16;:29;10346:182;;;-1:-1:-1;10416:1:29;10346:182;;;10477:32;:10;10492:16;10477:14;:32::i;:::-;10464:45;;10346:182;10569:140;10615:76;10649:8;10659;10669:9;10680:10;10615:33;:76::i;:::-;10569:20;;:24;:140::i;:::-;10546:163;;10203:521;;10811:34;:12;10831:6;10839:5;10811:19;:34::i;:::-;10796:49;;10868:28;:12;:26;:28::i;:::-;10859:37;;9047:1860;;;;;10924:16;;:26;;;:70;;10973:20;10924:48;:70::i;:::-;10917:77;;;;;;8172:2829;;;;;;:::o;1773:176:74:-;1834:8;1858:9;1862:1;1865;1858:3;:9::i;:::-;1854:13;;1890:1;1885;:6;;1877:15;;;;;16228:293:52;16399:1;16384:11;:16;;16376:25;;;;;;16447:67;16466:13;16481:10;16493:11;16506:1;16509;16512;16447:18;:67::i;:::-;16228:293;;;:::o;11007:1388:29:-;11242:6;11260:28;11298:27;11340:11;11336:452;;;11403:31;11424:9;11403:20;:31::i;:::-;11367:68;;:26;;;:68;11336:452;;;11466:41;11489:6;11497:9;11466:22;:41::i;:::-;11521:67;11541:10;11553:9;11564:6;11572:15;11521:19;:67::i;:::-;11625:152;11669:6;11693:15;11726:10;11754:9;11625:26;:152::i;:::-;11602:175;;11336:452;11939:18;;;;:49;;11967:20;11939:27;:49::i;:::-;12043:18;;;:41;;;11915:73;-1:-1:-1;5847:3:47;12239:63:29;;12218:131;;;;-1:-1:-1;;;12218:131:29;;;;;;;:::i;:::-;-1:-1:-1;12367:21:29;-1:-1:-1;11007:1388:29;;;;;;;;:::o;2209:557::-;2333:27;;:::i;:::-;2376:34;;:::i;:::-;2472:96;2520:10;2544:14;2472:34;:96::i;:::-;2443:25;;;2420:148;;;2632:103;2687:10;2711:14;2632:41;:103::i;:::-;2610:18;;;2579:156;2580:28;;;2579:156;2610:18;2209:557;-1:-1:-1;;;2209:557:29:o;928:470:60:-;991:7;1014:5;1023:1;1014:10;1010:40;;;-1:-1:-1;2839:9:47;1026:24:60;;1010:40;1064:5;1073:1;1064:10;1060:44;;;-1:-1:-1;1083:21:60;1076:28;;1060:44;1118:5;1127:1;1118:10;1114:37;;;-1:-1:-1;2887:11:47;1130:21:60;;1114:37;1165:5;1174:1;1165:10;1161:41;;;-1:-1:-1;1184:18:60;1177:25;;1161:41;1216:5;1225:1;1216:10;1212:41;;;-1:-1:-1;1235:18:60;1228:25;;1212:41;1267:5;1276:1;1267:10;1263:42;;;-1:-1:-1;1286:19:60;1279:26;;1263:42;1319:5;1328:1;1319:10;1315:42;;;-1:-1:-1;1338:19:60;1331:26;;1315:42;1368:23;;-1:-1:-1;;;1368:23:60;;;;;;;:::i;18192:1007:29:-;18425:6;;18566:76;5847:3:47;18566:39:29;:21;18592:12;18566:25;:39::i;:::-;:43;;:76::i;:::-;18652:24;;;:44;;;18706:24;;;:44;;;18883:16;;:27;18924:18;;;;;18839:21;;;;18527:115;;-1:-1:-1;18839:205:29;;:21;:205;;;18956:9;18527:115;18839:30;:205::i;:::-;19127:16;;:26;;;:65;;19174:17;19127:46;:65::i;:::-;19120:72;18192:1007;-1:-1:-1;;;;;;;18192:1007:29:o;3128:155:6:-;3186:7;3218:1;3213;:6;;3205:49;;;;;-1:-1:-1;;;3205:49:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3271:5:6;;;3128:155::o;2655:782:59:-;2814:6;2845:11;2840:1;:16;;:59;;;;;2875:9;:24;;;2860:11;:39;;2840:59;2832:68;;;;;;3039:14;;;;2333:32;2971:1;-1:-1:-1;;2976:15:59;;2971:21;2957:35;;3018:48;3039:24;;;3018:48;3872:3:47;3018:75:59;2940:14;3135:85;3187:32;3204:14;3187:16;:32::i;:::-;3135:47;:6;3745:9:47;3135:10:59;:47::i;:85::-;3103:117;;3371:1;3358:10;:14;3350:23;;;;;;3420:10;2655:782;-1:-1:-1;;;;;;2655:782:59:o;19639:281:29:-;19778:6;19803:110;19872:40;3872:3:47;19901:10:29;19872:28;:40::i;:::-;19803:51;:22;19843:10;19803:39;:51::i;15745:571::-;15968:7;15987:17;16007:75;16045:20;16067:14;16007:37;:75::i;:::-;15987:95;;16092:18;16113:168;16148:11;16173:22;16209:10;16233;16257:14;16113:21;:168::i;:::-;16092:189;15745:571;-1:-1:-1;;;;;;;;15745:571:29:o;12669:676::-;12812:7;12934:1;12908:15;:22;:27;;12900:59;;;;-1:-1:-1;;;12900:59:29;;;;;;;:::i;:::-;12989:349;13038:15;13054:1;13038:18;;;;;;;;;;;;;;:27;;;13083:15;13099:1;13083:18;;;;;;;;;;;;;;:27;;;13128:15;13144:1;13128:18;;;;;;;;;;;;;;:29;;;13175:15;13191:1;13175:18;;;;;;;;;;;;;;;;;;:29;;;13303:21;13287:37;;12989:31;:349::i;16623:1518::-;16827:19;;;;16875:21;;;;16785:7;;16827:19;2839:9:47;16989:39:29;;17046:28;;;17038:64;;;;-1:-1:-1;;;17038:64:29;;;;;;;:::i;:::-;17295:9;17283:8;:21;17279:856;;17343:219;17552:9;17343:183;17497:28;;;17343:76;17344:20;;;17391:27;;;17343:47;:76::i;:::-;:153;;:183::i;:219::-;17320:242;;;;;;;17279:856;17753:12;17784:183;17938:28;;;17784:76;17785:20;;;17832:27;;;17784:47;:76::i;:183::-;17753:214;;18097:4;18085:9;:16;:39;;18123:1;18085:39;;;18116:4;18104:9;:16;18085:39;18078:46;;;;;;;;14007:1268;14198:6;14216:17;14236:75;14274:20;14296:14;14236:37;:75::i;:::-;14216:95;;14429:19;14451:65;14489:10;14501:14;14451:37;:65::i;:::-;14429:87;-1:-1:-1;14527:15:29;14545:162;14636:61;14686:10;14637:28;14429:87;14654:10;14637:16;:28::i;:::-;14636:49;;:61::i;:::-;14545:21;:162::i;:::-;14527:180;;14776:59;14794:8;-1:-1:-1;;;14776:17:29;:59::i;:::-;14765:70;;14885:27;14903:8;14885:17;:27::i;:::-;14874:38;;15007:17;15027:63;15045:8;15055:34;15073:8;-1:-1:-1;;;15055:17:29;:34::i;:::-;15027:17;:63::i;:::-;15007:83;;15158:61;15176:10;-1:-1:-1;;;15158:17:29;:61::i;:::-;15145:74;;15237:31;15257:10;15237:19;:31::i;:::-;15230:38;;;;;;;;14007:1268;;;;;;;:::o;32014:598::-;32226:22;2839:9:47;32251:42:29;32277:15;32251:25;:42::i;:::-;:62;;-1:-1:-1;32323:64:29;:6;32360:10;32251:62;32323:36;:64::i;:::-;32398:207;32446:6;:19;;;32479:10;32503:6;:15;;;32532:6;:26;;;32572:23;:6;:17;;;:21;:23::i;:::-;32398:34;:207::i;:::-;;32014:598;;;;:::o;6422:4123:64:-;6545:4;;;;;;;;7157:574;7181:27;;:34;7177:38;;7157:574;;;7236:27;7266:14;:27;;;7294:1;7266:30;;;;;;;;;;;;;;7236:60;;7479:32;7457:54;;;;;;;;:5;:18;;;:54;;;;;;;;;;7449:63;;;;;;7609:24;7587:5;:18;;;:46;;;;;;;;;;:69;;;;-1:-1:-1;7637:14:64;;;;:19;7587:69;7583:138;;;7676:30;7688:14;7704:1;7676:11;:30::i;:::-;-1:-1:-1;7217:3:64;;7157:574;;;;7830:9;7825:1217;7849:27;;:34;7845:38;;7825:1217;;;7904:27;7934:14;:27;;;7962:1;7934:30;;;;;;;;;;;;;;7904:60;;8005:24;7983:46;;;;;;;;:5;:18;;;:46;;;;;;;;;7979:1053;;;8116:17;;;;8094:19;8182:25;;8160:65;;;8289:24;8267:5;:18;;;:46;;;;;;;;;8263:361;;;8423:17;;;;;8573:32;8423:5;:17;8573:11;:32::i;:::-;8263:361;;;8837:180;8882:5;8909:7;8938:25;8985:14;8837:23;:180::i;:::-;8782:235;;-1:-1:-1;8782:235:64;-1:-1:-1;8782:235:64;-1:-1:-1;7979:1053:64;-1:-1:-1;7885:3:64;;7825:1217;;;-1:-1:-1;9107:32:64;;;;9078:26;9242:37;:35;:37::i;:::-;-1:-1:-1;;;;;9356:14:64;;9289:64;9356:14;;;;;;;;;;9149:130;;-1:-1:-1;9380:735:64;9404:14;:24;;;:31;9400:1;:35;9380:735;;;9456:27;9486:14;:24;;;9511:1;9486:27;;;;;;;;;;;;;;9456:57;;9531:5;:14;;;9549:1;9531:19;9527:33;;;9552:8;;;9527:33;9621:24;9599:5;:18;;;:46;;;;;;;;;;:120;;;;-1:-1:-1;9687:32:64;9665:5;:18;;;:54;;;;;;;;;;9599:120;9574:159;;;;;;9840:160;9881:5;9904:7;9929:25;9972:14;9840:23;:160::i;:::-;9785:215;;-1:-1:-1;9785:215:64;-1:-1:-1;9785:215:64;-1:-1:-1;10015:52:64;10027:5;10034:12;10047:18;10034:32;;;;;;;;10015:11;:52::i;:::-;10103:1;10081:23;;;;9380:735;;9437:3;;9380:735;;;;10295:2;10273:18;:24;;:62;;;;-1:-1:-1;10319:16:64;10301:34;;;10273:62;10265:71;;;;;;-1:-1:-1;10407:7:64;;10428:25;;-1:-1:-1;10428:25:64;-1:-1:-1;10473:18:64;-1:-1:-1;6422:4123:64;-1:-1:-1;;;;6422:4123:64:o;8318:558:62:-;8546:16;8515:47;;8479:84;;;;;;8607:47;8657:36;:34;:36::i;:::-;-1:-1:-1;;;;;8735:19:62;;;8703:29;8735:19;;;;;;;;-1:-1:-1;8735:19:62;;;;8764:57;;8831:38;;;;-1:-1:-1;;;8831:38:62;-1:-1:-1;;;;8764:57:62;;;;-1:-1:-1;;;8764:57:62;-1:-1:-1;;8764:57:62;;;;;;;8831:38;;;;;;;8318:558::o;13809:1223::-;13965:25;13979:10;13965:25;;:13;:25::i;:::-;-1:-1:-1;;;;;13943:47:62;:19;;;:47;;;14104:27;;;;;;14211:37;;:16;:37::i;:::-;14027:221;;;;;;;;14300:19;14411:49;14440:6;:19;;;14411:28;:49::i;:::-;-1:-1:-1;;14471:26:62;;;:48;;;14529:18;;;:40;;;-1:-1:-1;;;;;;14579:30:62;;:17;;;:30;14694:19;;;;14286:174;;-1:-1:-1;14644:124:62;;14727:16;-1:-1:-1;14644:36:62;:124::i;:::-;14620:21;;;:148;14993:19;;;;14960:65;;;;;:32;:65::i;:::-;-1:-1:-1;;;14820:18:62;;;;14806:219;;;;-1:-1:-1;;;;;13809:1223:62:o;17649:272:59:-;17734:26;;:::i;:::-;17776:36;17815:44;17848:10;17815:44;;:32;:44::i;:::-;17776:83;;17876:38;17892:10;17904:9;17876:15;:38::i;656:266:63:-;741:20;773:61;837:35;:33;:35::i;:::-;-1:-1:-1;;;;;889:14:63;;;;;;;;;;;;;;:26;;;;;;;;;-1:-1:-1;;656:266:63;;;;:::o;3211:233:72:-;3273:14;3362;3358:28;;-1:-1:-1;3385:1:72;3378:8;;3358:28;3410:23;3425:6;3410;:23::i;:::-;3404:3;:29;3436:1;3404:33;3397:40;;3211:233;;;:::o;6878:1476:60:-;6991:7;7022:11;7014:20;;;;;;7115:3;7105:6;:13;;7097:22;;;;;;7183:21;7207:22;7219:9;7207:11;:22::i;:::-;7183:46;;7239:16;3479:2:47;7270:6:60;:35;7266:1082;;-1:-1:-1;2621:5:47;7344:22:60;;7328:38;;-1:-1:-1;7321:45:60;;7266:1082;3532:3:47;7387:6:60;:36;7383:965;;-1:-1:-1;;;7694:34:60;;2742:7:47;7693:53:60;;;7630:30;;;7466:195;;;7682:64;7498:40;7682:64;;-1:-1:-1;7675:71:60;;7383:965;3588:3:47;7767:6:60;:38;7763:585;;-1:-1:-1;;;8006:35:60;;2789:8:47;8005:55:60;;;7941:31;;;7848:125;;;7994:66;7880:41;7994:66;;-1:-1:-1;7987:73:60;;7763:585;-1:-1:-1;;;8279:37:60;;2839:9:47;8278:59:60;;;8212:33;;;8118:128;;;8267:70;8150:42;8267:70;;-1:-1:-1;8260:77:60;;1496:609;1641:4;1682:1;1665:14;:18;1657:52;;;;-1:-1:-1;;;1657:52:60;;;;;;;:::i;:::-;2245:1:47;1727:14:60;:51;;1719:86;;;;-1:-1:-1;;;1719:86:60;;;;;;;:::i;:::-;2839:9:47;1820:8:60;:28;:33;1816:51;;-1:-1:-1;1862:5:60;1855:12;;1816:51;1877:12;1892:36;1918:9;1892:25;:36::i;:::-;1877:51;-1:-1:-1;1956:1:60;1939:137;1964:14;1959:1;:19;1939:137;;2015:37;2024:27;2049:1;2024:24;:27::i;:::-;2015:4;;:8;:37::i;:::-;2003:8;:49;1999:66;;;2061:4;2054:11;;;;;;1999:66;1980:3;;1939:137;;;-1:-1:-1;2093:5:60;;1496:609;-1:-1:-1;;;;;1496:609:60:o;316:372:72:-;428:7;464:1;455:5;:10;;:26;;;;;478:3;469:5;:12;;455:26;447:35;;;;;;526:5;522:160;;;-1:-1:-1;;;;;;582:9:72;;564:28;554:39;;547:46;;522:160;-1:-1:-1;;;;;;660:9:72;;642:28;640:31;631:40;;624:47;;1320:368:63;1455:15;1482:99;1584:35;:33;:35::i;:::-;-1:-1:-1;;;;;1636:14:63;;;;;;;;;;;;;;:26;;;;;;;;:36;;;;;;;:45;;;;;1629:52;;;-1:-1:-1;;1320:368:63;;;;;:::o;9545:1720:59:-;9702:7;9722:19;9743:18;9777:70;9801:9;:24;;;9827:8;9837:9;9777:23;:70::i;:::-;9721:126;;;;9857:18;9878:34;9902:9;9878:23;:34::i;:::-;9857:55;;9928:13;9923:1336;;9985:20;;9964:75;;;;10007:8;10017:10;10029:9;9964:20;:75::i;9923:1336::-;10070:21;10094:36;10120:9;10094:25;:36::i;:::-;10070:60;;10245:20;10268:56;10286:37;10311:11;10286:24;:37::i;10268:56::-;10245:79;;10338:16;10373:79;10394:9;:20;;;10373:79;;10416:12;10430:10;10442:9;10373:20;:79::i;:::-;10338:114;;10467:21;10502:17;10537:11;10552:1;10537:16;10533:613;;;10674:9;10658:25;;10713:35;:9;:19;;;:33;:35::i;:::-;10701:47;;10533:613;;;10862:60;10880:41;10919:1;10905:11;:15;10880:24;:41::i;:::-;10862:13;;:17;:60::i;:::-;10846:76;;10953:178;10995:9;:20;;;10953:178;;11037:13;11072:10;11104:9;10953:20;:178::i;:::-;10941:190;;10533:613;11167:81;11189:13;11204:12;11218:9;11229:8;11239;11167:21;:81::i;:::-;11160:88;;;;;;;;;;;;2563:669:68;2728:6;2750:13;2746:27;;-1:-1:-1;2772:1:68;2765:8;;2746:27;2926:22;2951:23;:8;2964:9;2951:12;:23::i;:::-;2926:48;;2984:21;3008:45;3026:14;3042:10;3008:17;:45::i;:::-;2984:69;;3872:3:47;3072:14:68;:42;;3064:51;;;;;;3182:43;:8;3210:14;3182:27;:43::i;1267:154:74:-;1390:5;;;1385:16;;;;1323:8;1406:6;;;1385:28;1377:37;;;;;1604:470:58;1739:6;1884:19;1906:131;2029:2;:7;;;1906:105;1989:2;:21;;;1906:65;649:4;1906:17;:34;;:65;;;;:::i;:::-;:82;;:105::i;17068:1381:52:-;17303:68;17374:30;:28;:30::i;:::-;-1:-1:-1;;;;;17454:14:52;;17414:37;17454:14;;;;;;;;;;;:26;;;;;;;;17303:101;;-1:-1:-1;;;;;;;17499:30:52;;;;;:64;;-1:-1:-1;;;;;;17533:30:52;;;17499:64;17491:73;;;;;;17720:1;17703:13;:18;;:55;;;;-1:-1:-1;;;;;;17725:33:52;;;17703:55;17695:64;;;;;;17833:16;17816:33;;;17808:42;;;;;;17894:52;;-1:-1:-1;;17894:52:52;-1:-1:-1;;;;;17894:52:52;;;-1:-1:-1;;;;17956:52:52;-1:-1:-1;;;17956:52:52;;;;;-1:-1:-1;;;;;18018:47:52;-1:-1:-1;;;18018:47:52;17956:28;18018:47;;;;;;;;18389:53;18418:23;18389:28;:53::i;:::-;18342:100;;;;;;;-1:-1:-1;;;18342:100:52;-1:-1:-1;;;;18342:100:52;;;;;;-1:-1:-1;;;;;;;17068:1381:52:o;583:160:60:-;641:7;2621:5:47;668:4:60;:21;;660:30;;;;;;2621:5:47;715:4:60;:20;;2772:1921:29;3644:21;3668:36;3694:9;3668:25;:36::i;:::-;3644:60;;3751:13;3722:6;:26;;;:42;3714:71;;;;-1:-1:-1;;;3714:71:29;;;;;;;:::i;:::-;3913:34;3966:71;4004:6;:21;;;4027:9;3966:37;:71::i;:::-;3913:124;;4072:53;4095:12;4108:1;4095:15;;;;;;;;;;;;;;:29;;;4072:6;:18;;;:22;;:53;;;;:::i;:::-;4051:18;;;:74;-1:-1:-1;4270:19:29;;;;4307:16;;:27;4352:26;;;;4147:23;;;;4209:210;;;;;;;4396:9;4209:43;:210::i;:::-;4450:18;;;;4146:273;;-1:-1:-1;4146:273:29;-1:-1:-1;4450:40:29;;4146:273;4450:22;:40::i;:::-;4429:18;;;:61;4609:16;4592:33;;;4584:42;;;;;;4636:50;;:26;;;;:50;;;;-1:-1:-1;;;2772:1921:29:o;4825:1526::-;5028:28;5059:42;:6;:16;;;:40;:42::i;:::-;5028:73;;5199:22;5224:36;5250:9;5224:25;:36::i;:::-;5199:61;-1:-1:-1;5850:1:29;5833:512;5857:21;;;;:34;:41;5853:45;;5833:512;;;5919:415;5984:10;6089:6;:21;;;:34;;;6124:1;6089:37;;;;;;;;;;;;;;:46;;;6153:9;6245:5;6268:20;6306:14;5919:15;5935:1;5919:18;;;;;;;;;;;;;;:47;;:415;;;;;;;;;:::i;:::-;5900:3;;5833:512;;;;4825:1526;;;;;;:::o;6542:1376::-;6746:6;6985:1;6968:766;6992:21;;;;:34;:41;6988:45;;6968:766;;;7054:27;7084:6;:21;;;:34;;;7119:1;7084:37;;;;;;;;;;;;;;7054:67;;4922:1:47;7326:45:29;;:5;:15;;;:45;7318:54;;;;;;7387:221;7439:6;:19;;;7476:10;7504:5;:14;;;7536:6;:26;;;7580:5;:14;;;7387:34;:221::i;:::-;-1:-1:-1;7687:21:29;;;;:36;;7721:1;7687:33;:36::i;:::-;-1:-1:-1;7035:3:29;;6968:766;;;;7841:70;7876:6;7884:15;7901:9;7841:34;:70::i;8970:508:62:-;9091:29;9122:34;9172:67;9242:36;:34;:36::i;:::-;9288:59;9350:17;;;;;;;;;;9172:106;;-1:-1:-1;9415:56:62;;9350:17;;9449:14;;9415;:56::i;:::-;9377:94;;;;-1:-1:-1;8970:508:62;-1:-1:-1;;;;;8970:508:62:o;12218:507::-;12346:37;12385:27;12428:67;12498:33;:31;:33::i;:::-;12541:56;12600:17;;;;;;;;;;12428:103;;-1:-1:-1;12666:52:62;12600:17;12697:14;12713:4;12666:14;:52::i;398:190:74:-;478:5;;;-1:-1:-1;;497:7:74;;493:88;;;515:6;;;:20;;;534:1;529;525;:5;;;;;;:10;515:20;506:30;;;;;;493:88;;;560:6;;;:20;;;579:1;574;570;:5;;;;;;:10;560:20;551:30;;;;;1022:239;1078:8;1108:1;-1:-1:-1;;1108:7:74;:27;;;;;-1:-1:-1;;;1119:1:74;:16;1108:27;1106:30;1098:39;;;;;;1253:1;1249;:5;;;;;;;1022:239;-1:-1:-1;;;1022:239:74:o;2933:2071:64:-;3230:27;;3192:186;;3275:10;3303:8;3329:9;3356:8;3192:20;:186::i;:::-;3133:263;;;3389:7;;3133:263;3410:32;;;;:36;3406:296;;3462:11;3476:183;3514:14;:24;;;3556:10;3584:8;3610:9;3637:8;3476:20;:183::i;:::-;3462:197;;3677:6;3673:19;;;3685:7;;;3673:19;3406:296;;3866:40;3896:9;3866:29;:40::i;:::-;3862:152;;;3942:1;3930:8;:13;;3922:22;;;;;;-1:-1:-1;;;;;;4031:27:64;;;;;:58;;-1:-1:-1;;;;;;4062:27:64;;;4031:58;4023:67;;;;;;4240:14;:24;;;:31;4204:14;:32;;;:67;4200:171;;;4314:46;4335:14;:24;;;4314:20;:46::i;:::-;4287:24;;;:73;4200:171;4641:30;4674:14;:24;;;4699:14;:32;;;4674:58;;;;;;;;;;;;;;;;;;;4742:32;;;4784:17;;:28;;;;4822:18;;;;:30;;;;4862:17;;;:28;-1:-1:-1;4900:21:64;;;;:50;;;;-1:-1:-1;4960:32:64;:37;;4996:1;4960:37;;;2933:2071::o;873:468:58:-;1001:6;1146:24;1173:126;1277:2;:21;;;1173:86;649:4;1173:38;1198:12;1173:2;:7;;;:24;;:38;;;;:::i;2520:163:74:-;2569:6;-1:-1:-1;;;;;2596:1:74;:30;;2587:40;;;;;;-1:-1:-1;2674:1:74;2520:163::o;17939:613:61:-;18071:6;;18123:118;18163:64;3745:9:47;18163:31:61;:11;18179:14;18163:15;:31::i;:64::-;18123:22;:118::i;:::-;18093:148;;18251:21;18275:59;18293:8;-1:-1:-1;;;18275:17:61;:59::i;:::-;18251:83;;18344:16;18363:33;18381:14;18363:17;:33::i;:::-;18344:52;;18406:22;18431:60;18449:9;-1:-1:-1;;;18431:17:61;:60::i;:::-;18406:85;;18509:36;18529:15;18509:19;:36::i;:::-;18502:43;;;17939:613;-1:-1:-1;;;;;;;17939:613:61:o;16345:1469::-;16547:7;16640:19;16661:12;16689:76;16706:10;16718:19;16739:10;16751;16763:1;16689:16;:76::i;:::-;16639:126;;;;16780:7;16775:22;;16796:1;16789:8;;;;;;16775:22;16953:11;16967:35;16989:12;16967:21;:35::i;:::-;16953:49;;17062:17;17082:55;17100:4;-1:-1:-1;;;17082:17:61;:55::i;:::-;17062:75;;17291:19;17313:28;17330:10;17313:16;:28::i;:::-;17291:50;;17389:14;17418:85;17439:63;17457:12;-1:-1:-1;;;17439:17:61;:63::i;:::-;17418:20;:85::i;:::-;17389:114;;;-1:-1:-1;17558:19:61;17580:59;17624:14;17580:39;17389:114;3745:9:47;17580:10:61;:39::i;:59::-;17558:81;-1:-1:-1;17752:16:61;17738:30;;17734:44;;;17777:1;17770:8;;;;;;;;;;;17734:44;17796:11;16345:1469;-1:-1:-1;;;;;;;;;;;;16345:1469:61:o;7904:1576:59:-;8109:7;8152:13;8136;:29;8128:38;;;;;;8255:12;8239:13;:28;8231:37;;;;;;8515:9;8503:8;:21;8499:975;;8563:221;8774:9;8563:185;8719:28;;;8563:78;8564:20;;;8611:29;;;8563:47;:78::i;:221::-;8540:244;;;;8499:975;9150:313;9248:197;9416:28;;;9248:82;9249:20;;;9300:29;;;9248:51;:82::i;:197::-;9150:9;;:13;:313::i;3530:215:6:-;3588:7;3611:6;3607:20;;-1:-1:-1;3626:1:6;3619:8;;3607:20;3649:5;;;3653:1;3649;:5;:1;3672:5;;;;;:10;3664:56;;;;-1:-1:-1;;;3664:56:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4209:150;4267:7;4298:1;4294;:5;4286:44;;;;;-1:-1:-1;;;4286:44:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;4351:1;4347;:5;;;;;;;4209:150;-1:-1:-1;;;4209:150:6:o;2248:143:74:-;2319:6;2344:40;2348:9;2352:1;2355;2348:3;:9::i;:::-;3872:3:47;2344::74;:40::i;1238:160:71:-;1289:6;-1:-1:-1;;1312:1:71;:24;;:51;;;;;1345:18;1340:1;:23;;1312:51;1303:61;;;;;;-1:-1:-1;1390:2:71;1385:7;;1238:160::o;6671:222::-;6728:6;6751:1;:6;;6756:1;6751:6;;6742:16;;;;;;6764:13;6801:1;6780:22;;6795:2;6789:1;6781:10;;:16;;6780:22;;;;;;;-1:-1:-1;;;;;;;6817:19:71;;;;;:42;;-1:-1:-1;;;;;;6840:19:71;;;6817:42;6808:52;;;;;21339:266;21386:6;-1:-1:-1;;;21409:1:71;:24;;;21400:34;;;;;;-1:-1:-1;;21457:1:71;:25;;;21453:39;;;-1:-1:-1;21491:1:71;21484:8;;21453:39;21519:81;21595:3;21551:1;21543:10;;21556:35;21543:48;:55;;21519:5;:81::i;3364:191::-;3421:6;3451:13;:9;;;:13;;;;;-1:-1:-1;;;;;;3479:19:71;;;;;:42;;-1:-1:-1;;;;;;3502:19:71;;;3470:52;;;;;4186:197;4243:6;4273:13;:9;;;:13;;;;;4290:2;4273:19;-1:-1:-1;;;;;;4307:19:71;;;;;:42;;-1:-1:-1;;;;;;4330:19:71;;;4298:52;;;;;1610:89;1686:7;;1691:2;1686:7;;1610:89::o;27867:796:61:-;28123:100;28226:29;:27;:29::i;:::-;28265:35;28303:17;;;;;;;;;;;28321:15;;;;28303:34;;;;;;;:50;;;;;;;;;;28422:17;;;;28453:21;;;;28488:22;;;;28524:17;;;;28555:24;;;;28123:132;;-1:-1:-1;28303:50:61;;28364:225;;28303:50;;28422:17;28453:21;28488:22;28364:17;:225::i;:::-;28600:56;28619:13;28634:6;:21;;;28600:18;:56::i;1553:90:74:-;1599:8;1626:10;-1:-1:-1;;1634:1:74;1626:3;:10::i;3016:1782:63:-;3200:6;3218:20;3241:36;3257:7;3266:10;3241:15;:36::i;:::-;3218:59;;3287:99;3389:35;:33;:35::i;:::-;-1:-1:-1;;;;;3468:14:63;;3434:31;3468:14;;;;;;;;;;;:26;;;;;;;;:36;;;;;;;;3287:137;;-1:-1:-1;3434:31:63;3547:56;3578:14;3495:8;3547:30;:56::i;:::-;3514:89;;;;3621:7;3613:16;;;;;;3689:29;:12;3711:6;3689:21;:29::i;:::-;3685:649;;;3838:18;;3802:20;;3825:32;;:8;;3838:18;;;;3825:32;;:12;:32::i;:::-;3802:55;-1:-1:-1;;;;;;;3879:33:63;-1:-1:-1;3879:33:63;;;:70;;-1:-1:-1;;;;;;3916:33:63;;;3879:70;3871:79;;;;;;3997:42;;-1:-1:-1;;;;;;3997:42:63;-1:-1:-1;;;;;3997:42:63;;;;;;;;;4119:106;;4176:34;:12;4196:6;4204:5;4176:19;:34::i;:::-;4161:49;;4119:106;4239:50;4255:7;4264:10;4276:12;4239:15;:50::i;:::-;4310:13;-1:-1:-1;4303:20:63;;-1:-1:-1;;;;;4303:20:63;3685:649;4348:13;;4344:422;;-1:-1:-1;;;;;;4483:28:63;-1:-1:-1;4483:28:63;;;:60;;-1:-1:-1;;;;;;4515:28:63;;;4483:60;4475:69;;;;;;4591:37;;-1:-1:-1;;;;;;4591:37:63;-1:-1:-1;;;;;4591:37:63;;;;;;;;4658:33;:12;4678:6;-1:-1:-1;4658:19:63;:33::i;:::-;4643:48;;4705:50;4721:7;4730:10;4742:12;4705:15;:50::i;:::-;-1:-1:-1;4783:8:63;;3016:1782;-1:-1:-1;;;;;;;;;3016:1782:63:o;12651:2038:64:-;12765:27;;:34;12757:42;;12749:51;;;;;;12882:1;12847:14;:32;;;:36;12839:45;;;;;;12931:35;12969:14;:27;;;12997:5;12969:34;;;;;;;;;;;;;;12931:72;;13064:24;13034:54;;;;;;;;:13;:26;;;:54;;;;;;;;;;:132;;;;-1:-1:-1;13134:32:64;13104:13;:26;;;:62;;;;;;;;;;13034:132;13013:163;;;;;;13215:32;;;:37;;-1:-1:-1;;13215:37:64;;;-1:-1:-1;;;13493:338:64;13513:27;;:34;13509:38;;13493:338;;;13568:23;13594:14;:27;;;13622:1;13594:30;;;;;;;;;;;;;;13568:56;;13658:13;13642:1;:13;;;:29;:75;;;;-1:-1:-1;13693:24:64;13675:1;:14;;;:42;;;;;;;;;;13642:75;13638:183;;;13753:1;:13;;;13737:29;;13805:1;13784:22;;13638:183;-1:-1:-1;13549:3:64;;13493:338;;;;13854:18;13845:5;:27;13841:236;;;-1:-1:-1;;14022:24:64;13993:26;;;;;:53;14060:7;;13841:236;14290:33;14326:14;:27;;;14354:18;14326:47;;;;;;;;;;;;;;;;;;14486:25;;;;;;14525:23;;;;;14383:175;;;;14595:24;14568;;;;:51;14658:24;14629:26;;:53;;;;-1:-1:-1;;;12651:2038:64;;;:::o;11554:862::-;11701:16;;11697:20;;;;:68;;-1:-1:-1;11721:16:64;;5630:6:47;-1:-1:-1;11721:44:64;11697:68;11689:77;;;;;;11830:5;:14;;;11826:1;:18;:56;;;;-1:-1:-1;11848:14:64;;;;11866:16;-1:-1:-1;11848:34:64;11826:56;11818:65;;;;;;11944:5;:15;;;11940:1;:19;:77;;;;-1:-1:-1;11963:15:64;;;;5128:1:47;-1:-1:-1;11963:54:64;11940:77;11932:86;;;;;;12089:14;;;;-1:-1:-1;;;;;;12070:33:64;;;;:70;;-1:-1:-1;12107:14:64;;;;-1:-1:-1;;;;;;12107:33:64;12070:70;12062:79;;;;;;12224:16;;12191:50;;12282:14;;;;12338:15;;;;12394:14;;;;;12364:45;;;;-1:-1:-1;;;12364:45:64;-1:-1:-1;;12307:47:64;;;;-1:-1:-1;;;12307:47:64;-1:-1:-1;;12251:46:64;;;;;;-1:-1:-1;;12191:50:64;;;;-1:-1:-1;;12191:50:64;;;;;;;12251:46;;;;;;;;12307:47;;;;;12364:45;;;;;;;;;;11554:862::o;10626:882::-;10858:4;10876:7;10897;10929:22;10954:25;:5;:23;:25::i;:::-;10929:50;-1:-1:-1;11051:19:64;;;:54;;;11091:14;11074;:31;11051:54;11047:116;;;11138:14;11121:31;;11047:116;11182:7;:29;;;;11210:1;11193:5;:14;;;:18;11182:29;11172:39;-1:-1:-1;11230:47:64;;;;11222:56;;;;;;-1:-1:-1;;11406:16:64;;11450:7;;11391:2;11362:31;;;;11427:3;11398:32;;;;11361:70;;;;;-1:-1:-1;11486:14:64;-1:-1:-1;10626:882:64:o;5608:263:48:-;5675:77;5768:12;5783:41;5799:24;5783:15;:41::i;1763:232::-;1829:47;1893:12;1908:40;1924:23;1908:15;:40::i;1652:219:62:-;1718:20;1750:41;1794:36;:34;:36::i;:::-;1847:17;;;;;;-1:-1:-1;;1847:17:62;;;;-1:-1:-1;;;;;1847:17:62;;1652:219::o;790:786::-;898:17;929:35;978:27;1019:22;1055:17;1097:47;1147:36;:34;:36::i;:::-;-1:-1:-1;;;;;1225:19:62;;;1193:29;1225:19;;;;;;;;-1:-1:-1;;1225:19:62;;;;1317:18;;;;;1375:35;;;;;;;-1:-1:-1;;;;1442:27:62;;;;-1:-1:-1;1498:24:62;-1:-1:-1;;;1498:24:62;;;;-1:-1:-1;;;;1545:24:62;;;;;;-1:-1:-1;790:786:62:o;4354:808::-;4474:19;4507:27;4548:28;4601:58;4662:40;:38;:40::i;:::-;-1:-1:-1;;;;;4761:19:62;;;;4712:46;4761:19;;;;;;;;-1:-1:-1;;4761:19:62;;;;4804:25;;;;;-1:-1:-1;;;5055:33:62;;-1:-1:-1;;;;;5055:33:62;;-1:-1:-1;;;;5121:34:62;;;;;;-1:-1:-1;4354:808:62:o;15400:477:64:-;15546:21;;:::i;:::-;15579:27;;:::i;:::-;15620:21;;;15616:39;;15650:5;-1:-1:-1;15643:12:64;;15616:39;15687:45;15706:7;15715:16;15687:18;:45::i;:::-;15666:66;;15742:42;;;:23;;;:42;15833:13;15812:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;15794:15:64;;;:53;:15;15400:477;-1:-1:-1;;;;15400:477:64:o;18545:738:52:-;18669:18;18701:20;18735:21;18770:31;18826:68;18897:30;:28;:30::i;:::-;-1:-1:-1;;;;;18977:14:52;;18937:37;18977:14;;;;;;;;;;;:26;;;;;;;;19030:28;;-1:-1:-1;;;;;19030:28:52;;;-1:-1:-1;;;;19084:28:52;;;;;-1:-1:-1;18977:14:52;;-1:-1:-1;18977:26:52;19148:78;;-1:-1:-1;;;19181:44:52;;;;19148:32;:78::i;:::-;19250:26;;-1:-1:-1;;;19250:26:52;;;;;;19236:40;;;18545:738;;-1:-1:-1;18545:738:52;;-1:-1:-1;19122:104:52;;-1:-1:-1;;;18545:738:52:o;5895:516:58:-;5981:26;;:::i;:::-;6024:11;6037:27;6066:29;6111:33;6133:10;6111:21;:33::i;:::-;6174:230;;;;;;;;-1:-1:-1;;;;;6174:230:58;;;;;;;;;;;;6361:27;;:2;:27;6174:230;;;;;;;;-1:-1:-1;;;;5895:516:58;;;:::o;16694:512:59:-;16822:26;;:::i;:::-;16864:12;16879:37;16905:10;16879:37;;:25;:37::i;:::-;17010:189;;;;;;;;;;;;;;;16957:22;;;17010:189;;;;;;;;;;-1:-1:-1;;17010:189:59;;;;;16694:512::o;4903:243:48:-;4968:61;5045:12;5060:39;5076:22;5060:15;:39::i;1940:1056:72:-;1990:11;2280:6;2272:15;;;;;;-1:-1:-1;;;2328:1:72;:40;2324:104;;2390:3;2384:9;;;;2407:10;2324:104;-1:-1:-1;;;2441:1:72;:24;2437:86;;2487:2;2481:8;;;;2503:9;2437:86;2541:11;2536:1;:16;2532:78;;2574:2;2568:8;;;;2590:9;2532:78;2628:7;2623:1;:12;2619:74;;2657:2;2651:8;;;;2673:9;2619:74;2711:5;2706:1;:10;2702:70;;2738:1;2732:7;;;;2753:8;2702:70;2790:4;2785:1;:9;2781:69;;2816:1;2810:7;;;;2831:8;2781:69;2868:3;2863:1;:8;2859:68;;2893:1;2887:7;;;;2908:8;2859:68;2945:3;2940:1;:8;2936:22;;2957:1;2950:8;1940:1056;;;:::o;5253:269:48:-;5318:87;5421:12;5436:39;5452:22;5436:15;:39::i;2984:825:60:-;3122:7;3131:4;3172:1;3155:14;:18;3147:52;;;;-1:-1:-1;;;3147:52:60;;;;;;;:::i;:::-;2245:1:47;3217:14:60;:51;;3209:86;;;;-1:-1:-1;;;3209:86:60;;;;;;;:::i;:::-;3305:12;3320:36;3346:9;3320:25;:36::i;:::-;3305:51;-1:-1:-1;3384:1:60;3367:396;3392:14;3387:1;:19;3367:396;;3427:22;3452:37;3461:27;3486:1;3461:24;:27::i;:::-;3452:4;;:8;:37::i;:::-;3427:62;;3584:8;3566:14;:26;3562:49;;;-1:-1:-1;3602:1:60;-1:-1:-1;3605:5:60;;-1:-1:-1;3594:17:60;;-1:-1:-1;3594:17:60;3562:49;3726:8;3709:14;:25;3705:47;;;-1:-1:-1;3744:1:60;-1:-1:-1;3747:4:60;;-1:-1:-1;3736:16:60;;-1:-1:-1;3736:16:60;3705:47;-1:-1:-1;3408:3:60;;3367:396;;;;3773:29;;-1:-1:-1;;;3773:29:60;;;;;;;:::i;2984:825::-;;;;;;;:::o;5507:311:59:-;5742:14;;;2486:3:47;1611:1:59;5742:41;;;;5720:66;;:91;;5507:311::o;24295:1374:61:-;24466:7;24485:100;24588:29;:27;:29::i;:::-;24485:132;-1:-1:-1;24627:22:61;2839:9:47;24652:36:61;24678:9;24652:25;:36::i;:::-;24718:35;24756:17;;;;;;;;;;;:27;;;;;;;;24652:56;;;;24756:43;;;;;;;24836:29;;24652:56;;-1:-1:-1;24756:43:61;24836:29;-1:-1:-1;;;24836:29:61;;;;;-1:-1:-1;;;24896:24:61;;;;;-1:-1:-1;;;24958:31:61;;;;25399:14;25391:49;;;;-1:-1:-1;;;25391:49:61;;;;;;;:::i;:::-;25470:192;25505:17;25540:15;25573:10;25601:20;25639:9;25470:17;:192::i;:::-;25451:211;24295:1374;-1:-1:-1;;;;;;;;;;;24295:1374:61:o;2260:557:58:-;2476:13;;2337:7;;-1:-1:-1;;;;;2468:36:58;2464:50;;-1:-1:-1;2513:1:58;2506:8;;2464:50;2525:12;2540:2;:13;;;-1:-1:-1;;;;;2540:37:58;;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1893:586:68:-;2011:6;;2063:87;2086:63;3745:9:47;2086:30:68;:10;2101:14;2086;:30::i;2063:87::-;2033:117;;2171:59;2189:8;-1:-1:-1;;;2171:17:68;:59::i;:::-;2160:70;;2251:46;2269:27;2287:8;2269:17;:27::i;:::-;2251:17;:46::i;:::-;2240:57;;2318:59;2336:8;-1:-1:-1;;;2318:17:68;:59::i;:::-;2307:70;;2387:21;2411:29;2431:8;2411:19;:29::i;:::-;2387:53;;;1893:586;-1:-1:-1;;;;;1893:586:68:o;3226:240:48:-;3286:68;3370:12;3385:34;3401:17;3385:15;:34::i;657:517:73:-;717:6;;1005:16;997:24;;993:68;;;1058:2;1035:20;1049:5;1035:13;:20::i;:::-;:25;1023:38;;993:68;1095:17;;;1153:1;1137:17;1136:30;;-1:-1:-1;657:517:73;;;:::o;2159:2498:67:-;2275:21;2312:41;;:::i;:::-;2363:35;2401:48;2423:14;2439:9;2401:21;:48::i;:::-;2363:86;;2459:30;;:::i;:::-;2503:20;;2499:51;;-1:-1:-1;2537:13:67;-1:-1:-1;2530:20:67;;-1:-1:-1;2530:20:67;2499:51;2560:25;2601:9;2596:2024;2616:27;;:34;2612:38;;2596:2024;;;2671:27;2701:14;:27;;;2729:1;2701:30;;;;;;;;;;;;;;2671:60;;2745:18;2766:25;:5;:23;:25::i;:::-;2745:46;;2878:9;2865:10;:22;2861:36;;;2889:8;;;;2861:36;3031:5;:16;;;2984:13;2998:17;2984:32;;;;;;;;;;;;;;:43;;;:63;2980:253;;3137:1;3116:22;;;;3202:5;:16;;;3156:13;3170:17;3156:32;;;;;;;;;;;;;;;;;;:62;2980:253;3264:144;3319:5;:16;;;3353:5;:14;;;3385:9;3264:37;:144::i;:::-;3247:161;;3423:16;4922:1:47;3457:45:67;;:5;:15;;;:45;3453:999;;;3571:14;;;;3534:52;;:14;;:36;:52::i;:::-;3522:64;-1:-1:-1;3604:29:67;:14;3631:1;3604:26;:29::i;:::-;3453:999;;;3658:46;3688:5;:15;;;3658:29;:46::i;:::-;3654:798;;;3724:81;3752:6;3760:5;:16;;;3778:5;:14;;;3794:10;3724:27;:81::i;:::-;3823:12;3874:38;3897:5;:14;;;3874:6;:22;;:38;;;;:::i;:::-;3990:14;;;;3853:59;;-1:-1:-1;3853:59:67;-1:-1:-1;3990:26:67;-1:-1:-1;3986:452:67;;;4121:54;4150:14;4166:1;4169:5;4121:28;:54::i;:::-;3986:452;;;4310:58;4324:43;:14;4361:5;4324:36;:43::i;:::-;4310:9;;:13;:58::i;:::-;4298:70;-1:-1:-1;4390:29:67;:14;4417:1;4390:26;:29::i;:::-;3654:798;;4514:95;4599:9;4514:13;4528:17;4514:32;;;;;;;;;;;;;;:63;;;:84;;:95;;;;:::i;:::-;4465:13;4479:17;4465:32;;;;;;;;;;;;;;:46;;:144;;;;;2596:2024;;;;2652:3;;2596:2024;;;-1:-1:-1;4637:13:67;;2159:2498;-1:-1:-1;;;;;;2159:2498:67:o;1427:120:74:-;1516:5;;;1511:16;;;;1483:8;1532:6;;;1511:28;1503:37;;;;;1271:2412:66;1440:21;1463;1496:14;1513:56;1549:7;1558:10;1513:35;:56::i;:::-;1496:73;;1922:31;1943:9;1922:20;:31::i;:::-;1906:47;;2060:13;2043;:30;;2035:39;;;;;;2303:21;2343:60;2374:13;2389;2343:30;:60::i;:::-;-1:-1:-1;2302:101:66;-1:-1:-1;2417:18:66;2413:62;;2437:38;;;;2413:62;2544:18;2565:22;:6;:20;:22::i;:::-;2544:43;;2597:456;2604:15;;;;;:46;;;2637:13;2623:10;:27;;2604:46;2597:456;;;2666:16;2685:57;2716:13;2731:10;2685:30;:57::i;:::-;2666:76;;2773:109;2809:59;2827:7;2836:10;2848:8;2858:9;2809:17;:59::i;:::-;2773:14;;:18;:109::i;:::-;2756:126;-1:-1:-1;2961:32:66;:6;2975:10;2987:5;2961:13;:32::i;:::-;2952:41;;3020:22;:6;:20;:22::i;:::-;3007:35;;2597:456;;;;3063:17;3090:509;3097:15;;3090:509;;3128:16;3147:57;3178:13;3193:10;3147:30;:57::i;:::-;3128:76;;3219:17;3238:12;3254:55;3285:13;3300:8;3254:30;:55::i;:::-;3218:91;;;;3331:7;3323:16;;;;;;3394:33;:9;3411;3422:4;3394:16;:33::i;:::-;3382:45;-1:-1:-1;3507:32:66;:6;3521:10;3533:5;3507:13;:32::i;:::-;3498:41;;3566:22;:6;:20;:22::i;:::-;3553:35;;3090:509;;;;;;3609:67;3645:7;3654:10;3666:9;3609:35;:67::i;:::-;1271:2412;;;;;;;;;;;;:::o;31021:595:61:-;31309:80;31328:6;31336:10;31348:8;31358:14;31374;31309:18;:80::i;:::-;31420:189;31451:6;:24;;;31489:6;:22;;;31525:6;:17;;;31556:20;31590:9;31420:17;:189::i;:::-;31400:17;;;;:209;;;;-1:-1:-1;;;;;;31021:595:61:o;2487:251:48:-;2553:67;2636:12;2651:40;2667:23;2651:15;:40::i;12731:689:62:-;12893:15;12910;12937:13;12964:22;13002:14;12989:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12989:28:62;;12964:53;;13027:22;13065:14;13052:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13052:28:62;;13027:53;;13095:9;13090:290;13110:14;13106:1;:18;13090:290;;;13157:4;13162:5;13157:11;;;;;;;;;;;;;;;;;;;;;;;;;;;13145:23;;:6;13152:1;13145:9;;;;;;;;;;;;;;;;;:23;13182:7;;;;;13215:4;13182:7;13215:11;;;;;;;;;;;;;;;;;;;;;;;;;;;13203:23;;:6;13210:1;13203:9;;;;;;;;;;;;;;;;;:23;13240:7;;;;;13262:108;;;;13313:1;13301:6;13308:1;13301:9;;;;;;;;;;;;;;:13;:30;;;;;13330:1;13318:6;13325:1;13318:9;;;;;;;;;;;;;;:13;13301:30;13293:62;;;;-1:-1:-1;;;13293:62:62;;;;;;;:::i;:::-;13126:3;;13090:290;;;-1:-1:-1;13398:6:62;;;;-1:-1:-1;12731:689:62;-1:-1:-1;;;;;12731:689:62:o;2875:255:48:-;2938:67;3021:12;3036:47;3052:30;3036:15;:47::i;1128:1465:64:-;1336:4;;1352:1212;1376:10;:17;1372:1;:21;1352:1212;;;1414:27;1444:10;1455:1;1444:13;;;;;;;;;;;;;;1414:43;;1511:9;1492:5;:15;;;:28;;:78;;;-1:-1:-1;1540:16:64;;:30;;;1492:78;:124;;;;1608:8;1590:5;:14;;;:26;;1492:124;1471:168;;;1631:8;;;1471:168;1837:24;1815:5;:18;;;:46;;;;;;;;;;:120;;;;-1:-1:-1;1903:32:64;1881:5;:18;;;:54;;;;;;;;;;1815:120;1790:159;;;;;;2027:14;;;;2006:18;;2027:28;;2046:8;2027:18;:28::i;:::-;2006:49;;2135:40;2165:9;2135:29;:40::i;:::-;2131:163;;;2218:1;2203:11;:16;;2195:25;;;;;;-1:-1:-1;;;;;;2316:30:64;;;;;:64;;-1:-1:-1;;;;;;2350:30:64;;;2316:64;2308:73;;;;;;2440:14;;;:28;2503:24;2482:18;;;;:45;;;2503:24;-1:-1:-1;2542:11:64;;-1:-1:-1;2542:11:64;1352:1212;1395:3;;1352:1212;;;-1:-1:-1;2581:5:64;;1128:1465;-1:-1:-1;;;;;;1128:1465:64:o;581:222:68:-;649:4;5069:1:47;684:48:68;;;;;:112;;-1:-1:-1;;5128:1:47;-1:-1:-1;748:48:68;;581:222::o;5145:648:64:-;5256:23;5494:17;5514:9;:16;5534:1;5514:21;:48;;5542:9;:16;5561:1;5542:20;5514:48;;;5538:1;5514:48;5494:68;;5572:37;5633:9;5612:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;5572:71;;5658:9;5653:103;5677:9;:16;5673:1;:20;5653:103;;;5733:9;5743:1;5733:12;;;;;;;;;;;;;;5714:13;5728:1;5714:16;;;;;;;;;;;;;;;;;:31;5695:3;;5653:103;;;-1:-1:-1;5773:13:64;5145:648;-1:-1:-1;;;5145:648:64:o;1928:134:71:-;1981:6;2009:18;2004:1;:23;;1995:33;;;;;18946:1650:61;19149:6;;;19192:35;:10;19212:14;19192:19;:35::i;:::-;19173:54;-1:-1:-1;19376:17:61;19408:65;19437:35;:10;19452:19;19437:14;:35::i;:::-;19408:9;;:28;:65::i;:::-;19376:97;-1:-1:-1;4847:25:47;20081:44:61;;20077:67;;;20135:1;20138:5;20127:17;;;;;;;;20077:67;20156:19;20177:12;20193:26;20208:10;20193:14;:26::i;:::-;20155:64;;;;20234:7;20229:31;;20251:1;20254:5;20243:17;;;;;;;;;;20229:31;20321:11;20335:59;20383:10;20335:43;:12;20367:10;20335:31;:43::i;:::-;:47;;:59::i;:::-;20321:73;;3872:3:47;20465:4:61;:31;20461:129;;;20520:1;20523:5;20512:17;;;;;;;;;;;20461:129;20568:4;-1:-1:-1;20574:4:61;;-1:-1:-1;20560:19:61;;-1:-1:-1;;;;20560:19:61;18946:1650;;;;;;;;;:::o;14283:175:71:-;14329:6;14356:1;14352;:5;;;14343:15;;;;;;14449:3;14398:9;14405:1;14398:5;:9::i;:::-;14389:19;;14411:34;14389:56;:63;;14365:88;;14283:175;;;:::o;2300:114::-;2350:6;2378:1;2373;:6;;;;2364:16;;;;;;-1:-1:-1;2401:7:71;;2406:2;2401:7;;2300:114::o;14636:6524::-;14685:6;-1:-1:-1;;;14708:1:71;:24;;;14699:34;;;;;;-1:-1:-1;;14756:1:71;:25;;;14752:39;;;-1:-1:-1;14790:1:71;14783:8;;14752:39;-1:-1:-1;;;14811:14:71;-1:-1:-1;;;14873:22:71;;:26;;;14869:98;;;14925:35;14916:44;14964:3;14916:51;14869:98;15002:1;14977;14981:18;14977:22;:26;;;14973:98;;;15029:35;15020:44;15068:3;15020:51;14973:98;15106:1;15081;15085:18;15081:22;:26;;;15077:98;;;15133:35;15124:44;15172:3;15124:51;15077:98;15210:1;15185;15189:18;15185:22;:26;;;15181:98;;;15237:35;15228:44;15276:3;15228:51;15181:98;15313:1;15289;15293:17;15289:21;:25;;;15285:97;;;15340:35;15331:44;15379:3;15331:51;15285:97;15416:1;15392;15396:17;15392:21;:25;;;15388:97;;;15443:35;15434:44;15482:3;15434:51;15388:97;15519:1;15495;15499:17;15495:21;:25;;;15491:97;;;15546:35;15537:44;15585:3;15537:51;15491:97;15622:1;15598;-1:-1:-1;;;15598:21:71;:25;;;15594:97;;;15649:35;15640:44;15688:3;15640:51;15594:97;15724:1;15701;15705:16;15701:20;:24;;;15697:96;;;15751:35;15742:44;15790:3;15742:51;15697:96;15826:1;15803;15807:16;15803:20;:24;;;15799:96;;;15853:35;15844:44;15892:3;15844:51;15799:96;15928:1;15905;15909:16;15905:20;:24;;;15901:96;;;15955:35;15946:44;15994:3;15946:51;15901:96;16030:1;16007;16011:16;16007:20;:24;;;16003:96;;;16057:35;16048:44;16096:3;16048:51;16003:96;16131:1;16109;16113:15;16109:19;:23;;;16105:95;;;16158:35;16149:44;16197:3;16149:51;16105:95;16232:1;16210;16214:15;16210:19;:23;;;16206:95;;;16259:35;16250:44;16298:3;16250:51;16206:95;16333:1;16311;16315:15;16311:19;:23;;;16307:95;;;16360:35;16351:44;16399:3;16351:51;16307:95;16434:1;16412;-1:-1:-1;;;16412:19:71;:23;;;16408:95;;;16461:35;16452:44;16500:3;16452:51;16408:95;16534:1;16513;16517:14;16513:18;:22;;;16509:94;;;16561:35;16552:44;16600:3;16552:51;16509:94;16634:1;16613;16617:14;16613:18;:22;;;16609:94;;;16661:35;16652:44;16700:3;16652:51;16609:94;16734:1;16713;16717:14;16713:18;:22;;;16709:94;;;16761:35;16752:44;16800:3;16752:51;16709:94;16834:1;16813;16817:14;16813:18;:22;;;16809:94;;;16861:35;16852:44;16900:3;16852:51;16809:94;16933:1;16913;16917:13;16913:17;:21;;;16909:93;;;16960:35;16951:44;16999:3;16951:51;16909:93;17032:1;17012;17016:13;17012:17;:21;;;17008:93;;;17059:35;17050:44;17098:3;17050:51;17008:93;17131:1;17111;17115:13;17111:17;:21;;;17107:93;;;17158:35;17149:44;17197:3;17149:51;17107:93;17230:1;17210;17214:13;17210:17;:21;;;17206:93;;;17257:35;17248:44;17296:3;17248:51;17206:93;17328:1;17309;17313:12;17309:16;:20;;;17305:92;;;17355:35;17346:44;17394:3;17346:51;17305:92;17426:1;17407;17411:12;17407:16;:20;;;17403:92;;;17453:35;17444:44;17492:3;17444:51;17403:92;17524:1;17505;17509:12;17505:16;:20;;;17501:92;;;17551:35;17542:44;17590:3;17542:51;17501:92;17622:1;17603;17607:12;17603:16;:20;;;17599:92;;;17649:35;17640:44;17688:3;17640:51;17599:92;17719:1;17701;17705:11;17701:15;:19;;;17697:91;;;17746:35;17737:44;17785:3;17737:51;17697:91;17816:1;17798;17802:11;17798:15;:19;;;17794:91;;;17843:35;17834:44;17882:3;17834:51;17794:91;17913:1;17895;17899:11;17895:15;:19;;;17891:91;;;17940:35;17931:44;17979:3;17931:51;17891:91;18010:1;17992;17996:11;17992:15;:19;;;17988:91;;;18037:35;18028:44;18076:3;18028:51;17988:91;18106:1;18089;18093:10;18089:14;:18;;;18085:90;;;18133:35;18124:44;18172:3;18124:51;18085:90;18202:1;18185;18189:10;18185:14;:18;;;18181:90;;;18229:35;18220:44;18268:3;18220:51;18181:90;18298:1;18281;18285:10;18281:14;:18;;;18277:90;;;18325:35;18316:44;18364:3;18316:51;18277:90;18394:1;18377;18381:10;18377:14;:18;;;18373:90;;;18421:35;18412:44;18460:3;18412:51;18373:90;18489:1;18473;18477:9;18473:13;:17;;;18469:89;;;18516:35;18507:44;18555:3;18507:51;18469:89;18584:1;18568;18572:9;18568:13;:17;;;18564:89;;;18611:35;18602:44;18650:3;18602:51;18564:89;18679:1;18663;18667:9;18663:13;:17;;;18659:89;;;18706:35;18697:44;18745:3;18697:51;18659:89;18774:1;18758;18762:9;18758:13;:17;;;18754:89;;;18801:35;18792:44;18840:3;18792:51;18754:89;18868:1;18853;18857:8;18853:12;:16;;;18849:88;;;18895:35;18886:44;18934:3;18886:51;18849:88;18962:1;18947;18951:8;18947:12;:16;;;18943:88;;;18989:35;18980:44;19028:3;18980:51;18943:88;19056:1;19041;19045:8;19041:12;:16;;;19037:88;;;19083:35;19074:44;19122:3;19074:51;19037:88;19150:1;19135;19139:8;19135:12;:16;;;19131:88;;;19177:35;19168:44;19216:3;19168:51;19131:88;19243:1;19229;19233:7;19229:11;:15;;;19225:87;;;19270:35;19261:44;19309:3;19261:51;19225:87;19336:1;19322;19326:7;19322:11;:15;;;19318:87;;;19363:35;19354:44;19402:3;19354:51;19318:87;19429:1;19415;19419:7;19415:11;:15;;;19411:87;;;19456:35;19447:44;19495:3;19447:51;19411:87;19522:1;19508;19512:7;19508:11;:15;;;19504:87;;;19549:35;19540:44;19588:3;19540:51;19504:87;19614:1;19601;19605:6;19601:10;:14;;;19597:86;;;19641:35;19632:44;19680:3;19632:51;19597:86;19706:1;19693;19697:6;19693:10;:14;;;19689:86;;;19733:35;19724:44;19772:3;19724:51;19689:86;19798:1;19785;19789:6;19785:10;:14;;;19781:86;;;19825:35;19816:44;19864:3;19816:51;19781:86;19890:1;19877;19881:6;19877:10;:14;;;19873:86;;;19917:35;19908:44;19956:3;19908:51;19873:86;19981:1;19969;19973:5;19969:9;:13;;;19965:85;;;20008:35;19999:44;20047:3;19999:51;19965:85;20072:1;20060;20064:5;20060:9;:13;;;20056:85;;;20099:35;20090:44;20138:3;20090:51;20056:85;20163:1;20151;20155:5;20151:9;:13;;;20147:85;;;20190:35;20181:44;20229:3;20181:51;20147:85;20254:1;20242;20246:5;20242:9;:13;;;20238:85;;;20281:35;20272:44;20320:3;20272:51;20238:85;20344:1;20333;20337:4;20333:8;:12;;;20329:84;;;20371:35;20362:44;20410:3;20362:51;20329:84;20434:1;20423;20427:4;20423:8;:12;;;20419:84;;;20461:35;20452:44;20500:3;20452:51;20419:84;20524:1;20513;20517:4;20513:8;:12;;;20509:84;;;20551:35;20542:44;20590:3;20542:51;20509:84;20614:1;20603;20607:4;20603:8;:12;;;20599:84;;;20641:35;20632:44;20680:3;20632:51;20599:84;20703:1;20693;20697:3;20693:7;:11;;;20689:83;;;20730:35;20721:44;20769:3;20721:51;20689:83;20792:1;20782;20786:3;20782:7;:11;;;20778:83;;;20819:35;20810:44;20858:3;20810:51;20778:83;20881:1;20871;20875:3;20871:7;:11;;;20867:83;;;20908:35;20899:44;20947:3;20899:51;20867:83;20970:1;20960;20964:3;20960:7;:11;;;20956:83;;;20997:35;20988:44;21036:3;20988:51;20956:83;21072:7;;;;21077:2;21072:7;21066:2;:14;21057:24;;21046:35;-1:-1:-1;;;;;21096:29:71;;;21087:39;;;;;4570:257:48;4629:87;4732:12;4747:33;4763:16;4747:15;:33::i;28987:1123:61:-;29259:1;29245:10;:15;;:49;;;;-1:-1:-1;;;;;;29264:30:61;;;29245:49;29237:58;;;;;;29367:1;29349:14;:19;;:57;;;;-1:-1:-1;;;;;;29372:34:61;;;29349:57;29341:66;;;;;;29469:15;29465:1;:19;:58;;;;-1:-1:-1;29507:16:61;29488:35;;;29465:58;29457:67;;;;;;29587:10;29583:1;:14;:48;;;;-1:-1:-1;29615:16:61;29601:30;;;29583:48;29575:57;;;;;;29733:16;29712:37;;;29678:72;;;;;;29806:45;;-1:-1:-1;;29806:45:61;-1:-1:-1;;;;;29806:45:61;;;;-1:-1:-1;;;;29861:53:61;-1:-1:-1;;;29861:53:61;;;;;;;;;;;;-1:-1:-1;;;;29924:55:61;-1:-1:-1;;;29924:55:61;;;;;;-1:-1:-1;;;;29989:45:61;-1:-1:-1;;;29989:45:61;;;;;;;;;;;-1:-1:-1;;;;;30044:59:61;-1:-1:-1;;;30044:59:61;;;;;;;;28987:1123::o;28669:312::-;28824:1;28806:14;:19;;:57;;;;-1:-1:-1;;;;;;28829:34:61;;;28806:57;28798:66;;;;;;28921:28;;;;;:53;;-1:-1:-1;;28921:53:61;-1:-1:-1;;;;;28921:53:61;;;;;;;;;28669:312::o;4025:2699:60:-;4140:7;4149:4;4169:21;4193:22;4205:9;4193:11;:22::i;:::-;4169:46;-1:-1:-1;2621:5:47;4283:8:60;:24;:29;4279:52;;4322:1;4325:5;4314:17;;;;;;;4279:52;4404:8;4387:13;:25;4383:48;;4422:1;4425:5;4414:17;;;;;;;4383:48;2621:5:47;4556:24:60;;;4555:42;3206:2:47;4680:38:60;;4676:1887;;4742:10;-1:-1:-1;4754:4:60;;-1:-1:-1;4734:25:60;;-1:-1:-1;4734:25:60;4676:1887;3258:3:47;4780:10:60;:39;4776:1787;;5092:20;2621:5:47;2742:7;5212:30:60;;5211:68;5131:148;;-1:-1:-1;;5131:148:60;;-1:-1:-1;2998:1:47;5131:148:60;5528:37;3479:2:47;5500:65:60;2998:1:47;5584:12:60;:37;;;;;;5626:1;5583:44;5306:335;;;;;;;;;4776:1787;3312:4:47;5662:10:60;:40;5658:905;;5718:20;2621:5:47;2789:8;5839:31:60;;5838:69;5757:150;;-1:-1:-1;;5757:150:60;;-1:-1:-1;3047:2:47;5757:150:60;5976:38;3532:3:47;5947:67:60;3047:2:47;6033:12:60;:38;;;;5658:905;3369:4:47;6112:10:60;:42;6108:455;;6170:20;2621:5:47;2839:9;6292:33:60;;6291:71;6209:153;;-1:-1:-1;;6209:153:60;;-1:-1:-1;3099:2:47;6209:153:60;6433:40;3588:3:47;6402:71:60;3099:2:47;6492:12:60;:40;;;;6108:455;6706:3;6711:5;6698:19;;;;;;4025:2699;;;;;;:::o;732:234:72:-;804:4;837:1;828:5;:10;;:26;;;;;851:3;842:5;:12;;828:26;820:35;;;;;;-1:-1:-1;;;914:9:72;903:21;-1:-1:-1;;;902:39:72;;;901:58;;732:234::o;928:386:63:-;2437:2:47;1069:27:63;:12;:25;:27::i;:::-;:58;;1061:86;;;;-1:-1:-1;;;1061:86:63;;;;;;;:::i;:::-;1157:61;1221:35;:33;:35::i;:::-;-1:-1:-1;;;;;1266:14:63;;;;;;;;;;;;;;;:26;;;;;;;-1:-1:-1;1266:26:63;;:41;928:386::o;972:752:68:-;1051:7;1096:1;1078:5;:15;;;:19;:77;;;;-1:-1:-1;1101:15:68;;;;5128:1:47;-1:-1:-1;1101:54:68;1078:77;1070:86;;;;;;1275:15;;;;5069:1:47;-1:-1:-1;1271:81:68;;-1:-1:-1;1338:14:68;;;;1331:21;;1271:81;1363:20;1386:45;1429:1;1411:5;:15;;;:19;1386:24;:45::i;:::-;1662:14;;;;1363:68;;-1:-1:-1;1662:55:68;;2839:9:47;;1662:32:68;;1363:68;1662:18;:32::i;7152:329:48:-;7244:12;395:7;7444:9;7436:18;;;;;;;;:38;;7152:329;-1:-1:-1;;7152:329:48:o;2056:225::-;2122:41;2179:12;2194:40;2210:23;2194:15;:40::i;5945:250::-;6015:58;6089:12;6104:44;6120:27;6104:15;:44::i;14753:385:64:-;14869:23;14908:30;14941:42;14957:7;14966:16;14941:15;:42::i;:::-;14908:75;;15061:1;15044:6;:13;:18;15040:37;;15071:6;-1:-1:-1;15064:13:64;;15040:37;15088:20;15101:6;15088:12;:20::i;1180:245:73:-;1403:1;1394:10;;;1354:21;;;;1393:24;;1180:245::o;4415:809:58:-;4512:6;4532:16;4562:5;4593:27;4622:29;4655:32;4676:10;4655:20;:32::i;:::-;4592:95;;-1:-1:-1;4592:95:58;-1:-1:-1;4698:11:58;-1:-1:-1;;;;;4723:33:58;;4719:438;;-1:-1:-1;5010:1:58;;-1:-1:-1;649:4:58;4719:438;;;5049:10;-1:-1:-1;;;;;5049:34:58;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5042:43;;5114:1;5107:4;:8;5099:17;;;;;;5175:4;5181:10;;-1:-1:-1;5181:10:58;-1:-1:-1;4415:809:58;-1:-1:-1;;4415:809:58:o;11271:218:59:-;11348:12;11372:41;11416:32;:30;:32::i;:::-;11465:17;;;;;;-1:-1:-1;;11465:17:59;;;;;11271:218::o;23057:1232:61:-;23273:7;23323:1;23300:20;:24;23292:33;;;;;;23492:9;23472:17;:29;23468:57;;;-1:-1:-1;23510:15:61;23503:22;;23468:57;23536:16;23555:32;:9;23569:17;23555:13;:32::i;:::-;23536:51;;23612:20;23601:8;:31;23597:155;;;23726:15;23719:22;;;;;23597:155;23811:23;23849:73;23901:20;23849:47;:8;3872:3:47;23849:12:61;:47::i;:73::-;23811:111;-1:-1:-1;23986:20:61;24009:54;3872:3:47;23811:111:61;24009:37;:54::i;:::-;23986:77;-1:-1:-1;24074:21:61;24110:141;3872:3:47;24111:70:61;24152:28;:10;23986:77;24152:14;:28::i;:::-;24111:36;:15;24131;24111:19;:36::i;24110:141::-;24074:177;23057:1232;-1:-1:-1;;;;;;;;;;23057:1232:61:o;8597:105:71:-;8644:6;8667:14;;;;-1:-1:-1;;;;;;8667:14:71;;8658:24;;;;;;-1:-1:-1;8695:2:71;;;8597:105::o;666:1445:67:-;912:27;;:34;800:21;;837:25;;;;908:73;;960:21;;;979:1;960:21;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;953:28;;;;;;908:73;1261:27;;:34;1244:570;-1:-1:-1;;1298:3:67;;;1297:9;1244:570;;1323:27;1353:14;:27;;;1381:1;1353:30;;;;;;;;;;;;;;1323:60;;1479:9;1451:25;:5;:23;:25::i;:::-;:37;1447:51;;;1490:8;;;1447:51;1683:16;;1665:34;;1661:143;;1736:16;;1770:19;;;;;1736:16;-1:-1:-1;1661:143:67;1244:570;;;;;;1918:35;1975:17;1956:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;1918:75:67;-1:-1:-1;2007:21:67;;2003:71;;2060:14;2030:13;2044:1;2030:16;;;;;;;;;;;;;;;;;;:44;2091:13;666:1445;-1:-1:-1;;;;;666:1445:67:o;8097:2067:58:-;8239:26;;:::i;:::-;8278:21;8301:29;8346:47;8372:10;8384:8;8346:25;:47::i;:::-;8277:116;;;;8408:14;8426:1;8408:19;8404:1538;;;8518:27;8794:33;8816:10;8794:21;:33::i;:::-;8676:151;;-1:-1:-1;8676:151:58;;-1:-1:-1;8676:151:58;-1:-1:-1;;;;;;8846:33:58;;;8842:1090;;8899:75;8977:37;:35;:37::i;:::-;8899:115;-1:-1:-1;9324:14:58;;;;;:47;;-1:-1:-1;9355:16:58;9342:29;;;9324:47;9316:56;;;;;;9445:14;9441:1;:18;:57;;;;-1:-1:-1;;;;;;9463:35:58;;;9441:57;9433:66;;;;;;9551:41;9595:17;;;;;;;;;;;:27;;;;;;;;;;9640:41;;-1:-1:-1;;9640:41:58;;;;;-1:-1:-1;;9699:52:58;;-1:-1:-1;;;;;9699:52:58;;;;-1:-1:-1;;;;9769:61:58;-1:-1:-1;;;9769:61:58;;;;;;;9853:64;;9595:27;;:17;;9853:64;;;;9699:52;;9853:64;:::i;:::-;;;;;;;;8842:1090;;;8404:1538;;9959:198;;;;;;;;-1:-1:-1;9959:198:58;;;;;;;;;10119:27;;;;:2;:27;9959:198;;;;;-1:-1:-1;8097:2067:58;;;;;:::o;31622:263:61:-;31808:70;31827:6;31835:10;31847:8;31857:4;31863:14;31808:18;:70::i;:::-;31622:263;;;;:::o;2037:716::-;2151:16;;2201:19;2197:38;;-1:-1:-1;2230:1:61;;-1:-1:-1;2230:1:61;2222:13;;2197:38;2270:1;2253:14;:18;2245:27;;;;;;2329:68;2375:6;:21;;;2329:41;2355:14;2329:6;:21;;;:25;;:41;;;;:::i;:68::-;2317:80;;2415:64;2457:6;:21;;;2415:37;2437:14;2415:6;:17;;;:21;;:37;;;;:::i;:64::-;2514:21;;;;2407:72;;-1:-1:-1;2514:46:61;;2545:14;2514:30;:46::i;:::-;2490:21;;;:70;2590:17;;;;:33;;2617:5;2590:26;:33::i;:::-;2570:17;;;:53;2657:21;;;;:41;;2688:9;2657:30;:41::i;:::-;2633:21;;;:65;2709:37;2633:6;2709:29;:37::i;4782:1443:67:-;4940:36;4979:14;:27;;;5007:5;4979:34;;;;;;;;;;;;;;4940:73;;5193:5;5202:1;5193:10;5189:779;;5364:32;5399:14;:27;;;5435:1;5427:5;:9;5399:38;;;;;;;;;;;;;;5364:73;;5498:14;:25;;;5473:10;:21;;;:50;:116;;;;;5566:14;:23;;;5543:10;:19;;;:46;5473:116;:186;;;;-1:-1:-1;5609:20:67;;;;4922:1:47;5609:50:67;5473:186;5452:506;;;5794:19;;;;:30;;5818:5;5794:23;:30::i;:::-;5772:19;;;:52;5868:24;5842:23;;;:50;5910:33;:14;5937:5;5910:26;:33::i;:::-;5189:779;;4922:1:47;6060:24:67;;;:53;;;6123:23;;;:31;;;;6164:27;;:54;-1:-1:-1;;4782:1443:67:o;3821:792:66:-;3977:16;4005:99;4107:35;:33;:35::i;:::-;-1:-1:-1;;;;;4170:14:66;;4152:15;4170:14;;;;;;;;;;;:26;;;;;;;;:36;;;;;;;;:45;4005:137;;-1:-1:-1;4170:45:66;;;;4152:63;;;;4397:70;4185:10;4197:8;4457:9;4397:37;:70::i;:::-;4351:116;-1:-1:-1;4489:36:66;4351:116;4516:8;4489:26;:36::i;:::-;-1:-1:-1;;;;;4543:14:66;;;;;;;;;;;;;;;;:26;;;;;;;;;:36;;;;;;;-1:-1:-1;;;4543:36:66;;;4536:43;;-1:-1:-1;;;;;;4536:43:66;;;-1:-1:-1;4543:36:66;3821:792::o;25850:1161:61:-;26154:100;26257:29;:27;:29::i;:::-;26296:35;26334:17;;;;;;;;;;;:27;;;;;;;;:43;;;;;;;;;26478:25;;;26513:15;;;:26;;;26569:24;;-1:-1:-1;;;;;26569:24:61;;;26549:17;;;:44;;;;-1:-1:-1;;;26627:28:61;;;;;26603:21;;;:52;26690:29;-1:-1:-1;;;26690:29:61;;;;26665:22;;;:54;-1:-1:-1;;;26749:24:61;;;;26729:17;;;:44;-1:-1:-1;;;26810:31:61;;;;;;26783:24;;;:58;26154:132;;-1:-1:-1;26334:43:61;26852:153;;;;26910:28;;;;-1:-1:-1;;;;;26910:28:61;26886:21;;;:52;26852:153;;;26993:1;26969:21;;;:25;26852:153;25850:1161;;;;;;;;:::o;2027:143:74:-;2098:6;2123:40;2127:32;2131:1;3872:3:47;2127::74;:32::i;:::-;2161:1;2123:3;:40::i;20852:1240:61:-;20918:6;20926:4;3872:3:47;21007:10:61;:38;21003:61;;;-1:-1:-1;21055:1:61;;-1:-1:-1;21055:1:61;21047:17;;21003:61;21159:13;21175:71;21205:40;3872:3:47;21234:10:61;21205:28;:40::i;:::-;21175:10;;:29;:71::i;:::-;21159:87;;21530:21;21554:29;21576:6;21554:21;:29::i;:::-;21530:53;;21678:1;21660:14;:19;;;21656:42;;21689:1;21692:5;21681:17;;;;;;;;21656:42;21708:13;21736:317;21773:266;21812:157;21855:32;21872:14;21855:16;:32::i;:::-;4677:21:47;21812:17:61;:157::i;:::-;-1:-1:-1;;;21773:17:61;:266::i;:::-;21736:19;:317::i;:::-;21708:345;;;-1:-1:-1;22080:4:61;;-1:-1:-1;;;;20852:1240:61;;;;:::o;13336:769:71:-;13385:6;13412:1;13408;:5;;;13399:15;;;;;;13421:10;13441:13;;;;-1:-1:-1;;;13464:25:71;;13460:56;;13500:2;13504:9;;;;13493;13460:56;13531:11;13525:2;:17;13521:48;;13553:2;13557:9;;;;13546;13521:48;13584:7;13578:2;:13;13574:44;;13602:2;13606:9;;;;13595;13574:44;13633:5;13627:2;:11;13623:40;;13649:1;13652:8;;;;13642;13623:40;13678:4;13672:2;:10;13668:39;;13693:1;13696:8;;;;13686;13668:39;13722:3;13716:2;:9;13712:38;;13736:1;13739:8;;;;13729;13712:38;13765:3;13759:2;:9;13755:23;;13777:1;13770:8;;;;13755:23;-1:-1:-1;;13833:8:71;;13845:2;13833:14;13866:11;;;;13890:3;:9;;;13866:34;-1:-1:-1;;;13906:166:71;13950:1;13944:3;:7;13906:166;;;13972:8;;;14006:3;14000:9;;;14049:16;;;14039:26;;;;;14024:3;:7;14017:14;;13961:1;13953:9;13906:166;;;-1:-1:-1;14093:6:71;;13336:769;-1:-1:-1;;;;;13336:769:71:o;1013:838:72:-;1215:1;1210:6;;;1219:66;1210:75;;;1135:70;;1134:152;1381:1;1376:6;;;1385:66;1376:75;;;1301:70;;1300:152;1547:1;1542:6;;;1471:66;1467:70;;;;1466:83;1644:1;1639:6;;;1648:66;1639:75;;;1564:70;;1563:152;1739:2;1734:7;;;1729:13;1766:2;1761:7;;;1756:13;1794:2;1789:7;;;1783:14;1833:3;1828:8;;;1839:4;1828:15;;;1815:8;;1814:30;;1013:838::o;16718:1107:64:-;16820:23;550:2;16917:6;:30;;;;16909:39;;;;;;16959:90;17052:37;:35;:37::i;:::-;-1:-1:-1;;;;;17166:14:64;;17099:64;17166:14;;;;;;;;;;16959:130;;-1:-1:-1;17223:28:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;17190:61;;17267:9;17262:533;17286:6;17282:10;;:1;:10;17262:533;;;17313:42;17358:12;17371:1;17358:15;;;;;;;;17313:60;;17387:27;17417:6;17424:1;17417:9;;;;;;;;;;;;;;;;;;;17565:23;;;;;17546:42;;17619:21;;;;;17602:14;;;:38;;;;17672:22;-1:-1:-1;;;17672:22:64;;;17654:15;;;:40;-1:-1:-1;;;17725:21:64;;;;;;;17708:38;;:14;;;:38;17760:17;;:24;;;;-1:-1:-1;17565:23:64;17294:3;17262:533;;;-1:-1:-1;17812:6:64;16718:1107;-1:-1:-1;;;;;16718:1107:64:o;15883:829::-;15977:13;;15960:14;15977:13;16023:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16023:21:64;;16000:44;;16059:9;16054:257;16074:6;16070:1;:10;16054:257;;;16101:27;16131:6;16138:1;16131:9;;;;;;;;;;;;;;16101:39;;16221:79;16250:5;:16;;;16268:5;:14;;;16284:5;:15;;;16221:28;:79::i;:::-;16212:3;16216:1;16212:6;;;;;;;;;;;;;;;;;:88;-1:-1:-1;16082:3:64;;16054:257;;;-1:-1:-1;16365:1:64;16376:330;16387:6;16383:1;:10;16376:330;;;16421:1;16436:243;16447:1;16443;:5;:28;;;;;16465:3;16469:1;16465:6;;;;;;;;;;;;;;16452:3;16460:1;16456;:5;16452:10;;;;;;;;;;;;;;:19;16443:28;16436:243;;;16551:3;16555:1;16551:6;;;;;;;;;;;;;;16559:3;16567:1;16563;:5;16559:10;;;;;;;;;;;;;;16528:3;16536:1;16532;:5;16528:10;;;;;;;;;;;;;16540:3;16544:1;16540:6;;;;;;;;;;;;;16527:43;;;;;;;;;;16618:6;16625:1;16618:9;;;;;;;;;;;;;;16629:6;16640:1;16636;:5;16629:13;;;;;;;;;;;;;;16589:6;16600:1;16596;:5;16589:13;;;;;;;;;;;;;16604:6;16611:1;16604:9;;;;;;;;;;;;;;;;;16588:55;;;;;-1:-1:-1;;16661:3:64;16436:243;;;-1:-1:-1;16692:3:64;;16376:330;;2823:435:58;2919:27;2948:29;2993:50;3046:32;:30;:32::i;:::-;3088:27;3118:17;;;;;-1:-1:-1;;3118:17:58;;;;3175:13;-1:-1:-1;;;;;3175:13:58;;;-1:-1:-1;;;3225:26:58;;;;;;-1:-1:-1;2823:435:58:o;4265:217:48:-;4327:41;4384:12;4399:36;4415:19;4399:15;:36::i;6460:548:58:-;6592:21;6627:29;6681:75;6759:37;:35;:37::i;:::-;6806:41;6850:17;;;;;;;;;;;:27;;;;;;-1:-1:-1;;;6850:27:58;;6904:26;;;;-1:-1:-1;;;;;6904:26:58;;-1:-1:-1;;;6966:35:58;;;;;;6460:548::o;3904:261:48:-;3971:75;4062:12;4077:41;4093:24;4077:15;:41::i;27280:581:61:-;27370:35;27408:32;27433:6;27408:24;:32::i;:::-;27370:70;;27502:23;27528:13;:24;;;;;;;;;;;;27502:50;;27563:224;27594:13;27621:6;:17;;;27652:6;:21;;;27687:6;:22;;;27723:16;27563:224;;27753:6;:24;;;27563:17;:224::i;:::-;27798:56;27817:13;27832:6;:21;;;27798:18;:56::i;3768:191:71:-;3825:6;3855:13;;;;:9;;;;:13;-1:-1:-1;;;;;;3883:19:71;;;;;:42;;-1:-1:-1;;;;;;3906:19:71;;;3874:52;;;;;864:554:65;997:7;5630:6:47;1024:38:65;;;1016:47;;;;;;1093:16;1081:28;;;1073:37;;;;;;5128:1:47;1128:48:65;;;1120:57;;;;;;-1:-1:-1;1233:42:65;1273:2;1233:42;;;;1300:39;1338:1;1300:39;;;;1232:108;1371:25;;;1232:165;864:554;;;;;:::o;6374:226:48:-;6436:50;6502:12;6517:36;6533:19;6517:15;:36::i;27017:257:61:-;27181:18;;27218:50::o;-1:-1:-1:-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;14:161:127:-;83:20;;143:6;132:18;;122:29;;112:2;;165:1;162;155:12;180:193;;302:2;290:9;281:7;277:23;273:32;270:2;;;323:6;315;308:22;270:2;-1:-1:-1;351:16:127;;260:113;-1:-1:-1;260:113:127:o;378:196::-;;489:2;477:9;468:7;464:23;460:32;457:2;;;510:6;502;495:22;457:2;538:30;558:9;538:30;:::i;579:367::-;;;704:2;692:9;683:7;679:23;675:32;672:2;;;725:6;717;710:22;672:2;753:30;773:9;753:30;:::i;:::-;743:40;;833:2;822:9;818:18;805:32;880:5;873:13;866:21;859:5;856:32;846:2;;907:6;899;892:22;846:2;935:5;925:15;;;662:284;;;;;:::o;1150:347::-;1352:2;1334:21;;;1391:2;1371:18;;;1364:30;1430:25;1425:2;1410:18;;1403:53;1488:2;1473:18;;1324:173::o;1502:346::-;1704:2;1686:21;;;1743:2;1723:18;;;1716:30;-1:-1:-1;;;1777:2:127;1762:18;;1755:52;1839:2;1824:18;;1676:172::o;1853:344::-;2055:2;2037:21;;;2094:2;2074:18;;;2067:30;-1:-1:-1;;;2128:2:127;2113:18;;2106:50;2188:2;2173:18;;2027:170::o;2202:347::-;2404:2;2386:21;;;2443:2;2423:18;;;2416:30;2482:25;2477:2;2462:18;;2455:53;2540:2;2525:18;;2376:173::o;2554:345::-;2756:2;2738:21;;;2795:2;2775:18;;;2768:30;-1:-1:-1;;;2829:2:127;2814:18;;2807:51;2890:2;2875:18;;2728:171::o;2904:337::-;3106:2;3088:21;;;3145:2;3125:18;;;3118:30;-1:-1:-1;;;3179:2:127;3164:18;;3157:43;3232:2;3217:18;;3078:163::o;3246:343::-;3448:2;3430:21;;;3487:2;3467:18;;;3460:30;-1:-1:-1;;;3521:2:127;3506:18;;3499:49;3580:2;3565:18;;3420:169::o;3594:340::-;3796:2;3778:21;;;3835:2;3815:18;;;3808:30;-1:-1:-1;;;3869:2:127;3854:18;;3847:46;3925:2;3910:18;;3768:166::o;3939:339::-;4141:2;4123:21;;;4180:2;4160:18;;;4153:30;-1:-1:-1;;;4214:2:127;4199:18;;4192:45;4269:2;4254:18;;4113:165::o;4283:347::-;4485:2;4467:21;;;4524:2;4504:18;;;4497:30;4563:25;4558:2;4543:18;;4536:53;4621:2;4606:18;;4457:173::o;4635:346::-;4837:2;4819:21;;;4876:2;4856:18;;;4849:30;-1:-1:-1;;;4910:2:127;4895:18;;4888:52;4972:2;4957:18;;4809:172::o;4986:345::-;5188:2;5170:21;;;5227:2;5207:18;;;5200:30;-1:-1:-1;;;5261:2:127;5246:18;;5239:51;5322:2;5307:18;;5160:171::o;5336:342::-;5538:2;5520:21;;;5577:2;5557:18;;;5550:30;-1:-1:-1;;;5611:2:127;5596:18;;5589:48;5669:2;5654:18;;5510:168::o;5683:340::-;5885:2;5867:21;;;5924:2;5904:18;;;5897:30;-1:-1:-1;;;5958:2:127;5943:18;;5936:46;6014:2;5999:18;;5857:166::o;6028:343::-;6230:2;6212:21;;;6269:2;6249:18;;;6242:30;-1:-1:-1;;;6303:2:127;6288:18;;6281:49;6362:2;6347:18;;6202:169::o;6376:343::-;6578:2;6560:21;;;6617:2;6597:18;;;6590:30;-1:-1:-1;;;6651:2:127;6636:18;;6629:49;6710:2;6695:18;;6550:169::o;6724:346::-;6926:2;6908:21;;;6965:2;6945:18;;;6938:30;-1:-1:-1;;;6999:2:127;6984:18;;6977:52;7061:2;7046:18;;6898:172::o;7075:347::-;7277:2;7259:21;;;7316:2;7296:18;;;7289:30;7355:25;7350:2;7335:18;;7328:53;7413:2;7398:18;;7249:173::o;7427:218::-;-1:-1:-1;;;;;7591:47:127;;;;7573:66;;7561:2;7546:18;;7528:117::o;7650:188::-;7824:6;7812:19;;;;7794:38;;7782:2;7767:18;;7749:89::o;7843:265::-;8051:6;8039:19;;;;8021:38;;8090:2;8075:18;;8068:34;8009:2;7994:18;;7976:132::o", "language": "Solidity", "natspec": {"methods": {"initializeMarkets(uint16,bool)": {"notice": "Initialize the market for a given currency id, done once a quarter", "details": "emit:MarketsInitializedauth:none", "params": {"currencyId": "currency of markets to initialize", "isFirstInit": "true if this is the first time the markets have been initialized"}}, "sweepCashIntoMarkets(uint16)": {"notice": "Sweeps nToken cash balance into markets after accounting for cash withholding. Can be done after fCash residuals are purchased to ensure that markets have maximum liquidity.", "details": "emit:CashSweepIntoMarketsauth:none", "params": {"currencyId": "currency of markets to initialize"}}}, "kind": "dev", "notice": "Initialize markets is called once every quarter to setup the new markets. Only the nToken account can initialize markets, and this method will be called on behalf of that account. In this action the following will occur:  - nToken Liquidity Tokens will be settled  - Any ifCash assets will be settled  - If nToken liquidity tokens are settled with negative net ifCash, enough cash will be withheld at the PV    to purchase offsetting positions  - fCash positions are written to storage  - For each market, calculate the proportion of fCash to cash given:     - previous oracle rates     - rate anchor set by governance     - percent of cash to deposit into the market set by governance  - Set new markets and add liquidity tokens to portfolio", "version": 1}, "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x40 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBB6DD58E EQ PUSH2 0x45 JUMPI DUP1 PUSH4 0xD0E064C0 EQ PUSH2 0x67 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x65 PUSH2 0x60 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F24 JUMP JUMPDEST PUSH2 0x87 JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x65 PUSH2 0x82 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F3E JUMP JUMPDEST PUSH2 0x274 JUMP JUMPDEST TIMESTAMP PUSH2 0x90 PUSH2 0x4D69 JUMP JUMPDEST PUSH2 0x9A DUP2 DUP5 PUSH2 0x6F0 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD MLOAD MLOAD PUSH2 0xC6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x50C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xD1 DUP4 PUSH2 0x709 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x80 ADD MLOAD LT ISZERO PUSH2 0xF7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x500D JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x0 SWAP2 PUSH2 0x115 SWAP2 SWAP1 PUSH1 0x2 BYTE PUSH2 0xE10 MUL PUSH2 0x72C JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT PUSH2 0x136 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x4F78 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x174 SWAP1 DUP6 SWAP1 DUP4 PUSH2 0x16D JUMP JUMPDEST PUSH2 0x15A PUSH2 0x4DB2 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x152 JUMPI SWAP1 POP JUMPDEST POP DUP8 PUSH2 0x78F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x18F DUP3 DUP7 PUSH1 0x60 ADD MLOAD PUSH2 0x8EF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC0 DUP7 ADD MLOAD DUP7 MLOAD MLOAD SWAP2 SWAP3 POP PUSH2 0x1A8 SWAP2 PUSH2 0xFFFF AND DUP5 PUSH2 0x90B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x21285613 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x4250AC26 SWAP1 PUSH2 0x1E1 SWAP1 DUP11 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x52EA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x20D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x231 SWAP2 SWAP1 PUSH2 0x4F0C JUMP JUMPDEST POP PUSH32 0x120B36BD1B47AE64F0F3EA6EB0FBFBA209B2C780A31864E382D9957377A9F946 DUP8 DUP3 PUSH1 0x40 MLOAD PUSH2 0x263 SWAP3 SWAP2 SWAP1 PUSH2 0x52EA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP JUMP JUMPDEST TIMESTAMP PUSH2 0x27D PUSH2 0x4D69 JUMP JUMPDEST PUSH2 0x287 DUP2 DUP6 PUSH2 0x6F0 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x0 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2E0 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x2CD PUSH2 0x4DB2 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2C5 JUMPI SWAP1 POP JUMPDEST POP DUP3 MLOAD PUSH1 0x20 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x306 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x5260 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x330 JUMPI PUSH1 0x20 DUP3 ADD MLOAD MLOAD MLOAD ISZERO PUSH2 0x330 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x51B0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x343 DUP4 DUP4 DUP7 DUP10 PUSH2 0xFFFF AND DUP10 PUSH2 0x92E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x35D DUP8 PUSH2 0xFFFF AND DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x9C0 JUMP JUMPDEST SWAP1 POP PUSH2 0x367 PUSH2 0x4DB2 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP7 MLOAD PUSH1 0x20 ADD MLOAD DUP2 LT ISZERO PUSH2 0x660 JUMPI PUSH2 0x396 PUSH2 0x387 DUP3 PUSH1 0x1 ADD PUSH2 0x9FC JUMP JUMPDEST PUSH2 0x390 DUP11 PUSH2 0x709 JUMP JUMPDEST SWAP1 PUSH2 0x72C JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE DUP4 MLOAD DUP1 MLOAD PUSH1 0x0 SWAP2 PUSH2 0x3C9 SWAP2 DUP9 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x3B3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x2 PUSH1 0xFF AND ADD DUP8 DUP13 PUSH2 0xAA0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3E4 DUP11 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0xB05 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP10 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x3FA SWAP1 PUSH1 0x1 DUP7 ADD DUP5 PUSH2 0xB62 JUMP JUMPDEST SWAP1 POP DUP12 DUP1 PUSH2 0x414 JUMPI POP DUP4 PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x414 JUMPI POP DUP9 MLOAD PUSH1 0x2 EQ JUMPDEST DUP1 PUSH2 0x425 JUMPI POP PUSH1 0x20 DUP11 ADD MLOAD MLOAD MLOAD DUP5 LT ISZERO JUMPDEST DUP1 PUSH2 0x453 JUMPI POP DUP4 PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x453 JUMPI POP DUP9 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x443 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xC0 ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 PUSH2 0x47B DUP5 DUP10 PUSH1 0x60 ADD MLOAD DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x46E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xBD4 JUMP JUMPDEST SWAP1 POP DUP1 DUP8 PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x4AB DUP2 DUP6 DUP5 DUP12 PUSH1 0x40 ADD MLOAD DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x49D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH2 0xBF1 JUMP JUMPDEST PUSH1 0xC0 DUP9 ADD DUP2 SWAP1 MSTORE PUSH2 0x4CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x5290 JUMP JUMPDEST POP PUSH2 0x63C JUMP JUMPDEST DUP4 PUSH2 0x4F9 JUMPI DUP9 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x4E6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xC0 ADD MLOAD SWAP5 POP PUSH2 0x556 JUMP JUMPDEST DUP4 PUSH1 0x1 EQ ISZERO PUSH2 0x51B JUMPI PUSH2 0x514 DUP10 PUSH2 0x50F DUP14 PUSH2 0x709 JUMP JUMPDEST PUSH2 0xC1B JUMP JUMPDEST SWAP5 POP PUSH2 0x556 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x532 PUSH2 0x529 DUP7 PUSH2 0x9FC JUMP JUMPDEST PUSH2 0x390 DUP15 PUSH2 0x709 JUMP JUMPDEST SWAP1 POP PUSH2 0x552 DUP2 DUP8 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x545 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xCB4 JUMP JUMPDEST SWAP6 POP POP JUMPDEST PUSH1 0x0 PUSH2 0x57B DUP7 DUP5 DUP5 DUP12 PUSH1 0x40 ADD MLOAD DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x56E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xD4B JUMP JUMPDEST SWAP1 POP DUP8 PUSH1 0x20 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x58D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SGT ISZERO PUSH2 0x607 JUMPI DUP8 PUSH1 0x20 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5AC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x5C0 DUP5 DUP3 PUSH2 0xBD4 JUMP JUMPDEST DUP8 PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x5E3 DUP8 PUSH1 0x40 ADD MLOAD DUP6 DUP5 DUP12 PUSH1 0x40 ADD MLOAD DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x49D JUMPI INVALID JUMPDEST SWAP6 POP DUP6 PUSH2 0x602 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x4FDF JUMP JUMPDEST PUSH2 0x617 JUMP JUMPDEST PUSH2 0x611 DUP5 DUP3 PUSH2 0xBD4 JUMP JUMPDEST PUSH1 0x40 DUP9 ADD MSTORE JUMPDEST PUSH1 0x1 DUP8 PUSH1 0x40 ADD MLOAD SLT ISZERO PUSH2 0x62C JUMPI PUSH1 0x1 PUSH1 0x40 DUP9 ADD MSTORE JUMPDEST POP PUSH1 0xC0 DUP7 ADD DUP6 SWAP1 MSTORE PUSH1 0xE0 DUP7 ADD DUP12 SWAP1 MSTORE JUMPDEST PUSH1 0xC0 DUP7 ADD MLOAD PUSH1 0xA0 DUP8 ADD MSTORE PUSH2 0x655 DUP7 PUSH2 0xFFFF DUP16 AND DUP13 PUSH2 0xDED JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x36B JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x67E DUP8 PUSH1 0xC0 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0xE36 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP SWAP3 POP POP POP PUSH2 0x69A DUP8 PUSH1 0xC0 ADD MLOAD DUP12 PUSH2 0xFFFF AND DUP10 PUSH1 0x60 ADD MLOAD PUSH2 0x90B JUMP JUMPDEST PUSH2 0x6AD DUP8 PUSH1 0xC0 ADD MLOAD DUP3 DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0x1075 JUMP JUMPDEST PUSH32 0xCFFEFF9ACCC9171F01FEC36E09A1A06F0160CE50A8C4C0A2ADFF9CEC562ADF08 DUP11 PUSH1 0x40 MLOAD PUSH2 0x6DC SWAP2 SWAP1 PUSH2 0x52DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x6FA DUP3 DUP3 PUSH2 0x10E8 JUMP JUMPDEST PUSH2 0x703 DUP2 PUSH2 0x118B JUMP JUMPDEST SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x76A700 DUP3 LT ISZERO PUSH2 0x71B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x76A700 DUP3 JUMPDEST MOD DUP3 SUB SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x786 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7AC DUP6 PUSH1 0xC0 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND PUSH2 0x11AE JUMP JUMPDEST PUSH1 0xA0 DUP7 ADD MLOAD DUP6 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 BYTE PUSH3 0xF4240 MUL SWAP1 PUSH1 0x0 SWAP1 ISZERO PUSH2 0x7D9 JUMPI PUSH2 0x7D4 DUP6 PUSH3 0x76A700 PUSH2 0xB05 JUMP JUMPDEST PUSH2 0x7DB JUMP JUMPDEST DUP5 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7E8 DUP5 PUSH2 0x11E3 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 ISZERO PUSH2 0x8D1 JUMPI PUSH1 0x0 PUSH2 0x801 DUP10 PUSH1 0x80 ADD MLOAD DUP4 PUSH2 0x1208 JUMP JUMPDEST SWAP1 POP DUP8 MLOAD PUSH1 0x0 EQ DUP1 ISZERO PUSH2 0x820 JUMPI POP DUP9 MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x820 SWAP1 DUP3 DUP10 PUSH2 0x12BB JUMP JUMPDEST ISZERO PUSH2 0x844 JUMPI PUSH2 0x831 DUP6 DUP4 PUSH1 0x0 PUSH2 0x1360 JUMP JUMPDEST SWAP5 POP PUSH2 0x83C DUP6 PUSH2 0x11E3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7EB JUMP JUMPDEST PUSH1 0xC0 DUP10 ADD MLOAD DUP10 MLOAD MLOAD PUSH1 0x0 SWAP2 PUSH2 0x85D SWAP2 PUSH2 0xFFFF AND DUP5 PUSH2 0x13AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x8B1 JUMPI DUP10 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x878 SWAP1 DUP5 DUP8 PUSH2 0x13F0 JUMP JUMPDEST SWAP1 POP DUP1 DUP7 GT ISZERO PUSH2 0x88A JUMPI POP PUSH1 0x0 PUSH2 0x897 JUMP JUMPDEST PUSH2 0x894 DUP2 DUP8 PUSH2 0xB05 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x8AD PUSH2 0x8A6 DUP4 DUP6 DUP13 DUP6 PUSH2 0x14CF JUMP JUMPDEST DUP10 SWAP1 PUSH2 0x1515 JUMP JUMPDEST SWAP8 POP POP JUMPDEST PUSH2 0x8BD DUP7 DUP5 PUSH1 0x0 PUSH2 0x1360 JUMP JUMPDEST SWAP6 POP PUSH2 0x8C8 DUP7 PUSH2 0x11E3 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x7EB JUMP JUMPDEST DUP8 MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x8E1 SWAP1 DUP7 PUSH2 0x152B JUMP JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8FB DUP4 DUP4 PUSH2 0x1515 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x919 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x929 DUP4 DUP4 DUP4 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x155C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 ISZERO PUSH2 0x953 JUMPI PUSH2 0x942 DUP7 PUSH2 0x1672 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND PUSH1 0x80 DUP10 ADD MSTORE PUSH2 0x978 JUMP JUMPDEST PUSH2 0x95D DUP9 DUP8 PUSH2 0x168E JUMP JUMPDEST PUSH2 0x969 DUP6 DUP8 DUP11 DUP11 PUSH2 0x1768 JUMP JUMPDEST PUSH2 0x975 DUP9 DUP9 DUP8 DUP10 PUSH2 0x17F8 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x60 DUP9 ADD MLOAD PUSH2 0x987 SWAP1 DUP3 PUSH2 0x8EF JUMP JUMPDEST PUSH1 0x60 DUP10 ADD DUP3 SWAP1 MSTORE SWAP2 POP PUSH4 0x5F5E100 DUP3 SGT PUSH2 0x9B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x5181 JUMP JUMPDEST POP SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x9C8 PUSH2 0x4DFA JUMP JUMPDEST PUSH2 0x9D0 PUSH2 0x4DFA JUMP JUMPDEST PUSH2 0x9DA DUP5 DUP5 PUSH2 0x1881 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE PUSH2 0x9EB DUP5 DUP5 PUSH2 0x18B9 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 EQ ISZERO PUSH2 0xA11 JUMPI POP PUSH3 0x76A700 PUSH2 0x727 JUMP JUMPDEST DUP2 PUSH1 0x2 EQ ISZERO PUSH2 0xA24 JUMPI POP PUSH3 0xED4E00 PUSH2 0x727 JUMP JUMPDEST DUP2 PUSH1 0x3 EQ ISZERO PUSH2 0xA38 JUMPI POP PUSH4 0x1DA9C00 PUSH2 0x727 JUMP JUMPDEST DUP2 PUSH1 0x4 EQ ISZERO PUSH2 0xA4C JUMPI POP PUSH4 0x3B53800 PUSH2 0x727 JUMP JUMPDEST DUP2 PUSH1 0x5 EQ ISZERO PUSH2 0xA60 JUMPI POP PUSH4 0x9450C00 PUSH2 0x727 JUMP JUMPDEST DUP2 PUSH1 0x6 EQ ISZERO PUSH2 0xA74 JUMPI POP PUSH4 0x128A1800 PUSH2 0x727 JUMP JUMPDEST DUP2 PUSH1 0x7 EQ ISZERO PUSH2 0xA88 JUMPI POP PUSH4 0x25143000 PUSH2 0x727 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x5073 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xABB PUSH4 0x5F5E100 PUSH2 0xAB5 DUP10 DUP10 PUSH2 0x18E3 JUMP JUMPDEST SWAP1 PUSH2 0x1931 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP6 ADD DUP2 SWAP1 MSTORE DUP4 MLOAD MLOAD PUSH1 0x20 DUP1 DUP8 ADD MLOAD SWAP1 DUP7 ADD MLOAD SWAP3 SWAP4 POP PUSH2 0xAEA SWAP3 SWAP2 PUSH2 0xFFFF AND SWAP1 DUP9 DUP6 PUSH2 0x1962 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0xAFA SWAP1 DUP3 PUSH2 0x1A5F JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xB5C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 GT ISZERO DUP1 ISZERO PUSH2 0xB79 JUMPI POP DUP4 PUSH1 0x20 ADD MLOAD DUP4 GT ISZERO JUMPDEST PUSH2 0xB82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 PUSH1 0x8 PUSH1 0x0 NOT DUP7 ADD MUL ADD SWAP1 PUSH1 0xFF SWAP1 DUP3 SHR AND PUSH4 0x3B9ACA00 MUL PUSH1 0x0 PUSH2 0xBBB PUSH2 0xBAD DUP7 PUSH2 0x1A8A JUMP JUMPDEST PUSH2 0xAB5 DUP5 PUSH4 0x1DA9C00 PUSH2 0x18E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0xBCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x786 PUSH2 0xBE7 PUSH4 0x3B9ACA00 DUP5 PUSH2 0x1515 JUMP JUMPDEST PUSH2 0xAB5 DUP6 DUP6 PUSH2 0x18E3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBFE DUP5 DUP5 PUSH2 0x1AA4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC0F DUP9 DUP9 DUP9 DUP6 DUP9 PUSH2 0x1B0F JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP4 MLOAD LT ISZERO PUSH2 0xC3F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x509A JUMP JUMPDEST PUSH2 0x786 DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xC4F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0xC68 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xC81 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xC0 ADD MLOAD DUP7 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0xC9A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0xC0 ADD MLOAD PUSH3 0xED4E00 DUP8 ADD PUSH2 0x1BCC JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x0 SWAP2 SWAP1 PUSH3 0x76A700 DUP3 ADD DUP3 DUP8 LT PUSH2 0xCE7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x511A JUMP JUMPDEST DUP6 DUP3 LT PUSH2 0xD16 JUMPI PUSH2 0xD0C DUP7 PUSH2 0x390 DUP10 DUP7 SUB PUSH2 0xD06 DUP4 DUP8 SUB DUP13 DUP8 SUB PUSH2 0x1C2A JUMP JUMPDEST SWAP1 PUSH2 0x1C83 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x8E8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD2C DUP9 DUP6 SUB PUSH2 0xD06 DUP6 DUP11 SUB DUP12 DUP7 SUB PUSH2 0x1C2A JUMP JUMPDEST SWAP1 POP DUP1 DUP8 GT PUSH2 0xD3C JUMPI PUSH1 0x0 PUSH2 0xD40 JUMP JUMPDEST DUP1 DUP8 SUB JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x8E8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD58 DUP4 DUP7 PUSH2 0x1AA4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD66 DUP8 DUP8 PUSH2 0x1AA4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD86 PUSH2 0xD81 DUP8 PUSH2 0xD7B DUP6 DUP8 PUSH2 0x1515 JUMP JUMPDEST SWAP1 PUSH2 0x1CEA JUMP JUMPDEST PUSH2 0x1D03 JUMP JUMPDEST SWAP1 POP PUSH2 0xD98 DUP2 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1D36 JUMP JUMPDEST SWAP1 POP PUSH2 0xDA3 DUP2 PUSH2 0x1D89 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDBE DUP3 PUSH2 0xDB9 DUP5 PUSH1 0x1 PUSH1 0x40 SHL PUSH2 0x1DDE JUMP JUMPDEST PUSH2 0x1D36 JUMP JUMPDEST SWAP1 POP PUSH2 0xDD0 DUP2 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1E11 JUMP JUMPDEST SWAP1 POP PUSH2 0xDDB DUP2 PUSH2 0x1E47 JUMP JUMPDEST PUSH1 0x7 SIGNEXTEND SWAP5 POP POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x76A700 PUSH2 0xDFC TIMESTAMP PUSH2 0x709 JUMP JUMPDEST ADD SWAP1 POP PUSH2 0xE0A DUP5 DUP5 DUP4 PUSH2 0x1E50 JUMP JUMPDEST PUSH2 0xE2F DUP3 PUSH1 0xC0 ADD MLOAD DUP5 DUP7 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0xE2A DUP10 PUSH1 0x40 ADD MLOAD PUSH2 0x1EB7 JUMP JUMPDEST PUSH2 0x1EC5 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 JUMPDEST DUP10 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xEC7 JUMPI PUSH1 0x0 DUP11 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xE5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0xE72 JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xE82 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xE8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xE9F JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0xEAF JUMPI POP PUSH1 0x60 DUP2 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0xEBE JUMPI PUSH2 0xEBE DUP12 DUP4 PUSH2 0x202F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xE40 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP10 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xF6A JUMPI PUSH1 0x0 DUP11 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xEE7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xEFE JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF0E JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xF22 JUMPI PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 SSTORE PUSH2 0xF61 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF34 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xF4D JUMPI PUSH1 0x80 DUP2 ADD MLOAD DUP1 PUSH2 0xF4A DUP4 DUP3 PUSH2 0x217F JUMP JUMPDEST POP POP JUMPDEST PUSH2 0xF59 DUP2 DUP7 DUP7 DUP7 PUSH2 0x22A8 JUMP JUMPDEST SWAP2 SWAP7 POP SWAP5 POP SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xECB JUMP JUMPDEST POP PUSH1 0x60 DUP10 ADD MLOAD PUSH1 0x0 PUSH2 0xF7A PUSH2 0x230B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP JUMPDEST DUP13 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x1044 JUMPI PUSH1 0x0 DUP14 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xFB5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xFD2 JUMPI POP PUSH2 0x103C JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xFE4 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x1002 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xFFF JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x100B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1017 DUP2 DUP10 DUP10 DUP10 PUSH2 0x22A8 JUMP JUMPDEST SWAP2 SWAP10 POP SWAP8 POP SWAP6 POP PUSH2 0x1034 DUP2 DUP5 DUP8 PUSH1 0x10 DUP2 LT PUSH2 0x102E JUMPI INVALID JUMPDEST ADD PUSH2 0x217F JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SWAP5 POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xF96 JUMP JUMPDEST POP PUSH1 0x10 DUP4 GT ISZERO DUP1 ISZERO PUSH2 0x105B JUMPI POP PUSH5 0xFFFFFFFFFF DUP5 GT ISZERO JUMPDEST PUSH2 0x1064 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP4 SWAP11 SWAP3 SWAP10 POP SWAP8 POP SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 LT PUSH2 0x1085 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x108F PUSH2 0x2318 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP5 SWAP1 SWAP5 MSTORE POP PUSH1 0x40 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x50 SHL MUL PUSH1 0xFF PUSH1 0x50 SHL NOT PUSH4 0xFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x1 PUSH1 0x30 SHL MUL PUSH10 0xFFFFFFFF000000000000 NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP3 SWAP1 SWAP3 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x10F5 DUP2 PUSH2 0xFFFF AND PUSH2 0x2325 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xC0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH2 0x1115 SWAP1 PUSH2 0x234B JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP POP POP PUSH1 0x0 PUSH2 0x112C DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0x23B4 JUMP JUMPDEST POP POP PUSH1 0x80 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP8 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD8 SHL SUB NOT DUP4 AND PUSH1 0xA0 DUP9 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x1160 SWAP1 DUP5 PUSH1 0x0 PUSH2 0x2415 JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0xC0 DUP7 ADD MLOAD PUSH2 0x1178 SWAP1 PUSH2 0xFFFF DUP8 AND PUSH2 0x24A8 JUMP JUMPDEST POP POP POP PUSH1 0x60 SWAP1 SWAP7 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1193 PUSH2 0x4E22 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A2 DUP4 PUSH2 0xFFFF AND PUSH2 0x2531 JUMP JUMPDEST SWAP1 POP PUSH2 0x8E8 DUP4 DUP3 PUSH2 0x257D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x11B9 PUSH2 0x25C0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP4 MSTORE SWAP1 SWAP3 MSTORE KECCAK256 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x11F2 JUMPI POP PUSH1 0x0 PUSH2 0x727 JUMP JUMPDEST PUSH2 0x11FB DUP3 PUSH2 0x25CD JUMP JUMPDEST PUSH1 0xFF SUB PUSH1 0x1 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x100 DUP3 GT ISZERO PUSH2 0x1223 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x122E DUP5 PUSH2 0x1672 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x5A DUP5 GT PUSH2 0x1249 JUMPI POP PUSH3 0x15180 DUP4 MUL ADD SWAP1 POP PUSH2 0x789 JUMP JUMPDEST PUSH1 0x87 DUP5 GT PUSH2 0x1271 JUMPI POP PUSH1 0x59 NOT DUP4 ADD PUSH3 0x7E900 SWAP1 DUP2 MUL SWAP1 DUP3 MOD SWAP1 SWAP2 SUB ADD PUSH3 0x76A700 ADD SWAP1 POP PUSH2 0x789 JUMP JUMPDEST PUSH1 0xC3 DUP5 GT PUSH2 0x129A JUMPI POP PUSH1 0x86 NOT DUP4 ADD PUSH3 0x278D00 SWAP1 DUP2 MUL SWAP1 DUP3 MOD SWAP1 SWAP2 SUB ADD PUSH4 0x1DA9C00 ADD SWAP1 POP PUSH2 0x789 JUMP JUMPDEST POP PUSH1 0xC2 NOT DUP4 ADD PUSH3 0x76A700 SWAP1 DUP2 MUL SWAP1 DUP3 MOD SWAP1 SWAP2 SUB ADD PUSH4 0xB1FA800 ADD SWAP1 POP PUSH2 0x789 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 GT PUSH2 0x12DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x5044 JUMP JUMPDEST PUSH1 0x7 DUP5 GT ISZERO PUSH2 0x12FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x5151 JUMP JUMPDEST PUSH3 0x76A700 DUP4 MOD ISZERO PUSH2 0x1310 JUMPI POP PUSH1 0x0 PUSH2 0x8E8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x131B DUP4 PUSH2 0x709 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST DUP6 DUP2 GT PUSH2 0x1354 JUMPI PUSH2 0x133A PUSH2 0x1333 DUP3 PUSH2 0x9FC JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x72C JUMP JUMPDEST DUP6 EQ ISZERO PUSH2 0x134C JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x8E8 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1320 JUMP JUMPDEST POP PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 LT ISZERO DUP1 ISZERO PUSH2 0x1375 JUMPI POP PUSH2 0x100 DUP4 GT ISZERO JUMPDEST PUSH2 0x137E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x1397 JUMPI POP PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x0 NOT DUP4 ADD SHR DUP4 OR PUSH2 0x8E8 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x0 NOT DUP4 ADD SHR NOT DUP4 AND PUSH2 0x8E8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13B6 PUSH2 0x2666 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP8 DUP4 MSTORE DUP4 MSTORE DUP1 DUP3 KECCAK256 DUP7 DUP4 MSTORE SWAP1 SWAP3 MSTORE KECCAK256 SLOAD PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1404 DUP7 PUSH1 0x20 ADD MLOAD DUP7 DUP7 PUSH2 0x2673 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x1413 DUP8 PUSH2 0x273B JUMP JUMPDEST SWAP1 POP DUP2 PUSH2 0x142C JUMPI DUP7 MLOAD PUSH2 0xD0C SWAP1 PUSH2 0xFFFF AND DUP8 DUP4 DUP9 PUSH2 0x274F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1437 DUP7 PUSH2 0x709 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1447 PUSH2 0x1333 DUP7 PUSH2 0x9FC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x145F DUP11 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP4 DUP7 DUP12 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP8 PUSH1 0x1 EQ ISZERO PUSH2 0x1484 JUMPI DUP10 SWAP2 POP PUSH2 0x147D DUP13 PUSH1 0x40 ADD MLOAD PUSH2 0x27EE JUMP JUMPDEST SWAP1 POP PUSH2 0x14B3 JUMP JUMPDEST PUSH2 0x149A PUSH2 0x1493 PUSH1 0x1 DUP11 SUB PUSH2 0x9FC JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x72C JUMP JUMPDEST SWAP2 POP PUSH2 0x14B0 DUP13 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP4 DUP9 DUP14 PUSH2 0x274F JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x14C0 DUP3 DUP6 DUP4 DUP7 DUP16 PUSH2 0x1BCC JUMP JUMPDEST SWAP9 POP POP POP POP POP POP POP POP POP PUSH2 0x8E8 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH2 0x14DE JUMPI POP PUSH1 0x0 PUSH2 0xDE5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14EA DUP6 DUP6 PUSH2 0xB05 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x14F8 DUP3 DUP6 PUSH2 0x287F JUMP JUMPDEST SWAP1 POP PUSH4 0x3B9ACA00 DUP2 SGT ISZERO PUSH2 0x150B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAFA DUP8 DUP3 PUSH2 0x1CEA JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDE5 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0xAB5 DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x1556 PUSH5 0x2540BE400 DUP9 PUSH2 0x18E3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x18E3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1566 PUSH2 0x28E7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP7 SLT DUP1 ISZERO SWAP1 PUSH2 0x15A9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP7 SGT ISZERO JUMPDEST PUSH2 0x15B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 SLT ISZERO DUP1 ISZERO PUSH2 0x15CA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP6 SGT ISZERO JUMPDEST PUSH2 0x15D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF DUP5 GT ISZERO PUSH2 0x15E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP7 AND OR PUSH4 0xFFFFFFFF PUSH1 0x50 SHL NOT AND PUSH1 0x1 PUSH1 0x50 SHL PUSH4 0xFFFFFFFF DUP7 AND MUL OR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB AND PUSH1 0x1 PUSH1 0xA8 SHL PUSH11 0xFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA DUP10 SWAP1 SIGNEXTEND AND MUL OR DUP2 SSTORE PUSH2 0x1643 DUP4 PUSH2 0x28F4 JUMP JUMPDEST DUP2 SLOAD PUSH7 0xFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x70 SHL MUL PUSH7 0xFFFFFFFFFFFFFF PUSH1 0x70 SHL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15180 DUP3 LT ISZERO PUSH2 0x1684 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x15180 DUP3 PUSH2 0x721 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1699 DUP3 PUSH2 0x709 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH1 0x80 ADD MLOAD LT PUSH2 0x16BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x51DC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16CE DUP5 PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x2922 JUMP JUMPDEST SWAP1 POP PUSH2 0x16FF DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x16E0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x2B06 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE POP PUSH1 0xC0 DUP4 ADD MLOAD DUP4 MLOAD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH2 0x1728 SWAP3 PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP1 DUP8 PUSH2 0x2B1C JUMP JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x173C SWAP1 DUP4 PUSH2 0x2B06 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MSTORE PUSH5 0xFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1753 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH5 0xFFFFFFFFFF AND PUSH1 0x80 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1777 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x273B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1784 DUP6 PUSH2 0x709 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x17EF JUMPI PUSH2 0x17E7 DUP8 DUP7 PUSH1 0x20 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x17AF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0x0 DUP8 DUP8 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x17CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2C41 SWAP1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1789 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x1875 JUMPI PUSH1 0x0 DUP7 PUSH1 0x20 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1821 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x1 PUSH1 0xFF AND DUP2 PUSH1 0x40 ADD MLOAD EQ PUSH2 0x183F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x185C DUP8 PUSH1 0xC0 ADD MLOAD DUP7 DUP4 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x80 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x1EC5 JUMP JUMPDEST POP PUSH1 0x20 DUP8 ADD MLOAD PUSH2 0x186C SWAP1 DUP4 PUSH2 0x202F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x17FD JUMP JUMPDEST POP PUSH2 0x9B7 DUP6 DUP6 DUP5 PUSH2 0x78F JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 PUSH2 0x188E PUSH2 0x2C78 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP PUSH2 0x18AC SWAP1 DUP3 SWAP1 DUP8 SWAP1 PUSH2 0x2C85 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 PUSH2 0x18C6 PUSH2 0x2E24 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x18AC DUP2 DUP7 PUSH1 0x1 PUSH2 0x2C85 JUMP JUMPDEST DUP2 DUP2 MUL PUSH1 0x0 NOT DUP4 EQ ISZERO PUSH2 0x1913 JUMPI DUP2 ISZERO DUP1 PUSH2 0x1905 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x1902 JUMPI INVALID JUMPDEST SDIV EQ JUMPDEST PUSH2 0x190E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x789 JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0x1928 JUMPI POP DUP2 DUP4 DUP3 DUP2 PUSH2 0x1925 JUMPI INVALID JUMPDEST SDIV EQ JUMPDEST PUSH2 0x789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT EQ DUP1 ISZERO PUSH2 0x1947 JUMPI POP PUSH1 0x1 PUSH1 0xFF SHL DUP4 EQ JUMPDEST ISZERO PUSH2 0x1951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x195A JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP5 MLOAD PUSH2 0x1971 SWAP1 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2E31 JUMP JUMPDEST ISZERO PUSH2 0x197B JUMPI PUSH2 0xE2F JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD ISZERO PUSH2 0x19A8 JUMPI PUSH1 0x0 PUSH2 0x1998 DUP7 PUSH1 0x20 ADD MLOAD DUP7 DUP7 DUP7 DUP7 PUSH2 0x2E31 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x19A6 JUMPI POP PUSH2 0xE2F JUMP JUMPDEST POP JUMPDEST PUSH2 0x19B1 DUP3 PUSH2 0x2F42 JUMP JUMPDEST ISZERO PUSH2 0x19C4 JUMPI PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x19C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x19E3 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x19EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD MLOAD DUP6 PUSH1 0x40 ADD MLOAD EQ ISZERO PUSH2 0x1A10 JUMPI PUSH2 0x1A0A DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x2F58 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x1A26 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP6 DUP7 MSTORE DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP1 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE POP ADD DUP1 MLOAD PUSH1 0x1 ADD SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDE5 DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0xAB5 PUSH5 0x2540BE400 PUSH2 0xAB5 DUP8 DUP10 PUSH1 0x20 ADD MLOAD PUSH2 0x18E3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP3 GT ISZERO PUSH2 0x1AA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1AC1 PUSH2 0x1ABC PUSH4 0x1DA9C00 PUSH2 0xD06 DUP8 DUP8 PUSH2 0x1C2A JUMP JUMPDEST PUSH2 0x3011 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1AD5 DUP3 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1D36 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1AE2 DUP3 PUSH2 0x1D89 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1AF6 DUP3 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1E11 JUMP JUMPDEST SWAP1 POP PUSH2 0x1B01 DUP2 PUSH2 0x1E47 JUMP JUMPDEST PUSH1 0x7 SIGNEXTEND SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1B22 DUP9 DUP9 DUP9 DUP9 PUSH1 0x0 PUSH2 0x3028 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x1B36 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x9B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B41 DUP4 PUSH2 0x1D03 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B55 DUP3 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1D36 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B62 DUP3 PUSH2 0x30DE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B7E PUSH2 0x1B79 DUP4 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1E11 JUMP JUMPDEST PUSH2 0x3118 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x1B9E DUP10 PUSH2 0xD06 DUP5 PUSH4 0x1DA9C00 PUSH2 0x1C2A JUMP JUMPDEST SWAP1 POP PUSH4 0xFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BBC JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x9B7 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP7 LT PUSH2 0x1BDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP3 LT PUSH2 0x1BE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP4 LT PUSH2 0x1C0C JUMPI PUSH2 0x1C05 DUP5 PUSH2 0x390 DUP9 DUP9 SUB PUSH2 0xD06 DUP4 DUP9 SUB DUP12 DUP9 SUB PUSH2 0x1C2A JUMP JUMPDEST SWAP1 POP PUSH2 0x9B7 JUMP JUMPDEST PUSH2 0x1C05 PUSH2 0x1C23 DUP8 DUP8 SUB PUSH2 0xD06 DUP7 DUP9 SUB DUP11 DUP8 SUB PUSH2 0x1C2A JUMP JUMPDEST DUP6 SWAP1 PUSH2 0xB05 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1C39 JUMPI POP PUSH1 0x0 PUSH2 0x789 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1C46 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x786 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x52FF PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1CD9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1CE2 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x786 PUSH2 0x1CF9 DUP5 DUP5 PUSH2 0x18E3 JUMP JUMPDEST PUSH4 0x3B9ACA00 PUSH2 0x1931 JUMP JUMPDEST PUSH1 0x0 PUSH8 0x7FFFFFFFFFFFFFFF NOT DUP3 SLT ISZERO DUP1 ISZERO PUSH2 0x1D26 JUMPI POP PUSH8 0x7FFFFFFFFFFFFFFF DUP3 SGT ISZERO JUMPDEST PUSH2 0x1D2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xF SIGNEXTEND PUSH1 0x0 EQ ISZERO PUSH2 0x1D49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xF SIGNEXTEND PUSH1 0x40 DUP6 PUSH1 0xF SIGNEXTEND SWAP1 SHL DUP2 PUSH2 0x1D5E JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x1D80 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x786 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x46 SHL DUP3 PUSH1 0xF SIGNEXTEND SLT PUSH2 0x1D9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH9 0x3FFFFFFFFFFFFFFFFF NOT DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x1DBB JUMPI POP PUSH1 0x0 PUSH2 0x727 JUMP JUMPDEST PUSH2 0x789 PUSH1 0x80 DUP4 PUSH1 0xF SIGNEXTEND PUSH17 0x171547652B82FE1777D0FFDA0D23A7D12 MUL SWAP1 SAR PUSH2 0x3134 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF DUP4 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x1D80 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO PUSH2 0x786 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xF DUP4 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND MUL PUSH1 0x40 SAR PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x1D80 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO PUSH2 0x786 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E5A PUSH2 0x3BE2 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP4 ADD MLOAD DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 SWAP1 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0xA0 DUP9 ADD MLOAD PUSH1 0xC0 DUP10 ADD MLOAD PUSH1 0xE0 DUP11 ADD MLOAD SWAP6 SWAP7 POP SWAP4 SWAP5 PUSH2 0x1EA9 SWAP5 DUP7 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x3BEF JUMP JUMPDEST PUSH2 0xE2F DUP2 DUP7 PUSH1 0x80 ADD MLOAD PUSH2 0x3D03 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x789 PUSH1 0x0 NOT DUP4 PUSH2 0x18E3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1ED2 DUP8 DUP8 PUSH2 0x11AE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1EDE PUSH2 0x2666 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SWAP2 SWAP3 POP DUP1 PUSH2 0x1F15 DUP9 DUP11 PUSH2 0x3D4C JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x1F23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F2D DUP6 DUP4 PUSH2 0x3E57 JUMP JUMPDEST ISZERO PUSH2 0x1FBC JUMPI DUP3 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x1F49 SWAP1 DUP10 SWAP1 PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH2 0x2B06 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x1F6A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x1F73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0xF DUP4 SWAP1 SIGNEXTEND AND OR DUP5 SSTORE DUP1 PUSH2 0x1FA4 JUMPI PUSH2 0x1FA1 DUP7 DUP5 PUSH1 0x0 PUSH2 0x1360 JUMP JUMPDEST SWAP6 POP JUMPDEST PUSH2 0x1FAF DUP13 DUP13 DUP9 PUSH2 0x3E87 JUMP JUMPDEST SWAP6 POP PUSH2 0x9B7 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP7 ISZERO PUSH2 0x2020 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP8 SLT DUP1 ISZERO SWAP1 PUSH2 0x1FE1 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP8 SGT ISZERO JUMPDEST PUSH2 0x1FEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0xF DUP10 SWAP1 SIGNEXTEND AND OR DUP4 SSTORE PUSH2 0x2013 DUP6 DUP4 PUSH1 0x1 PUSH2 0x1360 JUMP JUMPDEST SWAP5 POP PUSH2 0x2020 DUP12 DUP12 DUP8 PUSH2 0x3E87 JUMP JUMPDEST POP SWAP5 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD MLOAD DUP2 LT PUSH2 0x203D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD GT PUSH2 0x204E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2060 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2077 JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2087 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x20A5 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x20A2 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x20AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP4 ADD DUP1 MLOAD PUSH1 0x0 NOT ADD SWAP1 MSTORE PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP6 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x2121 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x20DB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP3 DUP2 PUSH1 0x80 ADD MLOAD GT DUP1 ISZERO PUSH2 0x2108 JUMPI POP PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2105 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST ISZERO PUSH2 0x2118 JUMPI DUP1 PUSH1 0x80 ADD MLOAD SWAP3 POP DUP2 SWAP4 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x20BF JUMP JUMPDEST POP DUP2 DUP5 EQ ISZERO PUSH2 0x213A JUMPI POP POP PUSH1 0x2 PUSH1 0xA0 SWAP2 SWAP1 SWAP2 ADD MSTORE PUSH2 0x217B JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x214C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x80 DUP6 DUP2 ADD DUP1 MLOAD SWAP2 DUP4 ADD DUP1 MLOAD SWAP1 SWAP2 MSTORE MSTORE PUSH1 0x1 PUSH1 0xA0 SWAP2 DUP3 ADD MSTORE PUSH1 0x2 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP POP JUMPDEST POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2192 JUMPI POP DUP2 MLOAD PUSH2 0x3FFF LT ISZERO JUMPDEST PUSH2 0x219B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x21B8 JUMPI POP PUSH1 0x20 DUP3 ADD MLOAD PUSH5 0xFFFFFFFFFF LT ISZERO JUMPDEST PUSH2 0x21C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x21DA JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x8 LT ISZERO JUMPDEST PUSH2 0x21E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT SGT DUP1 ISZERO SWAP1 PUSH2 0x220A JUMPI POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB SLT ISZERO JUMPDEST PUSH2 0x2213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 SLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD PUSH1 0xA SIGNEXTEND PUSH11 0xFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH19 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000 NOT PUSH1 0xFF SWAP1 SWAP7 AND PUSH1 0x1 PUSH1 0x38 SHL MUL PUSH8 0xFF00000000000000 NOT PUSH5 0xFFFFFFFFFF SWAP1 SWAP4 AND PUSH3 0x10000 MUL PUSH7 0xFFFFFFFFFF0000 NOT PUSH2 0xFFFF SWAP1 SWAP7 AND PUSH2 0xFFFF NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP5 SWAP1 SWAP5 AND SWAP3 SWAP1 SWAP3 OR AND SWAP2 SWAP1 SWAP2 OR SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x22B7 DUP9 PUSH2 0x3EE1 JUMP JUMPDEST SWAP1 POP DUP5 ISZERO DUP1 PUSH2 0x22C5 JUMPI POP DUP1 DUP6 GT JUMPDEST ISZERO PUSH2 0x22CE JUMPI DUP1 SWAP5 POP JUMPDEST DUP7 DUP1 PUSH2 0x22DE JUMPI POP PUSH1 0x0 DUP9 PUSH1 0x60 ADD MLOAD SLT JUMPDEST SWAP7 POP PUSH2 0xFFFF DUP7 AND ISZERO PUSH2 0x22EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP SWAP5 MLOAD SWAP4 SWAP6 PUSH1 0x10 SWAP4 SWAP1 SWAP4 SHR PUSH1 0xF0 SWAP5 SWAP1 SWAP5 SHL SWAP4 SWAP1 SWAP4 OR SWAP4 POP SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x789 PUSH1 0xD PUSH2 0x3F48 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x789 PUSH1 0x2 PUSH2 0x3F48 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2330 PUSH2 0x3F61 JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x235C PUSH2 0x2318 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP8 SWAP1 SWAP8 MSTORE POP POP PUSH1 0x40 SWAP1 SWAP5 KECCAK256 SLOAD PUSH2 0xFFFF DUP2 AND SWAP6 PUSH4 0xFFFFFFFF PUSH3 0x10000 DUP4 DIV DUP2 AND SWAP7 POP PUSH1 0x1 PUSH1 0x30 SHL DUP4 DIV AND SWAP5 POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x50 SHL DUP4 DIV AND SWAP4 POP PUSH1 0x1 PUSH1 0x58 SHL SWAP1 SWAP2 DIV PUSH1 0xD8 SHL SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x23C2 PUSH2 0x3F6E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SWAP4 PUSH1 0x1 PUSH1 0x60 SHL DUP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP4 POP PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP2 POP JUMP JUMPDEST PUSH2 0x241D PUSH2 0x4E4E JUMP JUMPDEST PUSH2 0x2425 PUSH2 0x4E4E JUMP JUMPDEST PUSH1 0xFF DUP5 AND PUSH2 0x2434 JUMPI SWAP1 POP PUSH2 0x8E8 JUMP JUMPDEST PUSH2 0x243E DUP6 DUP6 PUSH2 0x3F7B JUMP JUMPDEST DUP2 MSTORE PUSH1 0xFF DUP5 AND PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2460 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x249A JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x2487 PUSH2 0x4E76 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x247F JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x20 DUP3 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x24B8 PUSH2 0x28E7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP2 AND SWAP7 POP PUSH1 0x1 PUSH1 0x50 SHL DUP2 DIV PUSH4 0xFFFFFFFF AND SWAP6 POP SWAP2 SWAP3 POP SWAP1 PUSH2 0x2513 SWAP1 PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV PUSH7 0xFFFFFFFFFFFFFF AND PUSH2 0x3FA4 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xA SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 POP SWAP2 SWAP4 POP POP POP JUMP JUMPDEST PUSH2 0x2539 PUSH2 0x4EB6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2547 DUP6 PUSH2 0x3FB2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xFF AND PUSH1 0xA EXP SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2585 PUSH2 0x4E22 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2594 DUP5 PUSH2 0xFFFF AND PUSH2 0x4075 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH2 0xFFFF SWAP7 SWAP1 SWAP7 AND DUP7 MSTORE PUSH1 0xFF DUP3 AND PUSH1 0x20 DUP8 ADD MSTORE DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x60 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x789 PUSH1 0xB PUSH2 0x3F48 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x25D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x25EC JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x1 PUSH1 0x40 SHL DUP3 LT PUSH2 0x25FF JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x2613 JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x2625 JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x2636 JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x2646 JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x2656 JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0x727 JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x789 PUSH1 0xC PUSH2 0x3F48 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 GT PUSH2 0x2696 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x5044 JUMP JUMPDEST PUSH1 0x7 DUP6 GT ISZERO PUSH2 0x26B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x5151 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26C2 DUP5 PUSH2 0x709 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST DUP7 DUP2 GT PUSH2 0x271A JUMPI PUSH1 0x0 PUSH2 0x26E3 PUSH2 0x26DC DUP4 PUSH2 0x9FC JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x72C JUMP JUMPDEST SWAP1 POP DUP7 DUP2 EQ ISZERO PUSH2 0x26FB JUMPI POP SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH2 0x2733 SWAP1 POP JUMP JUMPDEST DUP7 DUP2 GT ISZERO PUSH2 0x2711 JUMPI POP SWAP3 POP PUSH1 0x1 SWAP2 POP PUSH2 0x2733 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x26C7 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x5233 JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 ADD MLOAD PUSH2 0x12C PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHR PUSH1 0xFF AND MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x275A PUSH2 0x3BE2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x76A700 PUSH2 0x276B DUP6 PUSH2 0x709 JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 ADD DUP1 DUP4 MSTORE SWAP4 SWAP1 MSTORE KECCAK256 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0xC0 SHL DUP2 DIV DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV AND DUP2 PUSH2 0x27D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x4FAF JUMP JUMPDEST PUSH2 0x27DF DUP2 DUP5 DUP5 DUP13 DUP13 PUSH2 0x4092 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2808 JUMPI POP PUSH1 0x0 PUSH2 0x727 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD30A666 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2847 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x285B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x786 SWAP2 SWAP1 PUSH2 0x4F0C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2897 PUSH2 0x1ABC PUSH4 0x1DA9C00 PUSH2 0xD06 DUP7 DUP9 PUSH2 0x1C2A JUMP JUMPDEST SWAP1 POP PUSH2 0x28A9 DUP2 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1D36 JUMP JUMPDEST SWAP1 POP PUSH2 0x28BC PUSH2 0x28B7 DUP3 PUSH2 0x4125 JUMP JUMPDEST PUSH2 0x1D89 JUMP JUMPDEST SWAP1 POP PUSH2 0x28CE DUP2 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1E11 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28DB DUP3 PUSH2 0x1E47 JUMP JUMPDEST PUSH1 0x7 SIGNEXTEND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x789 PUSH1 0x6 PUSH2 0x3F48 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH6 0xFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x2914 JUMPI PUSH1 0x2F PUSH2 0x2910 DUP5 PUSH2 0x25CD JUMP JUMPDEST SUB SWAP1 POP JUMPDEST DUP3 DUP2 SHR PUSH1 0x8 SHL OR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x292C PUSH2 0x4EB6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2938 DUP6 DUP6 PUSH2 0x4147 JUMP JUMPDEST SWAP1 POP PUSH2 0x2942 PUSH2 0x4DB2 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x2952 JUMPI POP SWAP2 POP PUSH2 0x789 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x2AFA JUMPI PUSH1 0x0 DUP9 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2972 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x2987 DUP3 PUSH2 0x3EE1 JUMP JUMPDEST SWAP1 POP DUP9 DUP2 GT ISZERO PUSH2 0x2998 JUMPI POP POP PUSH2 0x2AF2 JUMP JUMPDEST DUP2 PUSH1 0x0 ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x29A9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD EQ PUSH2 0x29DE JUMPI PUSH1 0x1 DUP5 ADD SWAP4 POP DUP2 PUSH1 0x0 ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x29D1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MSTORE JUMPDEST PUSH2 0x29F1 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP12 PUSH2 0x426C JUMP JUMPDEST SWAP7 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF AND DUP4 PUSH1 0x40 ADD MLOAD EQ ISZERO PUSH2 0x2A26 JUMPI PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x2A15 SWAP1 DUP10 SWAP1 PUSH2 0x152B JUMP JUMPDEST SWAP1 POP PUSH2 0x2A21 DUP12 DUP6 PUSH2 0x202F JUMP JUMPDEST PUSH2 0x2AA8 JUMP JUMPDEST PUSH2 0x2A33 DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0x2F42 JUMP JUMPDEST ISZERO PUSH2 0x2AA8 JUMPI PUSH2 0x2A4C DUP7 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH2 0x43CF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A65 DUP5 PUSH1 0x60 ADD MLOAD DUP9 PUSH2 0x43E3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP2 SWAP4 POP SWAP2 POP DUP12 LT ISZERO PUSH2 0x2A86 JUMPI PUSH2 0x2A81 DUP13 DUP7 DUP4 PUSH2 0x448B JUMP JUMPDEST PUSH2 0x2AA6 JUMP JUMPDEST PUSH2 0x2A9A PUSH2 0x2A93 DUP11 DUP4 PUSH2 0x152B JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x2B06 JUMP JUMPDEST SWAP2 POP PUSH2 0x2AA6 DUP13 DUP7 PUSH2 0x202F JUMP JUMPDEST POP JUMPDEST PUSH2 0x2AD2 DUP2 DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x2AB8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x2B06 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2ADE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2956 JUMP JUMPDEST POP SWAP2 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2B2B DUP8 DUP8 PUSH2 0x11AE JUMP JUMPDEST SWAP1 POP PUSH2 0x2B36 DUP5 PUSH2 0x1672 JUMP JUMPDEST SWAP2 POP DUP5 DUP3 LT ISZERO PUSH2 0x2B45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2B51 DUP7 DUP5 PUSH2 0x3D4C JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x2B60 JUMPI POP POP PUSH2 0x2C38 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B6B DUP4 PUSH2 0x11E3 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2B7D JUMPI POP DUP2 DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x2BC7 JUMPI PUSH1 0x0 PUSH2 0x2B8E DUP9 DUP4 PUSH2 0x1208 JUMP JUMPDEST SWAP1 POP PUSH2 0x2BA6 PUSH2 0x2B9F DUP12 DUP12 DUP5 DUP12 PUSH2 0x4541 JUMP JUMPDEST DUP8 SWAP1 PUSH2 0x2B06 JUMP JUMPDEST SWAP6 POP PUSH2 0x2BB4 DUP5 DUP4 PUSH1 0x0 PUSH2 0x1360 JUMP JUMPDEST SWAP4 POP PUSH2 0x2BBF DUP5 PUSH2 0x11E3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2B6E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x2C28 JUMPI PUSH1 0x0 PUSH2 0x2BDC DUP10 DUP5 PUSH2 0x1208 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x2BEB DUP9 DUP5 PUSH2 0x3D4C JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x2BF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C05 DUP5 DUP4 PUSH1 0x1 PUSH2 0x1360 JUMP JUMPDEST SWAP4 POP PUSH2 0x2C13 DUP8 DUP7 PUSH1 0x0 PUSH2 0x1360 JUMP JUMPDEST SWAP7 POP PUSH2 0x2C1E DUP8 PUSH2 0x11E3 JUMP JUMPDEST SWAP5 POP POP POP POP PUSH2 0x2BCA JUMP JUMPDEST PUSH2 0x2C33 DUP11 DUP11 DUP4 PUSH2 0x3E87 JUMP JUMPDEST POP POP POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2C4E DUP8 DUP8 DUP8 DUP7 DUP6 PUSH2 0x45DC JUMP JUMPDEST PUSH2 0x2C67 DUP8 PUSH1 0xE0 ADD MLOAD DUP9 PUSH1 0xA0 ADD MLOAD DUP10 PUSH1 0xC0 ADD MLOAD DUP6 DUP9 PUSH2 0x4092 JUMP JUMPDEST PUSH1 0xC0 SWAP1 SWAP8 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x789 PUSH1 0x4 PUSH2 0x3F48 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2CA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2CCC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP7 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2CE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D12 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x2E16 JUMPI DUP9 DUP5 PUSH1 0xE DUP2 LT PUSH2 0x2D2C JUMPI INVALID JUMPDEST PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2D5A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 DUP9 DUP5 PUSH1 0xE DUP2 LT PUSH2 0x2D77 JUMPI INVALID JUMPDEST PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2DA5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 DUP7 ISZERO PUSH2 0x2E0E JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2DCA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SGT DUP1 ISZERO PUSH2 0x2DF2 JUMPI POP PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2DE8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SGT JUMPDEST PUSH2 0x2E0E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x5206 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2D18 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x789 PUSH1 0x5 PUSH2 0x3F48 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x2F35 JUMPI PUSH1 0x0 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E4C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP5 DUP2 PUSH1 0x40 ADD MLOAD EQ ISZERO DUP1 PUSH2 0x2E6A JUMPI POP DUP1 MLOAD DUP8 EQ ISZERO JUMPDEST DUP1 PUSH2 0x2E79 JUMPI POP DUP6 DUP2 PUSH1 0x20 ADD MLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 0x2E84 JUMPI POP PUSH2 0x2F2D JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2E96 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x2EB4 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2EB1 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x2EBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2ECF SWAP1 DUP7 PUSH2 0x2B06 JUMP JUMPDEST SWAP1 POP PUSH2 0x2EDA DUP7 PUSH2 0x2F42 JUMP JUMPDEST ISZERO PUSH2 0x2EED JUMPI PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x2EED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x2F0C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x2F15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SWAP1 SWAP2 ADD DUP2 SWAP1 MSTORE SWAP2 POP PUSH2 0x9B7 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2E35 JUMP JUMPDEST POP PUSH1 0x0 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 LT DUP1 ISZERO SWAP1 PUSH2 0x789 JUMPI POP POP PUSH1 0x8 LT ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 EQ PUSH2 0x2F6F JUMPI DUP3 MLOAD PUSH1 0x2 MUL PUSH2 0x2F72 JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2F8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2FC7 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x2FB4 PUSH2 0x4E76 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2FAC JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x3009 JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2FE2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2FF6 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2FCD JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0x7FFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1D2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x3036 DUP9 DUP6 PUSH2 0x8EF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x304E PUSH2 0x3047 DUP11 DUP11 PUSH2 0x2B06 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x4697 JUMP JUMPDEST SWAP1 POP PUSH4 0x39387000 DUP2 SGT ISZERO PUSH2 0x306A JUMPI PUSH1 0x0 DUP1 SWAP4 POP SWAP4 POP POP POP PUSH2 0x30D4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3076 DUP4 PUSH2 0x46B0 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x308F JUMPI PUSH1 0x0 DUP1 SWAP6 POP SWAP6 POP POP POP POP POP PUSH2 0x30D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30A5 DUP10 PUSH2 0x309F DUP6 DUP14 PUSH2 0x4697 JUMP JUMPDEST SWAP1 PUSH2 0x2B06 JUMP JUMPDEST SWAP1 POP PUSH4 0x3B9ACA00 DUP2 SLT ISZERO PUSH2 0x30C4 JUMPI PUSH1 0x0 DUP1 SWAP7 POP SWAP7 POP POP POP POP POP POP PUSH2 0x30D4 JUMP JUMPDEST SWAP6 POP PUSH1 0x1 SWAP5 POP PUSH2 0x30D4 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SGT PUSH2 0x30EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x80 PUSH2 0x30FA DUP4 PUSH2 0x4752 JUMP JUMPDEST PUSH1 0xF SIGNEXTEND PUSH16 0xB17217F7D1CF79ABC9E3B39803F2F6AF MUL SWAP1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x312A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x46 SHL DUP3 PUSH1 0xF SIGNEXTEND SLT PUSH2 0x3149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH9 0x3FFFFFFFFFFFFFFFFF NOT DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x3166 JUMPI POP PUSH1 0x0 PUSH2 0x727 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x7F SHL PUSH1 0x0 PUSH1 0x1 PUSH1 0x3F SHL DUP5 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3194 JUMPI PUSH17 0x16A09E667F3BCC908B2FB1366EA957D3E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x4000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x31C1 JUMPI PUSH17 0x1306FE0A31B7152DE8D5A46305C85EDEC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x2000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x31EE JUMPI PUSH17 0x1172B83C7D517ADCDF7C8C50EB14A791F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x1000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x321B JUMPI PUSH17 0x10B5586CF9890F6298B92B71842A98363 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x800000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3248 JUMPI PUSH17 0x1059B0D31585743AE7C548EB68CA417FD MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x400000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3275 JUMPI PUSH17 0x102C9A3E778060EE6F7CACA4F7A29BDE8 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x200000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x32A2 JUMPI PUSH17 0x10163DA9FB33356D84A66AE336DCDFA3F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x38 SHL AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x32CB JUMPI PUSH17 0x100B1AFA5ABCBED6129AB13EC11DC9543 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x80000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x32F7 JUMPI PUSH17 0x10058C86DA1C09EA1FF19D294CF2F679B MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x40000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3323 JUMPI PUSH17 0x1002C605E2E8CEC506D21BFC89A23A00F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x20000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x334F JUMPI PUSH17 0x100162F3904051FA128BCA9C55C31E5DF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x10000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x337B JUMPI PUSH17 0x1000B175EFFDC76BA38E31671CA939725 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x8000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x33A7 JUMPI PUSH17 0x100058BA01FB9F96D6CACD4B180917C3D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x4000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x33D3 JUMPI PUSH17 0x10002C5CC37DA9491D0985C348C68E7B3 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x2000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x33FF JUMPI PUSH17 0x1000162E525EE054754457D5995292026 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x30 SHL AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3428 JUMPI PUSH17 0x10000B17255775C040618BF4A4ADE83FC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x800000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3453 JUMPI PUSH17 0x1000058B91B5BC9AE2EED81E9B7D4CFAB MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x400000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x347E JUMPI PUSH17 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x200000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x34A9 JUMPI PUSH17 0x10000162E43F4F831060E02D839A9D16D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x100000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x34D4 JUMPI PUSH17 0x100000B1721BCFC99D9F890EA06911763 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x80000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x34FF JUMPI PUSH17 0x10000058B90CF1E6D97F9CA14DBCC1628 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x40000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x352A JUMPI PUSH17 0x1000002C5C863B73F016468F6BAC5CA2B MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x20000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3555 JUMPI PUSH17 0x100000162E430E5A18F6119E3C02282A5 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x10000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3580 JUMPI PUSH17 0x1000000B1721835514B86E6D96EFD1BFE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x8000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x35AA JUMPI PUSH17 0x100000058B90C0B48C6BE5DF846C5B2EF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x4000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x35D4 JUMPI PUSH17 0x10000002C5C8601CC6B9E94213C72737A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x2000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x35FE JUMPI PUSH17 0x1000000162E42FFF037DF38AA2B219F06 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x1000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3628 JUMPI PUSH17 0x10000000B17217FBA9C739AA5819F44F9 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x800000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3652 JUMPI PUSH17 0x1000000058B90BFCDEE5ACD3C1CEDC823 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x400000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x367C JUMPI PUSH17 0x100000002C5C85FE31F35A6A30DA1BE50 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x200000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x36A6 JUMPI PUSH17 0x10000000162E42FF0999CE3541B9FFFCF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x100000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x36D0 JUMPI PUSH17 0x100000000B17217F80F4EF5AADDA45554 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x80000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x36F9 JUMPI PUSH17 0x10000000058B90BFBF8479BD5A81B51AD MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x40000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3722 JUMPI PUSH17 0x1000000002C5C85FDF84BD62AE30A74CC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x20000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x374B JUMPI PUSH17 0x100000000162E42FEFB2FED257559BDAA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x10000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3774 JUMPI PUSH17 0x1000000000B17217F7D5A7716BBA4A9AE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x8000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x379D JUMPI PUSH17 0x100000000058B90BFBE9DDBAC5E109CCE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x4000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x37C6 JUMPI PUSH17 0x10000000002C5C85FDF4B15DE6F17EB0D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x2000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x37EF JUMPI PUSH17 0x1000000000162E42FEFA494F1478FDE05 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x1000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3818 JUMPI PUSH17 0x10000000000B17217F7D20CF927C8E94C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x800000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3840 JUMPI PUSH17 0x1000000000058B90BFBE8F71CB4E4B33D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x400000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3868 JUMPI PUSH17 0x100000000002C5C85FDF477B662B26945 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x200000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3890 JUMPI PUSH17 0x10000000000162E42FEFA3AE53369388C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x100000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x38B8 JUMPI PUSH17 0x100000000000B17217F7D1D351A389D40 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x80000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x38E0 JUMPI PUSH17 0x10000000000058B90BFBE8E8B2D3D4EDE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x40000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3908 JUMPI PUSH17 0x1000000000002C5C85FDF4741BEA6E77E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x20000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3930 JUMPI PUSH17 0x100000000000162E42FEFA39FE95583C2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x10000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3958 JUMPI PUSH17 0x1000000000000B17217F7D1CFB72B45E1 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x8000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x397F JUMPI PUSH17 0x100000000000058B90BFBE8E7CC35C3F0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x4000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x39A6 JUMPI PUSH17 0x10000000000002C5C85FDF473E242EA38 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x2000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x39CD JUMPI PUSH17 0x1000000000000162E42FEFA39F02B772C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x1000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x39F4 JUMPI PUSH17 0x10000000000000B17217F7D1CF7D83C1A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x800 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3A1B JUMPI PUSH17 0x1000000000000058B90BFBE8E7BDCBE2E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x400 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3A42 JUMPI PUSH17 0x100000000000002C5C85FDF473DEA871F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x200 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3A69 JUMPI PUSH17 0x10000000000000162E42FEFA39EF44D91 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x100 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3A90 JUMPI PUSH17 0x100000000000000B17217F7D1CF79E949 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x80 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3AB6 JUMPI PUSH17 0x10000000000000058B90BFBE8E7BCE544 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x40 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3ADC JUMPI PUSH17 0x1000000000000002C5C85FDF473DE6ECA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x20 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3B02 JUMPI PUSH17 0x100000000000000162E42FEFA39EF366F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x10 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3B28 JUMPI PUSH17 0x1000000000000000B17217F7D1CF79AFA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x8 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3B4E JUMPI PUSH17 0x100000000000000058B90BFBE8E7BCD6D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x4 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3B74 JUMPI PUSH17 0x10000000000000002C5C85FDF473DE6B2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x2 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3B9A JUMPI PUSH17 0x1000000000000000162E42FEFA39EF358 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3BC0 JUMPI PUSH17 0x10000000000000000B17217F7D1CF79AB MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0xF DUP4 DUP2 SIGNEXTEND PUSH1 0x40 SAR PUSH1 0x3F SUB SWAP1 SIGNEXTEND SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 GT ISZERO PUSH2 0x789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x789 PUSH1 0xA PUSH2 0x3F48 JUMP JUMPDEST PUSH1 0x0 DUP6 SLT ISZERO DUP1 ISZERO PUSH2 0x3C07 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP6 SGT ISZERO JUMPDEST PUSH2 0x3C10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 SLT ISZERO DUP1 ISZERO PUSH2 0x3C28 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP5 SGT ISZERO JUMPDEST PUSH2 0x3C31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x3C45 JUMPI POP PUSH4 0xFFFFFFFF DUP4 GT ISZERO JUMPDEST PUSH2 0x3C4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x3C62 JUMPI POP PUSH4 0xFFFFFFFF DUP3 GT ISZERO JUMPDEST PUSH2 0x3C6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 SLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP6 DUP7 AND OR PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x50 SHL NOT AND PUSH1 0x1 PUSH1 0x50 SHL SWAP5 SWAP1 SWAP6 AND SWAP4 SWAP1 SWAP4 MUL SWAP4 SWAP1 SWAP4 OR PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH4 0xFFFFFFFF SWAP3 DUP4 AND MUL OR PUSH4 0xFFFFFFFF PUSH1 0xC0 SHL NOT AND PUSH1 0x1 PUSH1 0xC0 SHL SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 MUL SWAP3 SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0xE0 SHL SWAP2 SWAP1 SWAP3 AND MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO DUP1 ISZERO PUSH2 0x3D1B JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x3D24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3D5A DUP6 PUSH2 0x1672 JUMP JUMPDEST SWAP1 POP PUSH3 0x15180 DUP5 MOD ISZERO PUSH2 0x3D74 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x3E50 JUMP JUMPDEST DUP4 DUP2 LT PUSH2 0x3D88 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x3E50 JUMP JUMPDEST PUSH3 0x15180 DUP2 DUP6 SUB DIV PUSH1 0x5A DUP2 GT PUSH2 0x3DA5 JUMPI SWAP3 POP PUSH1 0x1 SWAP2 POP PUSH2 0x3E50 SWAP1 POP JUMP JUMPDEST PUSH2 0x168 DUP2 GT PUSH2 0x3DE4 JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x7E900 DUP5 MOD DIV DUP3 ADD PUSH1 0x59 NOT ADD SWAP1 POP PUSH1 0x6 DUP2 DIV PUSH1 0x5A ADD PUSH1 0x6 DUP3 DUP2 PUSH2 0x3DD4 JUMPI INVALID JUMPDEST MOD PUSH1 0x0 EQ SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x3E50 JUMP JUMPDEST PUSH2 0x870 DUP2 GT PUSH2 0x3E14 JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x278D00 DUP5 MOD DIV DUP3 ADD PUSH2 0x167 NOT ADD SWAP1 POP PUSH1 0x1E DUP2 DIV PUSH1 0x87 ADD PUSH1 0x1E DUP3 DUP2 PUSH2 0x3DD4 JUMPI INVALID JUMPDEST PUSH2 0x1DE2 DUP2 GT PUSH2 0x3E44 JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x76A700 DUP5 MOD DIV DUP3 ADD PUSH2 0x86F NOT ADD SWAP1 POP PUSH1 0x5A DUP2 DIV PUSH1 0xC3 ADD PUSH1 0x5A DUP3 DUP2 PUSH2 0x3DD4 JUMPI INVALID JUMPDEST PUSH2 0x100 PUSH1 0x0 SWAP4 POP SWAP4 POP POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x3E6C JUMPI POP PUSH2 0x100 DUP3 GT ISZERO JUMPDEST PUSH2 0x3E75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 NOT ADD SHL PUSH1 0x1 PUSH1 0xFF SHL SWAP1 DUP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x14 PUSH2 0x3E92 DUP3 PUSH2 0x482D JUMP JUMPDEST GT ISZERO PUSH2 0x3EB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP1 PUSH2 0x50F1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EBA PUSH2 0x25C0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP5 DUP6 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP5 DUP3 MSTORE SWAP4 SWAP1 SWAP5 MSTORE POP SWAP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x40 ADD MLOAD GT DUP1 ISZERO PUSH2 0x3EFB JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x8 LT ISZERO JUMPDEST PUSH2 0x3F04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 LT PUSH2 0x3F1B JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x727 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F2D PUSH1 0x1 DUP5 PUSH1 0x40 ADD MLOAD SUB PUSH2 0x9FC JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x8E8 SWAP1 PUSH3 0x76A700 SWAP1 PUSH2 0x390 SWAP1 DUP5 PUSH2 0xB05 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF4240 DUP3 PUSH1 0x10 DUP2 GT ISZERO PUSH2 0x3F5A JUMPI INVALID JUMPDEST ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x789 PUSH1 0x3 PUSH2 0x3F48 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x789 PUSH1 0xE PUSH2 0x3F48 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x3F89 DUP5 DUP5 PUSH2 0x48FD JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 MLOAD GT PUSH2 0x3F9B JUMPI SWAP1 POP PUSH2 0x789 JUMP JUMPDEST PUSH2 0x786 DUP2 PUSH2 0x4A1F JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SHR PUSH1 0xFF SWAP1 SWAP2 AND SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3FC3 DUP7 PUSH2 0x4BD8 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3FE8 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH5 0x2540BE400 PUSH2 0x406A JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1EE10833 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4023 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4037 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x405B SWAP2 SWAP1 PUSH2 0x4F0C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x406A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4080 PUSH2 0x4C0F JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x40A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 GT ISZERO PUSH2 0x40AF JUMPI POP DUP4 PUSH2 0x9B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x40BB DUP4 DUP9 PUSH2 0xB05 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x40CE JUMPI DUP6 SWAP2 POP POP PUSH2 0x9B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x40E2 DUP6 PUSH2 0xD06 DUP5 PUSH4 0x3B9ACA00 PUSH2 0x1C2A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x40F4 PUSH4 0x3B9ACA00 DUP4 PUSH2 0xB05 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4117 PUSH4 0x3B9ACA00 PUSH2 0xD06 PUSH2 0x410D DUP12 DUP7 PUSH2 0x1C2A JUMP JUMPDEST PUSH2 0x390 DUP14 DUP9 PUSH2 0x1C2A JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF DUP3 SWAP1 SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT EQ ISZERO PUSH2 0x4140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SUB SWAP1 JUMP JUMPDEST DUP2 MLOAD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x4191 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH2 0x4187 JUMP JUMPDEST PUSH2 0x4174 PUSH2 0x4EE0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x416C JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP POP POP PUSH2 0x789 JUMP JUMPDEST DUP5 MLOAD MLOAD JUMPDEST PUSH1 0x0 NOT DUP2 ADD SWAP1 ISZERO PUSH2 0x41EC JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x41B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP6 PUSH2 0x41C6 DUP3 PUSH2 0x3EE1 JUMP JUMPDEST GT ISZERO PUSH2 0x41D2 JUMPI POP PUSH2 0x41E7 JUMP JUMPDEST DUP1 MLOAD DUP4 EQ PUSH2 0x41E5 JUMPI DUP1 MLOAD PUSH1 0x1 SWAP1 SWAP5 ADD SWAP4 SWAP3 POP JUMPDEST POP JUMPDEST PUSH2 0x4195 JUMP JUMPDEST POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x4206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4240 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x422D PUSH2 0x4EE0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x4225 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 ISZERO PUSH2 0x9B7 JUMPI DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4257 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4274 PUSH2 0x4EB6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4281 DUP7 DUP7 PUSH2 0x4C1C JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 EQ ISZERO PUSH2 0x43A4 JUMPI PUSH1 0x0 PUSH2 0x4299 DUP8 PUSH2 0x3FB2 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x43A2 JUMPI PUSH1 0x0 PUSH2 0x42BA PUSH2 0x4C65 JUMP JUMPDEST SWAP1 POP DUP6 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x42D0 JUMPI POP PUSH5 0xFFFFFFFFFF DUP7 GT ISZERO JUMPDEST PUSH2 0x42D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x0 SLT DUP1 ISZERO PUSH2 0x42F0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP5 SGT ISZERO JUMPDEST PUSH2 0x42F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH5 0xFFFFFFFFFF NOT AND PUSH5 0xFFFFFFFFFF DUP10 AND OR PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000 NOT AND PUSH6 0x10000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP9 AND MUL OR PUSH1 0xFF PUSH1 0xA8 SHL NOT AND PUSH1 0x1 PUSH1 0xA8 SHL PUSH1 0xFF DUP8 AND MUL OR DUP2 SSTORE SWAP1 MLOAD DUP9 SWAP1 DUP11 SWAP1 PUSH32 0xFDFA6885701E2F1F42E4187B9231CF81C1FE23671EF64FA46F34DDB56C1DC18 SWAP1 PUSH2 0x4397 SWAP1 DUP10 SWAP1 PUSH2 0x52C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xFF SWAP1 SWAP2 AND PUSH1 0xA EXP SWAP1 DUP3 ADD MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x43DD DUP5 DUP5 DUP5 PUSH1 0x1 DUP6 PUSH2 0x45DC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH2 0x43F6 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x3E50 JUMP JUMPDEST PUSH1 0x0 DUP4 SGT PUSH2 0x4403 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4422 DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0xAB5 DUP6 DUP8 PUSH1 0x60 ADD MLOAD PUSH2 0x18E3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH2 0x4443 DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0xAB5 DUP6 DUP8 PUSH1 0x40 ADD MLOAD PUSH2 0x18E3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x4455 SWAP1 DUP5 PUSH2 0x8EF JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x4469 SWAP1 DUP3 PUSH2 0x8EF JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x447D SWAP1 DUP4 PUSH2 0x8EF JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x3E50 DUP5 PUSH2 0x4C72 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x449D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP3 PUSH1 0x0 EQ PUSH2 0x4528 JUMPI PUSH1 0x0 DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x1 DUP6 SUB DUP2 MLOAD DUP2 LT PUSH2 0x44C4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP2 PUSH1 0x0 ADD MLOAD DUP2 PUSH1 0x0 ADD MLOAD EQ DUP1 ISZERO PUSH2 0x44EC JUMPI POP DUP2 PUSH1 0x20 ADD MLOAD DUP2 PUSH1 0x20 ADD MLOAD EQ JUMPDEST DUP1 ISZERO PUSH2 0x44FC JUMPI POP PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x1 EQ JUMPDEST ISZERO PUSH2 0x4526 JUMPI PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x4510 SWAP1 DUP5 PUSH2 0x2B06 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x4526 DUP6 DUP6 PUSH2 0x202F JUMP JUMPDEST POP JUMPDEST PUSH1 0x1 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 ADD MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x454C PUSH2 0x2666 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH1 0xF SWAP2 DUP3 SIGNEXTEND SWAP1 SWAP2 SIGNEXTEND SWAP1 PUSH2 0x458D DUP8 DUP8 DUP8 PUSH2 0x426C JUMP JUMPDEST SWAP1 POP PUSH2 0x4599 DUP2 DUP4 PUSH2 0x152B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 SWAP1 SWAP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP9 DUP3 MSTORE SWAP8 DUP5 MSTORE DUP8 DUP2 KECCAK256 SWAP7 DUP2 MSTORE SWAP6 SWAP1 SWAP3 MSTORE POP POP POP SWAP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND SWAP1 SSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45E6 PUSH2 0x3BE2 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 DUP11 MSTORE SWAP1 DUP10 ADD DUP8 SWAP1 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP1 DUP3 AND SWAP4 DUP12 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x50 SHL DUP2 DIV SWAP1 SWAP3 AND PUSH1 0x60 DUP11 ADD MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP4 DIV DUP2 AND PUSH1 0xA0 DUP12 ADD MSTORE PUSH1 0x1 PUSH1 0xC0 SHL DUP4 DIV DUP2 AND PUSH1 0xC0 DUP12 ADD MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP3 DIV SWAP1 SWAP2 AND PUSH1 0xE0 DUP10 ADD MSTORE SWAP1 SWAP2 POP DUP1 DUP5 ISZERO PUSH2 0x4685 JUMPI PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND PUSH1 0x80 DUP10 ADD MSTORE PUSH2 0x468D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP10 ADD MSTORE JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x786 PUSH2 0x46AA DUP5 PUSH4 0x3B9ACA00 PUSH2 0x18E3 JUMP JUMPDEST DUP4 PUSH2 0x1931 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH4 0x3B9ACA00 DUP4 EQ ISZERO PUSH2 0x46CA JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x474D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x46E4 PUSH2 0x46DD PUSH4 0x3B9ACA00 DUP7 PUSH2 0x1515 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x4697 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x46F1 DUP3 PUSH2 0x1D03 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0xF SIGNEXTEND SGT PUSH2 0x470C JUMPI PUSH1 0x0 DUP1 SWAP4 POP SWAP4 POP POP POP PUSH2 0x474D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4740 PUSH2 0x473B PUSH2 0x472F PUSH2 0x4720 DUP6 PUSH2 0x30DE JUMP JUMPDEST PUSH9 0x14B927F32BFFB83338 PUSH2 0x4CCA JUMP JUMPDEST PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1E11 JUMP JUMPDEST PUSH2 0x1E47 JUMP JUMPDEST PUSH1 0x7 SIGNEXTEND SWAP5 POP PUSH1 0x1 SWAP4 POP POP POP POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SGT PUSH2 0x4763 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xF DUP4 SWAP1 SIGNEXTEND PUSH1 0x1 PUSH1 0x40 SHL DUP2 SLT PUSH2 0x477D JUMPI PUSH1 0x40 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH5 0x100000000 DUP2 SLT PUSH2 0x4791 JUMPI PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH3 0x10000 DUP2 SLT PUSH2 0x47A3 JUMPI PUSH1 0x10 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH2 0x100 DUP2 SLT PUSH2 0x47B4 JUMPI PUSH1 0x8 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH1 0x10 DUP2 SLT PUSH2 0x47C4 JUMPI PUSH1 0x4 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH1 0x4 DUP2 SLT PUSH2 0x47D4 JUMPI PUSH1 0x2 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH1 0x2 DUP2 SLT PUSH2 0x47E3 JUMPI PUSH1 0x1 DUP3 ADD SWAP2 POP JUMPDEST PUSH1 0x3F NOT DUP3 ADD PUSH1 0x40 SHL PUSH1 0xF DUP6 SWAP1 SIGNEXTEND PUSH1 0x7F DUP5 SWAP1 SUB SHL PUSH1 0x1 PUSH1 0x3F SHL JUMPDEST PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x4822 JUMPI SWAP1 DUP1 MUL PUSH1 0xFF DUP2 SWAP1 SHR DUP3 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x7F ADD SHR SWAP1 PUSH1 0x1 SAR PUSH2 0x47FC JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SHR PUSH32 0x5555555555555555555555555555555555555555555555555555555555555555 SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x2 DUP2 SWAP1 SHR PUSH32 0x3333333333333333333333333333333333333333333333333333333333333333 SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x4 DUP2 SWAP1 SHR PUSH32 0x707070707070707070707070707070707070707070707070707070707070707 SWAP2 SWAP1 SWAP2 AND ADD PUSH1 0x8 DUP2 SWAP1 SHR PUSH31 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x10 DUP2 SWAP1 SHR ADD PUSH1 0x20 DUP2 SWAP1 SHR ADD PUSH1 0x40 DUP2 SWAP1 SHR ADD PUSH1 0x80 DUP2 SWAP1 SHR PUSH1 0xFF SWAP1 DUP2 AND SWAP2 AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x10 DUP3 PUSH1 0xFF AND GT ISZERO PUSH2 0x4910 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x491A PUSH2 0x230B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP PUSH1 0xFF DUP6 AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x494F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4989 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x4976 PUSH2 0x4E76 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x496E JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 PUSH1 0xFF AND DUP2 LT ISZERO PUSH2 0x4A15 JUMPI PUSH1 0x0 DUP4 DUP3 PUSH1 0x10 DUP2 LT PUSH2 0x49A8 JUMPI INVALID JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x49B9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP4 SLOAD PUSH2 0xFFFF DUP2 AND DUP3 MSTORE PUSH5 0xFFFFFFFFFF PUSH3 0x10000 DUP3 DIV AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xFF PUSH1 0x1 PUSH1 0x38 SHL DUP4 DIV AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV PUSH1 0xA SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH1 0x1 ADD PUSH2 0x498F JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x4A3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4A64 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4AC1 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4A80 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x4AA1 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0x4CFD JUMP JUMPDEST DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4AAD JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x4A6A JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x43DD JUMPI DUP1 JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x4B07 JUMPI POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4AE6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4AFD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT JUMPDEST ISZERO PUSH2 0x4BCF JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4B18 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4B2F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x1 DUP5 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4B46 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4B59 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4B76 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4B8D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 PUSH1 0x1 DUP5 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4BA4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4BB7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD SWAP2 SWAP1 SWAP2 MSTORE MSTORE PUSH1 0x0 NOT ADD PUSH2 0x4ACF JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4AC5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4BE5 PUSH2 0x4D58 JUMP JUMPDEST PUSH1 0x0 SWAP5 DUP6 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP3 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x789 PUSH1 0x9 PUSH2 0x3F48 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4C29 PUSH2 0x4C65 JUMP JUMPDEST PUSH1 0x0 SWAP6 DUP7 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP8 KECCAK256 SWAP6 DUP8 MSTORE SWAP5 SWAP1 MSTORE POP POP POP SWAP1 KECCAK256 SLOAD PUSH6 0x10000000000 DUP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP2 PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x789 PUSH1 0x8 PUSH2 0x3F48 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C7D DUP3 PUSH2 0x4D65 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP1 POP PUSH2 0x4CBC DUP3 DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0xA0 ADD MLOAD DUP6 PUSH4 0xFFFFFFFF AND DUP9 PUSH1 0xE0 ADD MLOAD PUSH2 0x3BEF JUMP JUMPDEST PUSH2 0x929 DUP3 DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0x3D03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF DUP3 DUP2 SIGNEXTEND SWAP1 DUP5 SWAP1 SIGNEXTEND SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x1D80 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO PUSH2 0x786 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3FFF DUP5 GT ISZERO PUSH2 0x4D0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH5 0xFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x4D20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 DUP3 GT ISZERO PUSH2 0x4D2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH8 0xFFFF000000000000 PUSH1 0x30 DUP5 SWAP1 SHL AND PUSH6 0xFFFFFFFFFF00 PUSH1 0x8 DUP5 SWAP1 SHL AND OR PUSH1 0xFF DUP3 AND OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x789 PUSH1 0xF PUSH2 0x3F48 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x4D7C PUSH2 0x4E22 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4D89 PUSH2 0x4E4E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD PUSH2 0x4E41 PUSH2 0x4EB6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x4EB1 JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x727 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4F1D JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4F35 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x786 DUP3 PUSH2 0x4EFA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4F50 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4F59 DUP4 PUSH2 0x4EFA JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x4F6D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420737765657020636173682074696D65000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x13585C9AD95D081B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x52 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x4F7261636C652072617465206F766572666C6F77 PUSH1 0x60 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D75737420696E697469616C697A65206D61726B657473000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x10D1CE881B9BC81B585C9AD95D1CC81B1A5CDD1959 PUSH1 0x5A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x92DCECC2D8D2C840D2DCC8CAF PUSH1 0x9B SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x24A69D1039B4BC1036B7B73A341032B93937B9 PUSH1 0x69 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x4E6F206E546F6B656E20617373657473 PUSH1 0x80 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x4F766572206D617820617373657473 PUSH1 0x88 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x494D3A20696E746572706F6C6174696F6E206572726F72000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x10D1CE881B585C9AD95D081A5B99195E08189BDD5B99 PUSH1 0x52 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x929A7440D2DCE6EACCCCD2C6D2CADCE840C6C2E6D PUSH1 0x5B SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x12534E881B9BDD08199A5C9CDD081A5B9A5D PUSH1 0x72 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x494D3A20696E76616C69642074696D65 PUSH1 0x80 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x50543A20696E69742076616C7565207A65726F PUSH1 0x68 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x10D1CE881B9BC81B585C9AD95D08199BDD5B99 PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x12534E881B9BC81B585C9AD95D1CC81D1BC81A5B9A5D PUSH1 0x52 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x494D3A20696D706C6965642072617465206661696C6564000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP INVALID MSTORE8 PUSH2 0x6665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F77A26469706673582212 KECCAK256 SELFDESTRUCT 0xD8 PUSH28 0x76E073E2CB77CADF6A6EA7F2C83E9BE7D79267E02D2DC3571B49595D SWAP16 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ", "sha1": "c63fa967f042f3c0a3df85a4669a34b8ef8ee0ac", "source": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\npragma abicoder v2;\n\nimport \"./nTokenMintAction.sol\";\nimport \"../../internal/markets/Market.sol\";\nimport \"../../internal/markets/CashGroup.sol\";\nimport \"../../internal/markets/AssetRate.sol\";\nimport \"../../internal/balances/BalanceHandler.sol\";\nimport \"../../internal/portfolio/PortfolioHandler.sol\";\nimport \"../../internal/settlement/SettlePortfolioAssets.sol\";\nimport \"../../internal/settlement/SettleBitmapAssets.sol\";\nimport \"../../internal/nTokenHandler.sol\";\nimport \"../../math/SafeInt256.sol\";\nimport \"../../math/Bitmap.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/// @notice Initialize markets is called once every quarter to setup the new markets. Only the nToken account\n/// can initialize markets, and this method will be called on behalf of that account. In this action\n/// the following will occur:\n///  - nToken Liquidity Tokens will be settled\n///  - Any ifCash assets will be settled\n///  - If nToken liquidity tokens are settled with negative net ifCash, enough cash will be withheld at the PV\n///    to purchase offsetting positions\n///  - fCash positions are written to storage\n///  - For each market, calculate the proportion of fCash to cash given:\n///     - previous oracle rates\n///     - rate anchor set by governance\n///     - percent of cash to deposit into the market set by governance\n///  - Set new markets and add liquidity tokens to portfolio\nlibrary InitializeMarketsAction {\n    using Bitmap for bytes32;\n    using SafeMath for uint256;\n    using SafeInt256 for int256;\n    using PortfolioHandler for PortfolioState;\n    using Market for MarketParameters;\n    using BalanceHandler for BalanceState;\n    using CashGroup for CashGroupParameters;\n    using AssetRate for AssetRateParameters;\n    using AccountContextHandler for AccountContext;\n    using nTokenHandler for nTokenPortfolio;\n\n    event MarketsInitialized(uint16 currencyId);\n    event SweepCashIntoMarkets(uint16 currencyId, int256 cashIntoMarkets);\n\n    struct GovernanceParameters {\n        int256[] depositShares;\n        int256[] leverageThresholds;\n        int256[] annualizedAnchorRates;\n        int256[] proportions;\n    }\n\n    function _getGovernanceParameters(uint256 currencyId, uint256 maxMarketIndex)\n        private\n        view\n        returns (GovernanceParameters memory)\n    {\n        GovernanceParameters memory params;\n        (params.depositShares, params.leverageThresholds) = nTokenHandler.getDepositParameters(\n            currencyId,\n            maxMarketIndex\n        );\n\n        (params.annualizedAnchorRates, params.proportions) = nTokenHandler.getInitializationParameters(\n            currencyId,\n            maxMarketIndex\n        );\n\n        return params;\n    }\n\n    function _settleNTokenPortfolio(nTokenPortfolio memory nToken, uint256 blockTime) private {\n        // nToken never has idiosyncratic cash between 90 day intervals but since it also has a\n        // bitmap fCash assets. We don't set the pointer to the settlement date of the liquidity\n        // tokens (1 quarter away), instead we set it to the current block time. This is a bit\n        // esoteric but will ensure that ifCash is never improperly settled.\n\n        // If lastInitializedTime == reference time then this will fail, that is the correct\n        // behavior since initialization begins at lastInitializedTime. That means that markets\n        // cannot be re-initialized during a single block (this is the correct behavior). If\n        // lastInitializedTime >= reference time then the markets have already been initialized\n        // for the quarter.\n        uint256 referenceTime = DateTime.getReferenceTime(blockTime);\n        require(nToken.lastInitializedTime < referenceTime, \"IM: invalid time\");\n\n        {\n            // Settles liquidity token balances and portfolio state now contains the net fCash amounts\n            SettleAmount[] memory settleAmount =\n                SettlePortfolioAssets.settlePortfolio(nToken.portfolioState, blockTime);\n            nToken.cashBalance = nToken.cashBalance.add(settleAmount[0].netCashChange);\n        }\n\n        (int256 settledAssetCash, uint256 blockTimeUTC0) =\n            SettleBitmapAssets.settleBitmappedCashGroup(\n                nToken.tokenAddress,\n                nToken.cashGroup.currencyId,\n                nToken.lastInitializedTime,\n                blockTime\n            );\n        nToken.cashBalance = nToken.cashBalance.add(settledAssetCash);\n\n        // The ifCashBitmap has been updated to reference this new settlement time\n        require(blockTimeUTC0 <= type(uint40).max);\n        nToken.lastInitializedTime = uint40(blockTimeUTC0);\n    }\n\n    /// @notice Special method to get previous markets, normal usage would not reference previous markets\n    /// in this way\n    function _getPreviousMarkets(\n        uint256 currencyId,\n        uint256 blockTime,\n        nTokenPortfolio memory nToken,\n        MarketParameters[] memory previousMarkets\n    ) private view {\n        uint256 rateOracleTimeWindow = nToken.cashGroup.getRateOracleTimeWindow();\n        // This will reference the previous settlement date to get the previous markets\n        uint256 settlementDate = DateTime.getReferenceTime(blockTime);\n\n        // Assume that assets are stored in order and include all assets of the previous market\n        // set. This will account for the potential that markets.length is greater than the previous\n        // markets when the maxMarketIndex is increased (increasing the overall number of markets).\n        // We don't fetch the 3 month market (i = 0) because it has settled and will not be used for\n        // the subsequent calculations. Since nTokens never allow liquidity to go to zero then we know\n        // there is always a matching token for each market.\n        for (uint256 i = 1; i < nToken.portfolioState.storedAssets.length; i++) {\n            previousMarkets[i].loadMarketWithSettlementDate(\n                currencyId,\n                // These assets will reference the previous liquidity tokens\n                nToken.portfolioState.storedAssets[i].maturity,\n                blockTime,\n                // No liquidity tokens required for this process\n                false,\n                rateOracleTimeWindow,\n                settlementDate\n            );\n        }\n    }\n\n    /// @notice Check the net fCash assets set by the portfolio and withhold cash to account for\n    /// the PV of negative ifCash. Also sets the ifCash assets into the nToken mapping.\n    function _withholdAndSetfCashAssets(\n        nTokenPortfolio memory nToken,\n        MarketParameters[] memory previousMarkets,\n        uint256 currencyId,\n        uint256 blockTime\n    ) private returns (int256) {\n        // Residual fcash must be put into the ifCash bitmap from the portfolio, skip the 3 month\n        // liquidity token since there is no residual fCash for that maturity, it always settles to cash.\n        for (uint256 i = 1; i < nToken.portfolioState.storedAssets.length; i++) {\n            PortfolioAsset memory asset = nToken.portfolioState.storedAssets[i];\n            // Defensive check to ensure that everything is an fcash asset, all liquidity tokens after\n            // the three month should have been settled to fCash at this point.\n            require(asset.assetType == Constants.FCASH_ASSET_TYPE);\n\n            BitmapAssetsHandler.addifCashAsset(\n                nToken.tokenAddress,\n                currencyId,\n                asset.maturity,\n                nToken.lastInitializedTime,\n                asset.notional\n            );\n\n            // Do not have fCash assets stored in the portfolio\n            nToken.portfolioState.deleteAsset(i);\n        }\n\n        // Recalculate what the withholdings are if there are any ifCash assets remaining\n        return _getNTokenNegativefCashWithholding(nToken, previousMarkets, blockTime);\n    }\n\n    /// @notice If a nToken incurs a negative fCash residual as a result of lending, this means\n    /// that we are going to need to withhold some amount of cash so that market makers can purchase and\n    /// clear the debts off the balance sheet.\n    function _getNTokenNegativefCashWithholding(\n        nTokenPortfolio memory nToken,\n        MarketParameters[] memory previousMarkets,\n        uint256 blockTime\n    ) internal view returns (int256 totalCashWithholding) {\n        bytes32 assetsBitmap = BitmapAssetsHandler.getAssetsBitmap(nToken.tokenAddress, nToken.cashGroup.currencyId);\n        // This buffer is denominated in rate precision with 10 basis point increments. It is used to shift the\n        // withholding rate to ensure that sufficient cash is withheld for negative fCash balances.\n        uint256 oracleRateBuffer =\n            uint256(uint8(nToken.parameters[Constants.CASH_WITHHOLDING_BUFFER])) * Constants.TEN_BASIS_POINTS;\n        uint256 oracleRateBlockTime = previousMarkets.length == 0 ? blockTime : blockTime.sub(Constants.QUARTER);\n\n        uint256 bitNum = assetsBitmap.getNextBitNum();\n        while (bitNum != 0) {\n            // lastInitializedTime is now the reference point for all ifCash bitmap\n            uint256 maturity = DateTime.getMaturityFromBitNum(nToken.lastInitializedTime, bitNum);\n\n            // When looping for sweepCashIntoMarkets, previousMarkets is not defined and we only\n            // want to apply withholding for idiosyncratic fCash.\n            if (\n                previousMarkets.length == 0 &&\n                DateTime.isValidMarketMaturity(\n                    nToken.cashGroup.maxMarketIndex,\n                    maturity,\n                    blockTime\n                )\n            ) {\n                // Turn off the bit and look for the next one\n                assetsBitmap = assetsBitmap.setBit(bitNum, false);\n                bitNum = assetsBitmap.getNextBitNum();\n                continue;\n            }\n\n            int256 notional =\n                BitmapAssetsHandler.getifCashNotional(\n                    nToken.tokenAddress,\n                    nToken.cashGroup.currencyId,\n                    maturity\n                );\n\n            // Withholding only applies for negative cash balances\n            if (notional < 0) {\n                uint256 oracleRate = nToken.cashGroup.calculateOracleRate(maturity, oracleRateBlockTime);\n\n                if (oracleRateBuffer > oracleRate) {\n                    oracleRate = 0;\n                } else {\n                    oracleRate = oracleRate.sub(oracleRateBuffer);\n                }\n\n                totalCashWithholding = totalCashWithholding.sub(\n                    AssetHandler.getPresentfCashValue(notional, maturity, blockTime, oracleRate)\n                );\n            }\n\n            // Turn off the bit and look for the next one\n            assetsBitmap = assetsBitmap.setBit(bitNum, false);\n            bitNum = assetsBitmap.getNextBitNum();\n        }\n\n        return nToken.cashGroup.assetRate.convertFromUnderlying(totalCashWithholding);\n    }\n\n    function _calculateNetAssetCashAvailable(\n        nTokenPortfolio memory nToken,\n        MarketParameters[] memory previousMarkets,\n        uint256 blockTime,\n        uint256 currencyId,\n        bool isFirstInit\n    ) private returns (int256) {\n        int256 netAssetCashAvailable;\n        int256 assetCashWithholding;\n\n        if (isFirstInit) {\n            nToken.lastInitializedTime = uint40(DateTime.getTimeUTC0(blockTime));\n        } else {\n            _settleNTokenPortfolio(nToken, blockTime);\n            _getPreviousMarkets(currencyId, blockTime, nToken, previousMarkets);\n            assetCashWithholding = _withholdAndSetfCashAssets(\n                nToken,\n                previousMarkets,\n                currencyId,\n                blockTime\n            );\n        }\n\n        // Deduct the amount of withholding required from the cash balance (at this point includes all settled cash)\n        netAssetCashAvailable = nToken.cashBalance.subNoNeg(assetCashWithholding);\n\n        // This is the new balance to store\n        nToken.cashBalance = assetCashWithholding;\n\n        // We can't have less net asset cash than our percent basis or some markets will end up not\n        // initialized\n        require(\n            netAssetCashAvailable > int256(Constants.DEPOSIT_PERCENT_BASIS),\n            \"IM: insufficient cash\"\n        );\n\n        return netAssetCashAvailable;\n    }\n\n    /// @notice The six month implied rate is zero if there have never been any markets initialized\n    /// otherwise the market will be the interpolation between the old 6 month and 1 year markets\n    /// which are now sitting at 3 month and 9 month time to maturity\n    function _getSixMonthImpliedRate(\n        MarketParameters[] memory previousMarkets,\n        uint256 referenceTime\n    ) private pure returns (uint256) {\n        // Cannot interpolate six month rate without a 1 year market\n        require(previousMarkets.length >= 3, \"IM: six month error\");\n\n        return\n            CashGroup.interpolateOracleRate(\n                previousMarkets[1].maturity,\n                previousMarkets[2].maturity,\n                previousMarkets[1].oracleRate,\n                previousMarkets[2].oracleRate,\n                // Maturity date == 6 months from reference time\n                referenceTime + 2 * Constants.QUARTER\n            );\n    }\n\n    /// @notice Calculates a market proportion via the implied rate. The formula is:\n    ///    exchangeRate = e ^ (impliedRate * timeToMaturity)\n    ///    exchangeRate = (1 / rateScalar) * ln(proportion / (1 - proportion)) + rateAnchor\n    ///    proportion / (1 - proportion) = e^((exchangeRate - rateAnchor) * rateScalar)\n    ///    exp = e^((exchangeRate - rateAnchor) * rateScalar)\n    ///    proportion / (1 - proportion) = exp\n    ///    exp * (1 - proportion) = proportion\n    ///    exp - exp * proportion = proportion\n    ///    exp = proportion + exp * proportion\n    ///    exp = proportion * (1 + exp)\n    ///    proportion = exp / (1 + exp)\n    function _getProportionFromOracleRate(\n        uint256 oracleRate,\n        uint256 timeToMaturity,\n        int256 rateScalar,\n        uint256 annualizedAnchorRate\n    ) private pure returns (int256) {\n        int256 rateAnchor = Market.getExchangeRateFromImpliedRate(annualizedAnchorRate, timeToMaturity);\n        // Exchange rate value here will be floored at Constants.RATE_PRECISION when the oracleRate is zero\n        int256 exchangeRate = Market.getExchangeRateFromImpliedRate(oracleRate, timeToMaturity);\n\n        int128 expValue = ABDKMath64x64.fromInt(\n            // (exchangeRate - rateAnchor) * rateScalar\n            (exchangeRate.sub(rateAnchor)).mulInRatePrecision(rateScalar)\n        );\n        // Scale this back to a decimal in abdk\n        expValue = ABDKMath64x64.div(expValue, Constants.RATE_PRECISION_64x64);\n        // Take the exponent\n        expValue = ABDKMath64x64.exp(expValue);\n        // proportion = exp / (1 + exp)\n        // NOTE: 2**64 == 1 in ABDKMath64x64\n        int128 proportion = ABDKMath64x64.div(expValue, ABDKMath64x64.add(expValue, 2**64));\n\n        // Scale this back to 1e9 precision\n        proportion = ABDKMath64x64.mul(proportion, Constants.RATE_PRECISION_64x64);\n\n        return ABDKMath64x64.toInt(proportion);\n    }\n\n    /// @dev Returns the oracle rate given the market ratios of fCash to cash. The annualizedAnchorRate\n    /// is used to calculate a rate anchor. Since a rate anchor varies with timeToMaturity and annualizedAnchorRate\n    /// does not, this method will return consistent values regardless of the timeToMaturity of when initialize\n    /// markets is called. This can be helpful if a currency needs to be initialized mid quarter when it is\n    /// newly launched.\n    function _calculateOracleRate(\n        int256 fCashAmount,\n        int256 underlyingCashToMarket,\n        int256 rateScalar,\n        uint256 annualizedAnchorRate,\n        uint256 timeToMaturity\n    ) internal pure returns (uint256) {\n        int256 rateAnchor = Market.getExchangeRateFromImpliedRate(annualizedAnchorRate, timeToMaturity);\n        uint256 oracleRate = Market.getImpliedRate(\n            fCashAmount,\n            underlyingCashToMarket,\n            rateScalar,\n            rateAnchor,\n            timeToMaturity\n        );\n\n        return oracleRate;\n    }\n\n    /// @notice Returns the linear interpolation between two market rates. The formula is\n    /// slope = (longMarket.oracleRate - shortMarket.oracleRate) / (longMarket.maturity - shortMarket.maturity)\n    /// interpolatedRate = slope * (assetMaturity - shortMarket.maturity) + shortMarket.oracleRate\n    function _interpolateFutureRate(\n        uint256 shortMaturity,\n        uint256 shortRate,\n        MarketParameters memory longMarket\n    ) private pure returns (uint256) {\n        uint256 longMaturity = longMarket.maturity;\n        uint256 longRate = longMarket.oracleRate;\n        // the next market maturity is always a quarter away\n        uint256 newMaturity = longMarket.maturity + Constants.QUARTER;\n        require(shortMaturity < longMaturity, \"IM: interpolation error\");\n\n        // It's possible that the rates are inverted where the short market rate > long market rate and\n        // we will get an underflow here so we check for that\n        if (longRate >= shortRate) {\n            return\n                (longRate - shortRate)\n                    .mul(newMaturity - shortMaturity)\n                // No underflow here, checked above\n                    .div(longMaturity - shortMaturity)\n                    .add(shortRate);\n        } else {\n            // In this case the slope is negative so:\n            // interpolatedRate = shortMarket.oracleRate - slope * (assetMaturity - shortMarket.maturity)\n            uint256 diff =\n                (shortRate - longRate)\n                    .mul(newMaturity - shortMaturity)\n                // No underflow here, checked above\n                    .div(longMaturity - shortMaturity);\n\n            // This interpolation may go below zero so we bottom out interpolated rates at zero\n            return shortRate > diff ? shortRate - diff : 0;\n        }\n    }\n\n    /// @dev This is here to clear the stack\n    function _setLiquidityAmount(\n        int256 netAssetCashAvailable,\n        int256 depositShare,\n        uint256 assetType,\n        MarketParameters memory newMarket,\n        nTokenPortfolio memory nToken\n    ) private pure returns (int256) {\n        // The portion of the cash available that will be deposited into the market\n        int256 assetCashToMarket =\n            netAssetCashAvailable.mul(depositShare).div(Constants.DEPOSIT_PERCENT_BASIS);\n        newMarket.totalAssetCash = assetCashToMarket;\n        newMarket.totalLiquidity = assetCashToMarket;\n\n        // Add a new liquidity token, this will end up in the new asset array\n        nToken.portfolioState.addAsset(\n            nToken.cashGroup.currencyId,\n            newMarket.maturity,\n            assetType, // This is liquidity token asset type\n            assetCashToMarket\n        );\n\n        // fCashAmount is calculated using the underlying amount\n        return nToken.cashGroup.assetRate.convertToUnderlying(assetCashToMarket);\n    }\n\n    /// @notice Calculates the fCash amount given the cash and proportion:\n    // proportion = totalfCash / (totalfCash + totalCashUnderlying)\n    // proportion * (totalfCash + totalCashUnderlying) = totalfCash\n    // proportion * totalCashUnderlying + proportion * totalfCash = totalfCash\n    // proportion * totalCashUnderlying = totalfCash * (1 - proportion)\n    // totalfCash = proportion * totalCashUnderlying / (1 - proportion)\n    function _calculatefCashAmountFromProportion(\n        int256 underlyingCashToMarket,\n        int256 proportion\n    ) private pure returns (int256) {\n        return underlyingCashToMarket\n            .mul(proportion)\n            .div(Constants.RATE_PRECISION.sub(proportion));\n    }\n\n    /// @notice Sweeps nToken cash balance into markets after accounting for cash withholding. Can be\n    /// done after fCash residuals are purchased to ensure that markets have maximum liquidity.\n    /// @param currencyId currency of markets to initialize\n    /// @dev emit:CashSweepIntoMarkets\n    /// @dev auth:none\n    function sweepCashIntoMarkets(uint16 currencyId) external {\n        uint256 blockTime = block.timestamp;\n        nTokenPortfolio memory nToken;\n        nToken.loadNTokenPortfolioStateful(currencyId);\n        require(nToken.portfolioState.storedAssets.length > 0, \"No nToken assets\");\n\n        // Can only sweep cash after markets have been initialized\n        uint256 referenceTime = DateTime.getReferenceTime(blockTime);\n        require(nToken.lastInitializedTime >= referenceTime, \"Must initialize markets\");\n\n        // Can only sweep cash after the residual purchase time has passed\n        uint256 minSweepCashTime =\n            nToken.lastInitializedTime.add(\n                uint256(uint8(nToken.parameters[Constants.RESIDUAL_PURCHASE_TIME_BUFFER])) * 1 hours\n            );\n        require(blockTime > minSweepCashTime, \"Invalid sweep cash time\");\n\n        int256 assetCashWithholding =\n            _getNTokenNegativefCashWithholding(\n                nToken,\n                new MarketParameters[](0), // Parameter is unused when referencing current markets\n                blockTime\n            );\n\n        int256 cashIntoMarkets = nToken.cashBalance.subNoNeg(assetCashWithholding);\n        BalanceHandler.setBalanceStorageForNToken(\n            nToken.tokenAddress,\n            nToken.cashGroup.currencyId,\n            assetCashWithholding\n        );\n\n        // This will deposit the cash balance into markets, but will not record a token supply change.\n        nTokenMintAction.nTokenMint(currencyId, cashIntoMarkets);\n        emit SweepCashIntoMarkets(currencyId, cashIntoMarkets);\n    }\n\n    /// @notice Initialize the market for a given currency id, done once a quarter\n    /// @param currencyId currency of markets to initialize\n    /// @param isFirstInit true if this is the first time the markets have been initialized\n    /// @dev emit:MarketsInitialized\n    /// @dev auth:none\n    function initializeMarkets(uint16 currencyId, bool isFirstInit) external {\n        uint256 blockTime = block.timestamp;\n        nTokenPortfolio memory nToken;\n        nToken.loadNTokenPortfolioStateful(currencyId);\n        MarketParameters[] memory previousMarkets =\n            new MarketParameters[](nToken.cashGroup.maxMarketIndex);\n\n        // This should be sufficient to validate that the currency id is valid\n        require(nToken.cashGroup.maxMarketIndex != 0, \"IM: no markets to init\");\n        // If the nToken has any assets then this is not the first initialization\n        if (isFirstInit) {\n            require(nToken.portfolioState.storedAssets.length == 0, \"IM: not first init\");\n        }\n\n        int256 netAssetCashAvailable = _calculateNetAssetCashAvailable(\n            nToken,\n            previousMarkets,\n            blockTime,\n            currencyId,\n            isFirstInit\n        );\n\n        GovernanceParameters memory parameters =\n            _getGovernanceParameters(currencyId, nToken.cashGroup.maxMarketIndex);\n\n        MarketParameters memory newMarket;\n        // Oracle rate is carried over between loops\n        uint256 oracleRate;\n        for (uint256 i = 0; i < nToken.cashGroup.maxMarketIndex; i++) {\n            // Traded markets are 1-indexed\n            newMarket.maturity = DateTime.getReferenceTime(blockTime).add(\n                DateTime.getTradedMarket(i + 1)\n            );\n\n            int256 underlyingCashToMarket =\n                _setLiquidityAmount(\n                    netAssetCashAvailable,\n                    parameters.depositShares[i],\n                    Constants.MIN_LIQUIDITY_TOKEN_INDEX + i, // liquidity token asset type\n                    newMarket,\n                    nToken\n                );\n\n            uint256 timeToMaturity = newMarket.maturity.sub(blockTime);\n            int256 rateScalar = nToken.cashGroup.getRateScalar(i + 1, timeToMaturity);\n            // Governance will prevent previousMarkets.length from being equal to 1, meaning that we will\n            // either have 0 markets (on first init), exactly 2 markets, or 2+ markets. In the case that there\n            // are exactly two markets then the 6 month market must be initialized via this method (there is no\n            // 9 month market to interpolate a rate against). In the case of 2+ markets then we will only enter this\n            // first branch when the number of markets is increased\n            if (\n                isFirstInit ||\n                // This is the six month market when there are only 3 and 6 month markets\n                (i == 1 && previousMarkets.length == 2) ||\n                // At this point, these are new markets and they must be initialized\n                (i >= nToken.portfolioState.storedAssets.length) ||\n                // When extending from the 6 month to 1 year market we must initialize both 6 and 1 year as new\n                (i == 1 && previousMarkets[2].oracleRate == 0)\n            ) {\n                // Any newly added markets cannot have their implied rates interpolated via the previous\n                // markets. In this case we initialize the markets using the rate anchor and proportion.\n                int256 fCashAmount = _calculatefCashAmountFromProportion(underlyingCashToMarket, parameters.proportions[i]);\n\n                newMarket.totalfCash = fCashAmount;\n                newMarket.oracleRate = _calculateOracleRate(\n                    fCashAmount,\n                    underlyingCashToMarket,\n                    rateScalar,\n                    uint256(parameters.annualizedAnchorRates[i]), // No overflow, uint32 when set\n                    timeToMaturity\n                );\n\n                // If this fails it is because the rate anchor and proportion are not set properly by\n                // governance.\n                require(newMarket.oracleRate > 0, \"IM: implied rate failed\");\n            } else {\n                // Two special cases for the 3 month and 6 month market when interpolating implied rates. The 3 month market\n                // inherits the implied rate from the previous 6 month market (they are now at the same maturity).\n                if (i == 0) {\n                    // We should never get an array out of bounds error here because of the inequality check in the first branch\n                    // of the outer if statement.\n                    oracleRate = previousMarkets[1].oracleRate;\n                } else if (i == 1) {\n                    // The six month market is the interpolation between the 3 month and the 1 year market (now at 9 months). This\n                    // interpolation is different since the rate is between 3 and 9 months, for all the other interpolations we interpolate\n                    // forward in time (i.e. use a 3 and 6 month rate to interpolate a 1 year rate). The first branch of this if statement\n                    // will capture the case when the 1 year rate has not been set.\n                    oracleRate = _getSixMonthImpliedRate(\n                        previousMarkets,\n                        DateTime.getReferenceTime(blockTime)\n                    );\n                } else {\n                    // Any other market has the interpolation between the new implied rate from the newly initialized market previous\n                    // to this market interpolated with the previous version of this market. For example, the newly initialized 1 year\n                    // market will have its implied rate set to the interpolation between the newly initialized 6 month market (done in\n                    // previous iteration of this loop) and the previous 1 year market (which has now rolled down to 9 months). Similarly,\n                    // a 2 year market will be interpolated from the newly initialized 1 year and the previous 2 year market.\n\n                    // This is the previous market maturity, traded markets are 1-indexed\n                    uint256 shortMarketMaturity =\n                        DateTime.getReferenceTime(blockTime).add(DateTime.getTradedMarket(i));\n                    oracleRate = _interpolateFutureRate(\n                        shortMarketMaturity,\n                        // This is the oracle rate from the previous iteration in the loop,\n                        // refers to the new oracle rate set on the newly initialized market\n                        // that is adjacent to the market currently being initialized.\n                        oracleRate,\n                        // This is the previous version of the current market\n                        previousMarkets[i]\n                    );\n                }\n\n                // When initializing new markets we need to ensure that the new implied oracle rates align\n                // with the current yield curve or valuations for ifCash will spike. This should reference the\n                // previously calculated implied rate and the current market.\n                int256 proportion =\n                    _getProportionFromOracleRate(\n                        oracleRate,\n                        timeToMaturity,\n                        rateScalar,\n                        uint256(parameters.annualizedAnchorRates[i]) // No overflow, uint32 when set\n                    );\n\n                // If the calculated proportion is greater than the leverage threshold then we cannot\n                // provide liquidity without risk of liquidation. In this case, set the leverage threshold\n                // as the new proportion and calculate the oracle rate from it. This will result in fCash valuations\n                // changing on chain, however, adding liquidity via nTokens would also end up with this\n                // result as well.\n                if (proportion > parameters.leverageThresholds[i]) {\n                    proportion = parameters.leverageThresholds[i];\n                    newMarket.totalfCash = _calculatefCashAmountFromProportion(underlyingCashToMarket, proportion);\n\n                    oracleRate = _calculateOracleRate(\n                        newMarket.totalfCash,\n                        underlyingCashToMarket,\n                        rateScalar,\n                        uint256(parameters.annualizedAnchorRates[i]), // No overflow, uint32 when set\n                        timeToMaturity\n                    );\n\n                    require(oracleRate != 0, \"Oracle rate overflow\");\n                } else {\n                    newMarket.totalfCash = _calculatefCashAmountFromProportion(underlyingCashToMarket, proportion);\n                }\n\n                // It's possible that totalfCash is zero from rounding errors above, we want to set this to a minimum value\n                // so that we don't have divide by zero errors.\n                if (newMarket.totalfCash < 1) newMarket.totalfCash = 1;\n\n                newMarket.oracleRate = oracleRate;\n                // The oracle rate has been changed so we set the previous trade time to current\n                newMarket.previousTradeTime = blockTime;\n            }\n\n            // Implied rate will always be set to oracle rate\n            newMarket.lastImpliedRate = newMarket.oracleRate;\n            finalizeMarket(newMarket, currencyId, nToken);\n        }\n\n        // prettier-ignore\n        (\n            /* hasDebt */,\n            /* activeCurrencies */,\n            uint8 assetArrayLength,\n            /* nextSettleTime */\n        ) = nToken.portfolioState.storeAssets(nToken.tokenAddress);\n        BalanceHandler.setBalanceStorageForNToken(\n            nToken.tokenAddress,\n            currencyId,\n            nToken.cashBalance\n        );\n        nTokenHandler.setArrayLengthAndInitializedTime(\n            nToken.tokenAddress,\n            assetArrayLength,\n            nToken.lastInitializedTime\n        );\n\n        emit MarketsInitialized(uint16(currencyId));\n    }\n\n    function finalizeMarket(\n        MarketParameters memory market,\n        uint256 currencyId,\n        nTokenPortfolio memory nToken\n    ) internal {\n        // Always reference the current settlement date\n        uint256 settlementDate = DateTime.getReferenceTime(block.timestamp) + Constants.QUARTER;\n        market.setMarketStorageForInitialize(currencyId, settlementDate);\n\n        BitmapAssetsHandler.addifCashAsset(\n            nToken.tokenAddress,\n            currencyId,\n            market.maturity,\n            nToken.lastInitializedTime,\n            market.totalfCash.neg()\n        );\n    }\n}\n", "sourceMap": "1454:31160:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;", "sourcePath": "contracts/external/actions/InitializeMarketsAction.sol", "deployment": {"address": "0xD9ED257dd2dA31e337852274AA1C40a64d21882C", "chainid": "42", "blockHeight": 28786416}}